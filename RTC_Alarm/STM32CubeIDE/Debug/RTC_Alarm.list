
RTC_Alarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f08  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08002fc4  08002fc4  00012fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003048  08003048  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08003048  08003048  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003048  08003048  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003048  08003048  00013048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800304c  0800304c  0001304c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08003050  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000088  080030d8  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  080030d8  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000a1c4  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00007945  00000000  00000000  0002a274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ad1  00000000  00000000  00031bb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000788  00000000  00000000  00033690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00097945  00000000  00000000  00033e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000006a0  00000000  00000000  000cb760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001850e  00000000  00000000  000cbe00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e430e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cb4  00000000  00000000  000e4360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000088 	.word	0x20000088
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002fac 	.word	0x08002fac

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000008c 	.word	0x2000008c
 8000100:	08002fac 	.word	0x08002fac

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000230:	480d      	ldr	r0, [pc, #52]	; (8000268 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000232:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000234:	f000 faf2 	bl	800081c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000238:	480c      	ldr	r0, [pc, #48]	; (800026c <LoopForever+0x6>)
  ldr r1, =_edata
 800023a:	490d      	ldr	r1, [pc, #52]	; (8000270 <LoopForever+0xa>)
  ldr r2, =_sidata
 800023c:	4a0d      	ldr	r2, [pc, #52]	; (8000274 <LoopForever+0xe>)
  movs r3, #0
 800023e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000240:	e002      	b.n	8000248 <LoopCopyDataInit>

08000242 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000242:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000244:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000246:	3304      	adds	r3, #4

08000248 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000248:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800024a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800024c:	d3f9      	bcc.n	8000242 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800024e:	4a0a      	ldr	r2, [pc, #40]	; (8000278 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000250:	4c0a      	ldr	r4, [pc, #40]	; (800027c <LoopForever+0x16>)
  movs r3, #0
 8000252:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000254:	e001      	b.n	800025a <LoopFillZerobss>

08000256 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000256:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000258:	3204      	adds	r2, #4

0800025a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800025a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800025c:	d3fb      	bcc.n	8000256 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800025e:	f002 fa0f 	bl	8002680 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000262:	f000 f80f 	bl	8000284 <main>

08000266 <LoopForever>:

LoopForever:
  b LoopForever
 8000266:	e7fe      	b.n	8000266 <LoopForever>
  ldr   r0, =_estack
 8000268:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800026c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000270:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000274:	08003050 	.word	0x08003050
  ldr r2, =_sbss
 8000278:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800027c:	200000ec 	.word	0x200000ec

08000280 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000280:	e7fe      	b.n	8000280 <ADC1_COMP_IRQHandler>
	...

08000284 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000288:	f000 fad4 	bl	8000834 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* Configure LED4 */
  BSP_LED_Init(LED4);
 800028c:	2000      	movs	r0, #0
 800028e:	f000 fa63 	bl	8000758 <BSP_LED_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000292:	f000 f80f 	bl	80002b4 <SystemClock_Config>
  /* USER CODE END SysInit */


  /* Initialize all configured peripherals */
  //MX_GPIO_Init(); // RTC_init has timer callback, so GPIO needs to be init before RTC
  MX_RTC_Init();
 8000296:	f000 f867 	bl	8000368 <MX_RTC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  RTCStatus = 1;
 800029a:	4b04      	ldr	r3, [pc, #16]	; (80002ac <main+0x28>)
 800029c:	2201      	movs	r2, #1
 800029e:	601a      	str	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    /* Display the updated Time */
    RTC_TimeShow(aShowTime);
 80002a0:	4b03      	ldr	r3, [pc, #12]	; (80002b0 <main+0x2c>)
 80002a2:	0018      	movs	r0, r3
 80002a4:	f000 f914 	bl	80004d0 <RTC_TimeShow>
 80002a8:	e7fa      	b.n	80002a0 <main+0x1c>
 80002aa:	46c0      	nop			; (mov r8, r8)
 80002ac:	200000d0 	.word	0x200000d0
 80002b0:	20000000 	.word	0x20000000

080002b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b4:	b590      	push	{r4, r7, lr}
 80002b6:	b093      	sub	sp, #76	; 0x4c
 80002b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ba:	2410      	movs	r4, #16
 80002bc:	193b      	adds	r3, r7, r4
 80002be:	0018      	movs	r0, r3
 80002c0:	2338      	movs	r3, #56	; 0x38
 80002c2:	001a      	movs	r2, r3
 80002c4:	2100      	movs	r1, #0
 80002c6:	f002 f9ff 	bl	80026c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ca:	003b      	movs	r3, r7
 80002cc:	0018      	movs	r0, r3
 80002ce:	2310      	movs	r3, #16
 80002d0:	001a      	movs	r2, r3
 80002d2:	2100      	movs	r1, #0
 80002d4:	f002 f9f8 	bl	80026c8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002d8:	193b      	adds	r3, r7, r4
 80002da:	2202      	movs	r2, #2
 80002dc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002de:	193b      	adds	r3, r7, r4
 80002e0:	2280      	movs	r2, #128	; 0x80
 80002e2:	0052      	lsls	r2, r2, #1
 80002e4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002e6:	0021      	movs	r1, r4
 80002e8:	187b      	adds	r3, r7, r1
 80002ea:	2200      	movs	r2, #0
 80002ec:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	2240      	movs	r2, #64	; 0x40
 80002f2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	2202      	movs	r2, #2
 80002f8:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	2202      	movs	r2, #2
 80002fe:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000300:	187b      	adds	r3, r7, r1
 8000302:	2230      	movs	r2, #48	; 0x30
 8000304:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000306:	187b      	adds	r3, r7, r1
 8000308:	2246      	movs	r2, #70	; 0x46
 800030a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV10;
 800030c:	187b      	adds	r3, r7, r1
 800030e:	2290      	movs	r2, #144	; 0x90
 8000310:	0352      	lsls	r2, r2, #13
 8000312:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV5;
 8000314:	187b      	adds	r3, r7, r1
 8000316:	2280      	movs	r2, #128	; 0x80
 8000318:	0512      	lsls	r2, r2, #20
 800031a:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV5;
 800031c:	187b      	adds	r3, r7, r1
 800031e:	2280      	movs	r2, #128	; 0x80
 8000320:	0612      	lsls	r2, r2, #24
 8000322:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000324:	187b      	adds	r3, r7, r1
 8000326:	0018      	movs	r0, r3
 8000328:	f000 fdcc 	bl	8000ec4 <HAL_RCC_OscConfig>
 800032c:	1e03      	subs	r3, r0, #0
 800032e:	d001      	beq.n	8000334 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000330:	f000 f8f8 	bl	8000524 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000334:	003b      	movs	r3, r7
 8000336:	2207      	movs	r2, #7
 8000338:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800033a:	003b      	movs	r3, r7
 800033c:	2202      	movs	r2, #2
 800033e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000340:	003b      	movs	r3, r7
 8000342:	2200      	movs	r2, #0
 8000344:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000346:	003b      	movs	r3, r7
 8000348:	2200      	movs	r2, #0
 800034a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800034c:	003b      	movs	r3, r7
 800034e:	2102      	movs	r1, #2
 8000350:	0018      	movs	r0, r3
 8000352:	f001 f8d1 	bl	80014f8 <HAL_RCC_ClockConfig>
 8000356:	1e03      	subs	r3, r0, #0
 8000358:	d001      	beq.n	800035e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800035a:	f000 f8e3 	bl	8000524 <Error_Handler>
  }
}
 800035e:	46c0      	nop			; (mov r8, r8)
 8000360:	46bd      	mov	sp, r7
 8000362:	b013      	add	sp, #76	; 0x4c
 8000364:	bd90      	pop	{r4, r7, pc}
	...

08000368 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b090      	sub	sp, #64	; 0x40
 800036c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800036e:	232c      	movs	r3, #44	; 0x2c
 8000370:	18fb      	adds	r3, r7, r3
 8000372:	0018      	movs	r0, r3
 8000374:	2314      	movs	r3, #20
 8000376:	001a      	movs	r2, r3
 8000378:	2100      	movs	r1, #0
 800037a:	f002 f9a5 	bl	80026c8 <memset>
  RTC_DateTypeDef sDate = {0};
 800037e:	2328      	movs	r3, #40	; 0x28
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000386:	003b      	movs	r3, r7
 8000388:	0018      	movs	r0, r3
 800038a:	2328      	movs	r3, #40	; 0x28
 800038c:	001a      	movs	r2, r3
 800038e:	2100      	movs	r1, #0
 8000390:	f002 f99a 	bl	80026c8 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000394:	4b45      	ldr	r3, [pc, #276]	; (80004ac <MX_RTC_Init+0x144>)
 8000396:	4a46      	ldr	r2, [pc, #280]	; (80004b0 <MX_RTC_Init+0x148>)
 8000398:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800039a:	4b44      	ldr	r3, [pc, #272]	; (80004ac <MX_RTC_Init+0x144>)
 800039c:	2200      	movs	r2, #0
 800039e:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = RTC_ASYNCH_PREDIV;
 80003a0:	4b42      	ldr	r3, [pc, #264]	; (80004ac <MX_RTC_Init+0x144>)
 80003a2:	227f      	movs	r2, #127	; 0x7f
 80003a4:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = RTC_SYNCH_PREDIV;
 80003a6:	4b41      	ldr	r3, [pc, #260]	; (80004ac <MX_RTC_Init+0x144>)
 80003a8:	22f9      	movs	r2, #249	; 0xf9
 80003aa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80003ac:	4b3f      	ldr	r3, [pc, #252]	; (80004ac <MX_RTC_Init+0x144>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80003b2:	4b3e      	ldr	r3, [pc, #248]	; (80004ac <MX_RTC_Init+0x144>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80003b8:	4b3c      	ldr	r3, [pc, #240]	; (80004ac <MX_RTC_Init+0x144>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80003be:	4b3b      	ldr	r3, [pc, #236]	; (80004ac <MX_RTC_Init+0x144>)
 80003c0:	2280      	movs	r2, #128	; 0x80
 80003c2:	05d2      	lsls	r2, r2, #23
 80003c4:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80003c6:	4b39      	ldr	r3, [pc, #228]	; (80004ac <MX_RTC_Init+0x144>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80003cc:	4b37      	ldr	r3, [pc, #220]	; (80004ac <MX_RTC_Init+0x144>)
 80003ce:	0018      	movs	r0, r3
 80003d0:	f001 fc5c 	bl	8001c8c <HAL_RTC_Init>
 80003d4:	1e03      	subs	r3, r0, #0
 80003d6:	d001      	beq.n	80003dc <MX_RTC_Init+0x74>
  {
    Error_Handler();
 80003d8:	f000 f8a4 	bl	8000524 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x2;
 80003dc:	212c      	movs	r1, #44	; 0x2c
 80003de:	187b      	adds	r3, r7, r1
 80003e0:	2202      	movs	r2, #2
 80003e2:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x20;
 80003e4:	187b      	adds	r3, r7, r1
 80003e6:	2220      	movs	r2, #32
 80003e8:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80003ea:	187b      	adds	r3, r7, r1
 80003ec:	2200      	movs	r2, #0
 80003ee:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 80003f0:	187b      	adds	r3, r7, r1
 80003f2:	2200      	movs	r2, #0
 80003f4:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80003f6:	187b      	adds	r3, r7, r1
 80003f8:	2200      	movs	r2, #0
 80003fa:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80003fc:	187b      	adds	r3, r7, r1
 80003fe:	2200      	movs	r2, #0
 8000400:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000402:	1879      	adds	r1, r7, r1
 8000404:	4b29      	ldr	r3, [pc, #164]	; (80004ac <MX_RTC_Init+0x144>)
 8000406:	2201      	movs	r2, #1
 8000408:	0018      	movs	r0, r3
 800040a:	f001 fcd5 	bl	8001db8 <HAL_RTC_SetTime>
 800040e:	1e03      	subs	r3, r0, #0
 8000410:	d001      	beq.n	8000416 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8000412:	f000 f887 	bl	8000524 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000416:	2128      	movs	r1, #40	; 0x28
 8000418:	187b      	adds	r3, r7, r1
 800041a:	2201      	movs	r2, #1
 800041c:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_FEBRUARY;
 800041e:	187b      	adds	r3, r7, r1
 8000420:	2202      	movs	r2, #2
 8000422:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x18;
 8000424:	187b      	adds	r3, r7, r1
 8000426:	2218      	movs	r2, #24
 8000428:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x14;
 800042a:	187b      	adds	r3, r7, r1
 800042c:	2214      	movs	r2, #20
 800042e:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000430:	1879      	adds	r1, r7, r1
 8000432:	4b1e      	ldr	r3, [pc, #120]	; (80004ac <MX_RTC_Init+0x144>)
 8000434:	2201      	movs	r2, #1
 8000436:	0018      	movs	r0, r3
 8000438:	f001 fdc2 	bl	8001fc0 <HAL_RTC_SetDate>
 800043c:	1e03      	subs	r3, r0, #0
 800043e:	d001      	beq.n	8000444 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8000440:	f000 f870 	bl	8000524 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x2;
 8000444:	003b      	movs	r3, r7
 8000446:	2202      	movs	r2, #2
 8000448:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x20;
 800044a:	003b      	movs	r3, r7
 800044c:	2220      	movs	r2, #32
 800044e:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x30;
 8000450:	003b      	movs	r3, r7
 8000452:	2230      	movs	r2, #48	; 0x30
 8000454:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000456:	003b      	movs	r3, r7
 8000458:	2200      	movs	r2, #0
 800045a:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800045c:	003b      	movs	r3, r7
 800045e:	2200      	movs	r2, #0
 8000460:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000462:	003b      	movs	r3, r7
 8000464:	2200      	movs	r2, #0
 8000466:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000468:	003b      	movs	r3, r7
 800046a:	2200      	movs	r2, #0
 800046c:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 800046e:	003b      	movs	r3, r7
 8000470:	22f0      	movs	r2, #240	; 0xf0
 8000472:	0512      	lsls	r2, r2, #20
 8000474:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 8000476:	003b      	movs	r3, r7
 8000478:	2280      	movs	r2, #128	; 0x80
 800047a:	05d2      	lsls	r2, r2, #23
 800047c:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = RTC_WEEKDAY_MONDAY;
 800047e:	003b      	movs	r3, r7
 8000480:	2220      	movs	r2, #32
 8000482:	2101      	movs	r1, #1
 8000484:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000486:	003b      	movs	r3, r7
 8000488:	2280      	movs	r2, #128	; 0x80
 800048a:	0052      	lsls	r2, r2, #1
 800048c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800048e:	0039      	movs	r1, r7
 8000490:	4b06      	ldr	r3, [pc, #24]	; (80004ac <MX_RTC_Init+0x144>)
 8000492:	2201      	movs	r2, #1
 8000494:	0018      	movs	r0, r3
 8000496:	f001 fe73 	bl	8002180 <HAL_RTC_SetAlarm_IT>
 800049a:	1e03      	subs	r3, r0, #0
 800049c:	d001      	beq.n	80004a2 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 800049e:	f000 f841 	bl	8000524 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	46bd      	mov	sp, r7
 80004a6:	b010      	add	sp, #64	; 0x40
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	200000a4 	.word	0x200000a4
 80004b0:	40002800 	.word	0x40002800

080004b4 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm callback
  * @param  hrtc : RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]

  /* Turn LED4 on: Alarm generation */
  BSP_LED_On(LED4);
 80004bc:	2000      	movs	r0, #0
 80004be:	f000 f981 	bl	80007c4 <BSP_LED_On>
  BSP_LED_On(LED5);
 80004c2:	2001      	movs	r0, #1
 80004c4:	f000 f97e 	bl	80007c4 <BSP_LED_On>
  //added this here
//   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);



}
 80004c8:	46c0      	nop			; (mov r8, r8)
 80004ca:	46bd      	mov	sp, r7
 80004cc:	b002      	add	sp, #8
 80004ce:	bd80      	pop	{r7, pc}

080004d0 <RTC_TimeShow>:
  * @brief  Display the current time.
  * @param  showtime : pointer to buffer
  * @retval None
  */
static void RTC_TimeShow(uint8_t *showtime)
{
 80004d0:	b590      	push	{r4, r7, lr}
 80004d2:	b08b      	sub	sp, #44	; 0x2c
 80004d4:	af02      	add	r7, sp, #8
 80004d6:	6078      	str	r0, [r7, #4]
  RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;

  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 80004d8:	2408      	movs	r4, #8
 80004da:	1939      	adds	r1, r7, r4
 80004dc:	4b0f      	ldr	r3, [pc, #60]	; (800051c <RTC_TimeShow+0x4c>)
 80004de:	2200      	movs	r2, #0
 80004e0:	0018      	movs	r0, r3
 80004e2:	f001 fd11 	bl	8001f08 <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 80004e6:	231c      	movs	r3, #28
 80004e8:	18f9      	adds	r1, r7, r3
 80004ea:	4b0c      	ldr	r3, [pc, #48]	; (800051c <RTC_TimeShow+0x4c>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	0018      	movs	r0, r3
 80004f0:	f001 fdf8 	bl	80020e4 <HAL_RTC_GetDate>
  /* Display time Format : hh:mm:ss */
  sprintf((char *)showtime, "%02d:%02d:%02d", stimestructureget.Hours, stimestructureget.Minutes, stimestructureget.Seconds);
 80004f4:	0021      	movs	r1, r4
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	001a      	movs	r2, r3
 80004fc:	187b      	adds	r3, r7, r1
 80004fe:	785b      	ldrb	r3, [r3, #1]
 8000500:	001c      	movs	r4, r3
 8000502:	187b      	adds	r3, r7, r1
 8000504:	789b      	ldrb	r3, [r3, #2]
 8000506:	4906      	ldr	r1, [pc, #24]	; (8000520 <RTC_TimeShow+0x50>)
 8000508:	6878      	ldr	r0, [r7, #4]
 800050a:	9300      	str	r3, [sp, #0]
 800050c:	0023      	movs	r3, r4
 800050e:	f002 f8e3 	bl	80026d8 <siprintf>
}
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	46bd      	mov	sp, r7
 8000516:	b009      	add	sp, #36	; 0x24
 8000518:	bd90      	pop	{r4, r7, pc}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	200000a4 	.word	0x200000a4
 8000520:	08002fc4 	.word	0x08002fc4

08000524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  RTCStatus = 0xE;
 8000528:	4b05      	ldr	r3, [pc, #20]	; (8000540 <Error_Handler+0x1c>)
 800052a:	220e      	movs	r2, #14
 800052c:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* Toggle LED4 with a period of one second */
    BSP_LED_Toggle(LED4);
 800052e:	2000      	movs	r0, #0
 8000530:	f000 f95e 	bl	80007f0 <BSP_LED_Toggle>
    HAL_Delay(1000);
 8000534:	23fa      	movs	r3, #250	; 0xfa
 8000536:	009b      	lsls	r3, r3, #2
 8000538:	0018      	movs	r0, r3
 800053a:	f000 fa01 	bl	8000940 <HAL_Delay>
    BSP_LED_Toggle(LED4);
 800053e:	e7f6      	b.n	800052e <Error_Handler+0xa>
 8000540:	200000d0 	.word	0x200000d0

08000544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800054a:	4b11      	ldr	r3, [pc, #68]	; (8000590 <HAL_MspInit+0x4c>)
 800054c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800054e:	4b10      	ldr	r3, [pc, #64]	; (8000590 <HAL_MspInit+0x4c>)
 8000550:	2101      	movs	r1, #1
 8000552:	430a      	orrs	r2, r1
 8000554:	641a      	str	r2, [r3, #64]	; 0x40
 8000556:	4b0e      	ldr	r3, [pc, #56]	; (8000590 <HAL_MspInit+0x4c>)
 8000558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055a:	2201      	movs	r2, #1
 800055c:	4013      	ands	r3, r2
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000562:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <HAL_MspInit+0x4c>)
 8000564:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000566:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <HAL_MspInit+0x4c>)
 8000568:	2180      	movs	r1, #128	; 0x80
 800056a:	0549      	lsls	r1, r1, #21
 800056c:	430a      	orrs	r2, r1
 800056e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000570:	4b07      	ldr	r3, [pc, #28]	; (8000590 <HAL_MspInit+0x4c>)
 8000572:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000574:	2380      	movs	r3, #128	; 0x80
 8000576:	055b      	lsls	r3, r3, #21
 8000578:	4013      	ands	r3, r2
 800057a:	603b      	str	r3, [r7, #0]
 800057c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800057e:	23c0      	movs	r3, #192	; 0xc0
 8000580:	00db      	lsls	r3, r3, #3
 8000582:	0018      	movs	r0, r3
 8000584:	f000 fa00 	bl	8000988 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000588:	46c0      	nop			; (mov r8, r8)
 800058a:	46bd      	mov	sp, r7
 800058c:	b002      	add	sp, #8
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40021000 	.word	0x40021000

08000594 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000594:	b590      	push	{r4, r7, lr}
 8000596:	b0a1      	sub	sp, #132	; 0x84
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a41      	ldr	r2, [pc, #260]	; (80006a8 <HAL_RTC_MspInit+0x114>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d000      	beq.n	80005a8 <HAL_RTC_MspInit+0x14>
 80005a6:	e07b      	b.n	80006a0 <HAL_RTC_MspInit+0x10c>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
    RCC_OscInitTypeDef        RCC_OscInitStruct = {0};
 80005a8:	2340      	movs	r3, #64	; 0x40
 80005aa:	18fb      	adds	r3, r7, r3
 80005ac:	0018      	movs	r0, r3
 80005ae:	2338      	movs	r3, #56	; 0x38
 80005b0:	001a      	movs	r2, r3
 80005b2:	2100      	movs	r1, #0
 80005b4:	f002 f888 	bl	80026c8 <memset>
    RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct = {0};
 80005b8:	240c      	movs	r4, #12
 80005ba:	193b      	adds	r3, r7, r4
 80005bc:	0018      	movs	r0, r3
 80005be:	2334      	movs	r3, #52	; 0x34
 80005c0:	001a      	movs	r2, r3
 80005c2:	2100      	movs	r1, #0
 80005c4:	f002 f880 	bl	80026c8 <memset>

    /* Enables the PWR Clock and Enables access to the backup domain */
    /* To enable access on RTC registers */
    __HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	4b38      	ldr	r3, [pc, #224]	; (80006ac <HAL_RTC_MspInit+0x118>)
 80005ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005cc:	4b37      	ldr	r3, [pc, #220]	; (80006ac <HAL_RTC_MspInit+0x118>)
 80005ce:	2180      	movs	r1, #128	; 0x80
 80005d0:	0549      	lsls	r1, r1, #21
 80005d2:	430a      	orrs	r2, r1
 80005d4:	63da      	str	r2, [r3, #60]	; 0x3c
 80005d6:	4b35      	ldr	r3, [pc, #212]	; (80006ac <HAL_RTC_MspInit+0x118>)
 80005d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005da:	2380      	movs	r3, #128	; 0x80
 80005dc:	055b      	lsls	r3, r3, #21
 80005de:	4013      	ands	r3, r2
 80005e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80005e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    HAL_PWR_EnableBkUpAccess();
 80005e4:	f000 fc60 	bl	8000ea8 <HAL_PWR_EnableBkUpAccess>

    /* Get RTC clock configuration */
    HAL_RCCEx_GetPeriphCLKConfig(&PeriphClkInitStruct);
 80005e8:	193b      	adds	r3, r7, r4
 80005ea:	0018      	movs	r0, r3
 80005ec:	f001 fac6 	bl	8001b7c <HAL_RCCEx_GetPeriphCLKConfig>

    /*In case of RTC clock already enable, make sure it's the good one */
    if (PeriphClkInitStruct.RTCClockSelection == RtcClockSource)
 80005f0:	193b      	adds	r3, r7, r4
 80005f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005f4:	4b2e      	ldr	r3, [pc, #184]	; (80006b0 <HAL_RTC_MspInit+0x11c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d034      	beq.n	8000666 <HAL_RTC_MspInit+0xd2>
    {
      /* Do nothing */
    }
    else
    {
      PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80005fc:	193b      	adds	r3, r7, r4
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	0292      	lsls	r2, r2, #10
 8000602:	601a      	str	r2, [r3, #0]

      /* If selected source was previously the opposite source clock, first select none*/
      if (PeriphClkInitStruct.RTCClockSelection != RCC_RTCCLKSOURCE_NONE)
 8000604:	193b      	adds	r3, r7, r4
 8000606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000608:	2b00      	cmp	r3, #0
 800060a:	d00a      	beq.n	8000622 <HAL_RTC_MspInit+0x8e>
      {
        PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_NONE;
 800060c:	193b      	adds	r3, r7, r4
 800060e:	2200      	movs	r2, #0
 8000610:	631a      	str	r2, [r3, #48]	; 0x30
        if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000612:	193b      	adds	r3, r7, r4
 8000614:	0018      	movs	r0, r3
 8000616:	f001 f8f9 	bl	800180c <HAL_RCCEx_PeriphCLKConfig>
 800061a:	1e03      	subs	r3, r0, #0
 800061c:	d001      	beq.n	8000622 <HAL_RTC_MspInit+0x8e>
        {
          Error_Handler();
 800061e:	f7ff ff81 	bl	8000524 <Error_Handler>
      RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_LSE;
      RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
      RCC_OscInitStruct.LSEState = RCC_LSE_ON;
      RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
#elif defined (RTC_CLOCK_SOURCE_LSI)
      RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_LSE;
 8000622:	2140      	movs	r1, #64	; 0x40
 8000624:	187b      	adds	r3, r7, r1
 8000626:	220c      	movs	r2, #12
 8000628:	601a      	str	r2, [r3, #0]
      RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800062a:	187b      	adds	r3, r7, r1
 800062c:	2200      	movs	r2, #0
 800062e:	61da      	str	r2, [r3, #28]
      RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000630:	187b      	adds	r3, r7, r1
 8000632:	2201      	movs	r2, #1
 8000634:	619a      	str	r2, [r3, #24]
      RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8000636:	187b      	adds	r3, r7, r1
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
#else
#error Please select the RTC Clock source inside the main.h file
#endif /*RTC_CLOCK_SOURCE_LSE*/

      if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	187b      	adds	r3, r7, r1
 800063e:	0018      	movs	r0, r3
 8000640:	f000 fc40 	bl	8000ec4 <HAL_RCC_OscConfig>
 8000644:	1e03      	subs	r3, r0, #0
 8000646:	d001      	beq.n	800064c <HAL_RTC_MspInit+0xb8>
      {
        Error_Handler();
 8000648:	f7ff ff6c 	bl	8000524 <Error_Handler>
      }

      PeriphClkInitStruct.RTCClockSelection = RtcClockSource;
 800064c:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <HAL_RTC_MspInit+0x11c>)
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	210c      	movs	r1, #12
 8000652:	187b      	adds	r3, r7, r1
 8000654:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000656:	187b      	adds	r3, r7, r1
 8000658:	0018      	movs	r0, r3
 800065a:	f001 f8d7 	bl	800180c <HAL_RCCEx_PeriphCLKConfig>
 800065e:	1e03      	subs	r3, r0, #0
 8000660:	d001      	beq.n	8000666 <HAL_RTC_MspInit+0xd2>
      {
        Error_Handler();
 8000662:	f7ff ff5f 	bl	8000524 <Error_Handler>
      }
    }

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000666:	4b11      	ldr	r3, [pc, #68]	; (80006ac <HAL_RTC_MspInit+0x118>)
 8000668:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <HAL_RTC_MspInit+0x118>)
 800066c:	2180      	movs	r1, #128	; 0x80
 800066e:	0209      	lsls	r1, r1, #8
 8000670:	430a      	orrs	r2, r1
 8000672:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000674:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <HAL_RTC_MspInit+0x118>)
 8000676:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000678:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <HAL_RTC_MspInit+0x118>)
 800067a:	2180      	movs	r1, #128	; 0x80
 800067c:	00c9      	lsls	r1, r1, #3
 800067e:	430a      	orrs	r2, r1
 8000680:	63da      	str	r2, [r3, #60]	; 0x3c
 8000682:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <HAL_RTC_MspInit+0x118>)
 8000684:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000686:	2380      	movs	r3, #128	; 0x80
 8000688:	00db      	lsls	r3, r3, #3
 800068a:	4013      	ands	r3, r2
 800068c:	67bb      	str	r3, [r7, #120]	; 0x78
 800068e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8000690:	2200      	movs	r2, #0
 8000692:	2100      	movs	r1, #0
 8000694:	2002      	movs	r0, #2
 8000696:	f000 fa39 	bl	8000b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 800069a:	2002      	movs	r0, #2
 800069c:	f000 fa4b 	bl	8000b36 <HAL_NVIC_EnableIRQ>


  /* USER CODE END RTC_MspInit 1 */
  }

}
 80006a0:	46c0      	nop			; (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	b021      	add	sp, #132	; 0x84
 80006a6:	bd90      	pop	{r4, r7, pc}
 80006a8:	40002800 	.word	0x40002800
 80006ac:	40021000 	.word	0x40021000
 80006b0:	20000010 	.word	0x20000010

080006b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006b8:	46c0      	nop			; (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006c2:	e7fe      	b.n	80006c2 <HardFault_Handler+0x4>

080006c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006c8:	f000 f91e 	bl	8000908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006cc:	46c0      	nop			; (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
	...

080006d4 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80006d8:	4b03      	ldr	r3, [pc, #12]	; (80006e8 <RTC_TAMP_IRQHandler+0x14>)
 80006da:	0018      	movs	r0, r3
 80006dc:	f001 fe90 	bl	8002400 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80006e0:	46c0      	nop			; (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	200000a4 	.word	0x200000a4

080006ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006f4:	4a14      	ldr	r2, [pc, #80]	; (8000748 <_sbrk+0x5c>)
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <_sbrk+0x60>)
 80006f8:	1ad3      	subs	r3, r2, r3
 80006fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000700:	4b13      	ldr	r3, [pc, #76]	; (8000750 <_sbrk+0x64>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d102      	bne.n	800070e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000708:	4b11      	ldr	r3, [pc, #68]	; (8000750 <_sbrk+0x64>)
 800070a:	4a12      	ldr	r2, [pc, #72]	; (8000754 <_sbrk+0x68>)
 800070c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800070e:	4b10      	ldr	r3, [pc, #64]	; (8000750 <_sbrk+0x64>)
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	18d3      	adds	r3, r2, r3
 8000716:	693a      	ldr	r2, [r7, #16]
 8000718:	429a      	cmp	r2, r3
 800071a:	d207      	bcs.n	800072c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800071c:	f001 ffaa 	bl	8002674 <__errno>
 8000720:	0003      	movs	r3, r0
 8000722:	220c      	movs	r2, #12
 8000724:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000726:	2301      	movs	r3, #1
 8000728:	425b      	negs	r3, r3
 800072a:	e009      	b.n	8000740 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800072c:	4b08      	ldr	r3, [pc, #32]	; (8000750 <_sbrk+0x64>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000732:	4b07      	ldr	r3, [pc, #28]	; (8000750 <_sbrk+0x64>)
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	18d2      	adds	r2, r2, r3
 800073a:	4b05      	ldr	r3, [pc, #20]	; (8000750 <_sbrk+0x64>)
 800073c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800073e:	68fb      	ldr	r3, [r7, #12]
}
 8000740:	0018      	movs	r0, r3
 8000742:	46bd      	mov	sp, r7
 8000744:	b006      	add	sp, #24
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20009000 	.word	0x20009000
 800074c:	00000400 	.word	0x00000400
 8000750:	200000d4 	.word	0x200000d4
 8000754:	200000f0 	.word	0x200000f0

08000758 <BSP_LED_Init>:
  *         This parameter can be one of the following values:
  * @arg LED4
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af00      	add	r7, sp, #0
 800075e:	0002      	movs	r2, r0
 8000760:	1dfb      	adds	r3, r7, #7
 8000762:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef  gpioinitstruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000764:	1dfb      	adds	r3, r7, #7
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d10b      	bne.n	8000784 <BSP_LED_Init+0x2c>
 800076c:	4b13      	ldr	r3, [pc, #76]	; (80007bc <BSP_LED_Init+0x64>)
 800076e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <BSP_LED_Init+0x64>)
 8000772:	2101      	movs	r1, #1
 8000774:	430a      	orrs	r2, r1
 8000776:	635a      	str	r2, [r3, #52]	; 0x34
 8000778:	4b10      	ldr	r3, [pc, #64]	; (80007bc <BSP_LED_Init+0x64>)
 800077a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800077c:	2201      	movs	r2, #1
 800077e:	4013      	ands	r3, r2
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = LED_PIN[Led];
 8000784:	2320      	movs	r3, #32
 8000786:	001a      	movs	r2, r3
 8000788:	210c      	movs	r1, #12
 800078a:	187b      	adds	r3, r7, r1
 800078c:	601a      	str	r2, [r3, #0]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078e:	187b      	adds	r3, r7, r1
 8000790:	2201      	movs	r2, #1
 8000792:	605a      	str	r2, [r3, #4]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8000794:	187b      	adds	r3, r7, r1
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800079a:	187b      	adds	r3, r7, r1
 800079c:	2203      	movs	r2, #3
 800079e:	60da      	str	r2, [r3, #12]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpioinitstruct);
 80007a0:	1dfb      	adds	r3, r7, #7
 80007a2:	781a      	ldrb	r2, [r3, #0]
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <BSP_LED_Init+0x68>)
 80007a6:	0092      	lsls	r2, r2, #2
 80007a8:	58d3      	ldr	r3, [r2, r3]
 80007aa:	187a      	adds	r2, r7, r1
 80007ac:	0011      	movs	r1, r2
 80007ae:	0018      	movs	r0, r3
 80007b0:	f000 f9de 	bl	8000b70 <HAL_GPIO_Init>
}
 80007b4:	46c0      	nop			; (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	b008      	add	sp, #32
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40021000 	.word	0x40021000
 80007c0:	20000014 	.word	0x20000014

080007c4 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED4
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	0002      	movs	r2, r0
 80007cc:	1dfb      	adds	r3, r7, #7
 80007ce:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 80007d0:	1dfb      	adds	r3, r7, #7
 80007d2:	781a      	ldrb	r2, [r3, #0]
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <BSP_LED_On+0x28>)
 80007d6:	0092      	lsls	r2, r2, #2
 80007d8:	58d3      	ldr	r3, [r2, r3]
 80007da:	2120      	movs	r1, #32
 80007dc:	2201      	movs	r2, #1
 80007de:	0018      	movs	r0, r3
 80007e0:	f000 fb2a 	bl	8000e38 <HAL_GPIO_WritePin>
}
 80007e4:	46c0      	nop			; (mov r8, r8)
 80007e6:	46bd      	mov	sp, r7
 80007e8:	b002      	add	sp, #8
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000014 	.word	0x20000014

080007f0 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *     @arg LED4
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	0002      	movs	r2, r0
 80007f8:	1dfb      	adds	r3, r7, #7
 80007fa:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80007fc:	1dfb      	adds	r3, r7, #7
 80007fe:	781a      	ldrb	r2, [r3, #0]
 8000800:	4b05      	ldr	r3, [pc, #20]	; (8000818 <BSP_LED_Toggle+0x28>)
 8000802:	0092      	lsls	r2, r2, #2
 8000804:	58d3      	ldr	r3, [r2, r3]
 8000806:	2220      	movs	r2, #32
 8000808:	0011      	movs	r1, r2
 800080a:	0018      	movs	r0, r3
 800080c:	f000 fb31 	bl	8000e72 <HAL_GPIO_TogglePin>
}
 8000810:	46c0      	nop			; (mov r8, r8)
 8000812:	46bd      	mov	sp, r7
 8000814:	b002      	add	sp, #8
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000014 	.word	0x20000014

0800081c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000820:	4b03      	ldr	r3, [pc, #12]	; (8000830 <SystemInit+0x14>)
 8000822:	2280      	movs	r2, #128	; 0x80
 8000824:	0512      	lsls	r2, r2, #20
 8000826:	609a      	str	r2, [r3, #8]
#endif
}
 8000828:	46c0      	nop			; (mov r8, r8)
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800083a:	1dfb      	adds	r3, r7, #7
 800083c:	2200      	movs	r2, #0
 800083e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000840:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <HAL_Init+0x3c>)
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <HAL_Init+0x3c>)
 8000846:	2180      	movs	r1, #128	; 0x80
 8000848:	0049      	lsls	r1, r1, #1
 800084a:	430a      	orrs	r2, r1
 800084c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800084e:	2000      	movs	r0, #0
 8000850:	f000 f810 	bl	8000874 <HAL_InitTick>
 8000854:	1e03      	subs	r3, r0, #0
 8000856:	d003      	beq.n	8000860 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000858:	1dfb      	adds	r3, r7, #7
 800085a:	2201      	movs	r2, #1
 800085c:	701a      	strb	r2, [r3, #0]
 800085e:	e001      	b.n	8000864 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000860:	f7ff fe70 	bl	8000544 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000864:	1dfb      	adds	r3, r7, #7
 8000866:	781b      	ldrb	r3, [r3, #0]
}
 8000868:	0018      	movs	r0, r3
 800086a:	46bd      	mov	sp, r7
 800086c:	b002      	add	sp, #8
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40022000 	.word	0x40022000

08000874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000874:	b590      	push	{r4, r7, lr}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800087c:	230f      	movs	r3, #15
 800087e:	18fb      	adds	r3, r7, r3
 8000880:	2200      	movs	r2, #0
 8000882:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000884:	4b1d      	ldr	r3, [pc, #116]	; (80008fc <HAL_InitTick+0x88>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d02b      	beq.n	80008e4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800088c:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <HAL_InitTick+0x8c>)
 800088e:	681c      	ldr	r4, [r3, #0]
 8000890:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <HAL_InitTick+0x88>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	0019      	movs	r1, r3
 8000896:	23fa      	movs	r3, #250	; 0xfa
 8000898:	0098      	lsls	r0, r3, #2
 800089a:	f7ff fc3d 	bl	8000118 <__udivsi3>
 800089e:	0003      	movs	r3, r0
 80008a0:	0019      	movs	r1, r3
 80008a2:	0020      	movs	r0, r4
 80008a4:	f7ff fc38 	bl	8000118 <__udivsi3>
 80008a8:	0003      	movs	r3, r0
 80008aa:	0018      	movs	r0, r3
 80008ac:	f000 f953 	bl	8000b56 <HAL_SYSTICK_Config>
 80008b0:	1e03      	subs	r3, r0, #0
 80008b2:	d112      	bne.n	80008da <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2b03      	cmp	r3, #3
 80008b8:	d80a      	bhi.n	80008d0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ba:	6879      	ldr	r1, [r7, #4]
 80008bc:	2301      	movs	r3, #1
 80008be:	425b      	negs	r3, r3
 80008c0:	2200      	movs	r2, #0
 80008c2:	0018      	movs	r0, r3
 80008c4:	f000 f922 	bl	8000b0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008c8:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <HAL_InitTick+0x90>)
 80008ca:	687a      	ldr	r2, [r7, #4]
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	e00d      	b.n	80008ec <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80008d0:	230f      	movs	r3, #15
 80008d2:	18fb      	adds	r3, r7, r3
 80008d4:	2201      	movs	r2, #1
 80008d6:	701a      	strb	r2, [r3, #0]
 80008d8:	e008      	b.n	80008ec <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008da:	230f      	movs	r3, #15
 80008dc:	18fb      	adds	r3, r7, r3
 80008de:	2201      	movs	r2, #1
 80008e0:	701a      	strb	r2, [r3, #0]
 80008e2:	e003      	b.n	80008ec <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008e4:	230f      	movs	r3, #15
 80008e6:	18fb      	adds	r3, r7, r3
 80008e8:	2201      	movs	r2, #1
 80008ea:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80008ec:	230f      	movs	r3, #15
 80008ee:	18fb      	adds	r3, r7, r3
 80008f0:	781b      	ldrb	r3, [r3, #0]
}
 80008f2:	0018      	movs	r0, r3
 80008f4:	46bd      	mov	sp, r7
 80008f6:	b005      	add	sp, #20
 80008f8:	bd90      	pop	{r4, r7, pc}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	20000020 	.word	0x20000020
 8000900:	20000018 	.word	0x20000018
 8000904:	2000001c 	.word	0x2000001c

08000908 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800090c:	4b05      	ldr	r3, [pc, #20]	; (8000924 <HAL_IncTick+0x1c>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	001a      	movs	r2, r3
 8000912:	4b05      	ldr	r3, [pc, #20]	; (8000928 <HAL_IncTick+0x20>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	18d2      	adds	r2, r2, r3
 8000918:	4b03      	ldr	r3, [pc, #12]	; (8000928 <HAL_IncTick+0x20>)
 800091a:	601a      	str	r2, [r3, #0]
}
 800091c:	46c0      	nop			; (mov r8, r8)
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	20000020 	.word	0x20000020
 8000928:	200000d8 	.word	0x200000d8

0800092c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  return uwTick;
 8000930:	4b02      	ldr	r3, [pc, #8]	; (800093c <HAL_GetTick+0x10>)
 8000932:	681b      	ldr	r3, [r3, #0]
}
 8000934:	0018      	movs	r0, r3
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	200000d8 	.word	0x200000d8

08000940 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000948:	f7ff fff0 	bl	800092c <HAL_GetTick>
 800094c:	0003      	movs	r3, r0
 800094e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	3301      	adds	r3, #1
 8000958:	d005      	beq.n	8000966 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800095a:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <HAL_Delay+0x44>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	001a      	movs	r2, r3
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	189b      	adds	r3, r3, r2
 8000964:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	f7ff ffe0 	bl	800092c <HAL_GetTick>
 800096c:	0002      	movs	r2, r0
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	68fa      	ldr	r2, [r7, #12]
 8000974:	429a      	cmp	r2, r3
 8000976:	d8f7      	bhi.n	8000968 <HAL_Delay+0x28>
  {
  }
}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	46bd      	mov	sp, r7
 800097e:	b004      	add	sp, #16
 8000980:	bd80      	pop	{r7, pc}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	20000020 	.word	0x20000020

08000988 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a06      	ldr	r2, [pc, #24]	; (80009b0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000996:	4013      	ands	r3, r2
 8000998:	0019      	movs	r1, r3
 800099a:	4b04      	ldr	r3, [pc, #16]	; (80009ac <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	430a      	orrs	r2, r1
 80009a0:	601a      	str	r2, [r3, #0]
}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	46bd      	mov	sp, r7
 80009a6:	b002      	add	sp, #8
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	40010000 	.word	0x40010000
 80009b0:	fffff9ff 	.word	0xfffff9ff

080009b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	0002      	movs	r2, r0
 80009bc:	1dfb      	adds	r3, r7, #7
 80009be:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009c0:	1dfb      	adds	r3, r7, #7
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b7f      	cmp	r3, #127	; 0x7f
 80009c6:	d809      	bhi.n	80009dc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009c8:	1dfb      	adds	r3, r7, #7
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	001a      	movs	r2, r3
 80009ce:	231f      	movs	r3, #31
 80009d0:	401a      	ands	r2, r3
 80009d2:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <__NVIC_EnableIRQ+0x30>)
 80009d4:	2101      	movs	r1, #1
 80009d6:	4091      	lsls	r1, r2
 80009d8:	000a      	movs	r2, r1
 80009da:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80009dc:	46c0      	nop			; (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	b002      	add	sp, #8
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	e000e100 	.word	0xe000e100

080009e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e8:	b590      	push	{r4, r7, lr}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	0002      	movs	r2, r0
 80009f0:	6039      	str	r1, [r7, #0]
 80009f2:	1dfb      	adds	r3, r7, #7
 80009f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009f6:	1dfb      	adds	r3, r7, #7
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b7f      	cmp	r3, #127	; 0x7f
 80009fc:	d828      	bhi.n	8000a50 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009fe:	4a2f      	ldr	r2, [pc, #188]	; (8000abc <__NVIC_SetPriority+0xd4>)
 8000a00:	1dfb      	adds	r3, r7, #7
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	b25b      	sxtb	r3, r3
 8000a06:	089b      	lsrs	r3, r3, #2
 8000a08:	33c0      	adds	r3, #192	; 0xc0
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	589b      	ldr	r3, [r3, r2]
 8000a0e:	1dfa      	adds	r2, r7, #7
 8000a10:	7812      	ldrb	r2, [r2, #0]
 8000a12:	0011      	movs	r1, r2
 8000a14:	2203      	movs	r2, #3
 8000a16:	400a      	ands	r2, r1
 8000a18:	00d2      	lsls	r2, r2, #3
 8000a1a:	21ff      	movs	r1, #255	; 0xff
 8000a1c:	4091      	lsls	r1, r2
 8000a1e:	000a      	movs	r2, r1
 8000a20:	43d2      	mvns	r2, r2
 8000a22:	401a      	ands	r2, r3
 8000a24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	019b      	lsls	r3, r3, #6
 8000a2a:	22ff      	movs	r2, #255	; 0xff
 8000a2c:	401a      	ands	r2, r3
 8000a2e:	1dfb      	adds	r3, r7, #7
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	0018      	movs	r0, r3
 8000a34:	2303      	movs	r3, #3
 8000a36:	4003      	ands	r3, r0
 8000a38:	00db      	lsls	r3, r3, #3
 8000a3a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a3c:	481f      	ldr	r0, [pc, #124]	; (8000abc <__NVIC_SetPriority+0xd4>)
 8000a3e:	1dfb      	adds	r3, r7, #7
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	b25b      	sxtb	r3, r3
 8000a44:	089b      	lsrs	r3, r3, #2
 8000a46:	430a      	orrs	r2, r1
 8000a48:	33c0      	adds	r3, #192	; 0xc0
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a4e:	e031      	b.n	8000ab4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a50:	4a1b      	ldr	r2, [pc, #108]	; (8000ac0 <__NVIC_SetPriority+0xd8>)
 8000a52:	1dfb      	adds	r3, r7, #7
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	0019      	movs	r1, r3
 8000a58:	230f      	movs	r3, #15
 8000a5a:	400b      	ands	r3, r1
 8000a5c:	3b08      	subs	r3, #8
 8000a5e:	089b      	lsrs	r3, r3, #2
 8000a60:	3306      	adds	r3, #6
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	18d3      	adds	r3, r2, r3
 8000a66:	3304      	adds	r3, #4
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	1dfa      	adds	r2, r7, #7
 8000a6c:	7812      	ldrb	r2, [r2, #0]
 8000a6e:	0011      	movs	r1, r2
 8000a70:	2203      	movs	r2, #3
 8000a72:	400a      	ands	r2, r1
 8000a74:	00d2      	lsls	r2, r2, #3
 8000a76:	21ff      	movs	r1, #255	; 0xff
 8000a78:	4091      	lsls	r1, r2
 8000a7a:	000a      	movs	r2, r1
 8000a7c:	43d2      	mvns	r2, r2
 8000a7e:	401a      	ands	r2, r3
 8000a80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	019b      	lsls	r3, r3, #6
 8000a86:	22ff      	movs	r2, #255	; 0xff
 8000a88:	401a      	ands	r2, r3
 8000a8a:	1dfb      	adds	r3, r7, #7
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	0018      	movs	r0, r3
 8000a90:	2303      	movs	r3, #3
 8000a92:	4003      	ands	r3, r0
 8000a94:	00db      	lsls	r3, r3, #3
 8000a96:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a98:	4809      	ldr	r0, [pc, #36]	; (8000ac0 <__NVIC_SetPriority+0xd8>)
 8000a9a:	1dfb      	adds	r3, r7, #7
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	001c      	movs	r4, r3
 8000aa0:	230f      	movs	r3, #15
 8000aa2:	4023      	ands	r3, r4
 8000aa4:	3b08      	subs	r3, #8
 8000aa6:	089b      	lsrs	r3, r3, #2
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	3306      	adds	r3, #6
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	18c3      	adds	r3, r0, r3
 8000ab0:	3304      	adds	r3, #4
 8000ab2:	601a      	str	r2, [r3, #0]
}
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b003      	add	sp, #12
 8000aba:	bd90      	pop	{r4, r7, pc}
 8000abc:	e000e100 	.word	0xe000e100
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	1e5a      	subs	r2, r3, #1
 8000ad0:	2380      	movs	r3, #128	; 0x80
 8000ad2:	045b      	lsls	r3, r3, #17
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d301      	bcc.n	8000adc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ad8:	2301      	movs	r3, #1
 8000ada:	e010      	b.n	8000afe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000adc:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <SysTick_Config+0x44>)
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	3a01      	subs	r2, #1
 8000ae2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	425b      	negs	r3, r3
 8000ae8:	2103      	movs	r1, #3
 8000aea:	0018      	movs	r0, r3
 8000aec:	f7ff ff7c 	bl	80009e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <SysTick_Config+0x44>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000af6:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <SysTick_Config+0x44>)
 8000af8:	2207      	movs	r2, #7
 8000afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	0018      	movs	r0, r3
 8000b00:	46bd      	mov	sp, r7
 8000b02:	b002      	add	sp, #8
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	e000e010 	.word	0xe000e010

08000b0c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60b9      	str	r1, [r7, #8]
 8000b14:	607a      	str	r2, [r7, #4]
 8000b16:	210f      	movs	r1, #15
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	1c02      	adds	r2, r0, #0
 8000b1c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000b1e:	68ba      	ldr	r2, [r7, #8]
 8000b20:	187b      	adds	r3, r7, r1
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	b25b      	sxtb	r3, r3
 8000b26:	0011      	movs	r1, r2
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f7ff ff5d 	bl	80009e8 <__NVIC_SetPriority>
}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	46bd      	mov	sp, r7
 8000b32:	b004      	add	sp, #16
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b082      	sub	sp, #8
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	0002      	movs	r2, r0
 8000b3e:	1dfb      	adds	r3, r7, #7
 8000b40:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b42:	1dfb      	adds	r3, r7, #7
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	b25b      	sxtb	r3, r3
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f7ff ff33 	bl	80009b4 <__NVIC_EnableIRQ>
}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	46bd      	mov	sp, r7
 8000b52:	b002      	add	sp, #8
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	0018      	movs	r0, r3
 8000b62:	f7ff ffaf 	bl	8000ac4 <SysTick_Config>
 8000b66:	0003      	movs	r3, r0
}
 8000b68:	0018      	movs	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	b002      	add	sp, #8
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b7e:	e147      	b.n	8000e10 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2101      	movs	r1, #1
 8000b86:	697a      	ldr	r2, [r7, #20]
 8000b88:	4091      	lsls	r1, r2
 8000b8a:	000a      	movs	r2, r1
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d100      	bne.n	8000b98 <HAL_GPIO_Init+0x28>
 8000b96:	e138      	b.n	8000e0a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	2203      	movs	r2, #3
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d005      	beq.n	8000bb0 <HAL_GPIO_Init+0x40>
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	2203      	movs	r2, #3
 8000baa:	4013      	ands	r3, r2
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d130      	bne.n	8000c12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	2203      	movs	r2, #3
 8000bbc:	409a      	lsls	r2, r3
 8000bbe:	0013      	movs	r3, r2
 8000bc0:	43da      	mvns	r2, r3
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	68da      	ldr	r2, [r3, #12]
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	409a      	lsls	r2, r3
 8000bd2:	0013      	movs	r3, r2
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000be6:	2201      	movs	r2, #1
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	409a      	lsls	r2, r3
 8000bec:	0013      	movs	r3, r2
 8000bee:	43da      	mvns	r2, r3
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	091b      	lsrs	r3, r3, #4
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	401a      	ands	r2, r3
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	409a      	lsls	r2, r3
 8000c04:	0013      	movs	r3, r2
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	2203      	movs	r2, #3
 8000c18:	4013      	ands	r3, r2
 8000c1a:	2b03      	cmp	r3, #3
 8000c1c:	d017      	beq.n	8000c4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	68db      	ldr	r3, [r3, #12]
 8000c22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	2203      	movs	r2, #3
 8000c2a:	409a      	lsls	r2, r3
 8000c2c:	0013      	movs	r3, r2
 8000c2e:	43da      	mvns	r2, r3
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	4013      	ands	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	689a      	ldr	r2, [r3, #8]
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	409a      	lsls	r2, r3
 8000c40:	0013      	movs	r3, r2
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	2203      	movs	r2, #3
 8000c54:	4013      	ands	r3, r2
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	d123      	bne.n	8000ca2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	08da      	lsrs	r2, r3, #3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	3208      	adds	r2, #8
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	58d3      	ldr	r3, [r2, r3]
 8000c66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	2207      	movs	r2, #7
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	220f      	movs	r2, #15
 8000c72:	409a      	lsls	r2, r3
 8000c74:	0013      	movs	r3, r2
 8000c76:	43da      	mvns	r2, r3
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	691a      	ldr	r2, [r3, #16]
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	2107      	movs	r1, #7
 8000c86:	400b      	ands	r3, r1
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	409a      	lsls	r2, r3
 8000c8c:	0013      	movs	r3, r2
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	08da      	lsrs	r2, r3, #3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3208      	adds	r2, #8
 8000c9c:	0092      	lsls	r2, r2, #2
 8000c9e:	6939      	ldr	r1, [r7, #16]
 8000ca0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	2203      	movs	r2, #3
 8000cae:	409a      	lsls	r2, r3
 8000cb0:	0013      	movs	r3, r2
 8000cb2:	43da      	mvns	r2, r3
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	2203      	movs	r2, #3
 8000cc0:	401a      	ands	r2, r3
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	409a      	lsls	r2, r3
 8000cc8:	0013      	movs	r3, r2
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685a      	ldr	r2, [r3, #4]
 8000cda:	23c0      	movs	r3, #192	; 0xc0
 8000cdc:	029b      	lsls	r3, r3, #10
 8000cde:	4013      	ands	r3, r2
 8000ce0:	d100      	bne.n	8000ce4 <HAL_GPIO_Init+0x174>
 8000ce2:	e092      	b.n	8000e0a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000ce4:	4a50      	ldr	r2, [pc, #320]	; (8000e28 <HAL_GPIO_Init+0x2b8>)
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	089b      	lsrs	r3, r3, #2
 8000cea:	3318      	adds	r3, #24
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	589b      	ldr	r3, [r3, r2]
 8000cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	220f      	movs	r2, #15
 8000cfc:	409a      	lsls	r2, r3
 8000cfe:	0013      	movs	r3, r2
 8000d00:	43da      	mvns	r2, r3
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	4013      	ands	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	23a0      	movs	r3, #160	; 0xa0
 8000d0c:	05db      	lsls	r3, r3, #23
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d013      	beq.n	8000d3a <HAL_GPIO_Init+0x1ca>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a45      	ldr	r2, [pc, #276]	; (8000e2c <HAL_GPIO_Init+0x2bc>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d00d      	beq.n	8000d36 <HAL_GPIO_Init+0x1c6>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a44      	ldr	r2, [pc, #272]	; (8000e30 <HAL_GPIO_Init+0x2c0>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d007      	beq.n	8000d32 <HAL_GPIO_Init+0x1c2>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a43      	ldr	r2, [pc, #268]	; (8000e34 <HAL_GPIO_Init+0x2c4>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d101      	bne.n	8000d2e <HAL_GPIO_Init+0x1be>
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	e006      	b.n	8000d3c <HAL_GPIO_Init+0x1cc>
 8000d2e:	2305      	movs	r3, #5
 8000d30:	e004      	b.n	8000d3c <HAL_GPIO_Init+0x1cc>
 8000d32:	2302      	movs	r3, #2
 8000d34:	e002      	b.n	8000d3c <HAL_GPIO_Init+0x1cc>
 8000d36:	2301      	movs	r3, #1
 8000d38:	e000      	b.n	8000d3c <HAL_GPIO_Init+0x1cc>
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	697a      	ldr	r2, [r7, #20]
 8000d3e:	2103      	movs	r1, #3
 8000d40:	400a      	ands	r2, r1
 8000d42:	00d2      	lsls	r2, r2, #3
 8000d44:	4093      	lsls	r3, r2
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000d4c:	4936      	ldr	r1, [pc, #216]	; (8000e28 <HAL_GPIO_Init+0x2b8>)
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	089b      	lsrs	r3, r3, #2
 8000d52:	3318      	adds	r3, #24
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d5a:	4b33      	ldr	r3, [pc, #204]	; (8000e28 <HAL_GPIO_Init+0x2b8>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	43da      	mvns	r2, r3
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	4013      	ands	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685a      	ldr	r2, [r3, #4]
 8000d6e:	2380      	movs	r3, #128	; 0x80
 8000d70:	035b      	lsls	r3, r3, #13
 8000d72:	4013      	ands	r3, r2
 8000d74:	d003      	beq.n	8000d7e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d7e:	4b2a      	ldr	r3, [pc, #168]	; (8000e28 <HAL_GPIO_Init+0x2b8>)
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000d84:	4b28      	ldr	r3, [pc, #160]	; (8000e28 <HAL_GPIO_Init+0x2b8>)
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	43da      	mvns	r2, r3
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	4013      	ands	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685a      	ldr	r2, [r3, #4]
 8000d98:	2380      	movs	r3, #128	; 0x80
 8000d9a:	039b      	lsls	r3, r3, #14
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	d003      	beq.n	8000da8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000da8:	4b1f      	ldr	r3, [pc, #124]	; (8000e28 <HAL_GPIO_Init+0x2b8>)
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000dae:	4a1e      	ldr	r2, [pc, #120]	; (8000e28 <HAL_GPIO_Init+0x2b8>)
 8000db0:	2384      	movs	r3, #132	; 0x84
 8000db2:	58d3      	ldr	r3, [r2, r3]
 8000db4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	43da      	mvns	r2, r3
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685a      	ldr	r2, [r3, #4]
 8000dc4:	2380      	movs	r3, #128	; 0x80
 8000dc6:	029b      	lsls	r3, r3, #10
 8000dc8:	4013      	ands	r3, r2
 8000dca:	d003      	beq.n	8000dd4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000dd4:	4914      	ldr	r1, [pc, #80]	; (8000e28 <HAL_GPIO_Init+0x2b8>)
 8000dd6:	2284      	movs	r2, #132	; 0x84
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000ddc:	4a12      	ldr	r2, [pc, #72]	; (8000e28 <HAL_GPIO_Init+0x2b8>)
 8000dde:	2380      	movs	r3, #128	; 0x80
 8000de0:	58d3      	ldr	r3, [r2, r3]
 8000de2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	43da      	mvns	r2, r3
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	4013      	ands	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685a      	ldr	r2, [r3, #4]
 8000df2:	2380      	movs	r3, #128	; 0x80
 8000df4:	025b      	lsls	r3, r3, #9
 8000df6:	4013      	ands	r3, r2
 8000df8:	d003      	beq.n	8000e02 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e02:	4909      	ldr	r1, [pc, #36]	; (8000e28 <HAL_GPIO_Init+0x2b8>)
 8000e04:	2280      	movs	r2, #128	; 0x80
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	40da      	lsrs	r2, r3
 8000e18:	1e13      	subs	r3, r2, #0
 8000e1a:	d000      	beq.n	8000e1e <HAL_GPIO_Init+0x2ae>
 8000e1c:	e6b0      	b.n	8000b80 <HAL_GPIO_Init+0x10>
  }
}
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	46c0      	nop			; (mov r8, r8)
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b006      	add	sp, #24
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40021800 	.word	0x40021800
 8000e2c:	50000400 	.word	0x50000400
 8000e30:	50000800 	.word	0x50000800
 8000e34:	50000c00 	.word	0x50000c00

08000e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	0008      	movs	r0, r1
 8000e42:	0011      	movs	r1, r2
 8000e44:	1cbb      	adds	r3, r7, #2
 8000e46:	1c02      	adds	r2, r0, #0
 8000e48:	801a      	strh	r2, [r3, #0]
 8000e4a:	1c7b      	adds	r3, r7, #1
 8000e4c:	1c0a      	adds	r2, r1, #0
 8000e4e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e50:	1c7b      	adds	r3, r7, #1
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d004      	beq.n	8000e62 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e58:	1cbb      	adds	r3, r7, #2
 8000e5a:	881a      	ldrh	r2, [r3, #0]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e60:	e003      	b.n	8000e6a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e62:	1cbb      	adds	r3, r7, #2
 8000e64:	881a      	ldrh	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	b002      	add	sp, #8
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b084      	sub	sp, #16
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
 8000e7a:	000a      	movs	r2, r1
 8000e7c:	1cbb      	adds	r3, r7, #2
 8000e7e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	695b      	ldr	r3, [r3, #20]
 8000e84:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e86:	1cbb      	adds	r3, r7, #2
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	041a      	lsls	r2, r3, #16
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	43db      	mvns	r3, r3
 8000e94:	1cb9      	adds	r1, r7, #2
 8000e96:	8809      	ldrh	r1, [r1, #0]
 8000e98:	400b      	ands	r3, r1
 8000e9a:	431a      	orrs	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	619a      	str	r2, [r3, #24]
}
 8000ea0:	46c0      	nop			; (mov r8, r8)
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	b004      	add	sp, #16
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8000eb2:	2180      	movs	r1, #128	; 0x80
 8000eb4:	0049      	lsls	r1, r1, #1
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	601a      	str	r2, [r3, #0]
}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40007000 	.word	0x40007000

08000ec4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d101      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e2fe      	b.n	80014d4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2201      	movs	r2, #1
 8000edc:	4013      	ands	r3, r2
 8000ede:	d100      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x1e>
 8000ee0:	e07c      	b.n	8000fdc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ee2:	4bc3      	ldr	r3, [pc, #780]	; (80011f0 <HAL_RCC_OscConfig+0x32c>)
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	2238      	movs	r2, #56	; 0x38
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000eec:	4bc0      	ldr	r3, [pc, #768]	; (80011f0 <HAL_RCC_OscConfig+0x32c>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	2b10      	cmp	r3, #16
 8000efa:	d102      	bne.n	8000f02 <HAL_RCC_OscConfig+0x3e>
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	2b03      	cmp	r3, #3
 8000f00:	d002      	beq.n	8000f08 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	2b08      	cmp	r3, #8
 8000f06:	d10b      	bne.n	8000f20 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f08:	4bb9      	ldr	r3, [pc, #740]	; (80011f0 <HAL_RCC_OscConfig+0x32c>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	2380      	movs	r3, #128	; 0x80
 8000f0e:	029b      	lsls	r3, r3, #10
 8000f10:	4013      	ands	r3, r2
 8000f12:	d062      	beq.n	8000fda <HAL_RCC_OscConfig+0x116>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d15e      	bne.n	8000fda <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e2d9      	b.n	80014d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	2380      	movs	r3, #128	; 0x80
 8000f26:	025b      	lsls	r3, r3, #9
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d107      	bne.n	8000f3c <HAL_RCC_OscConfig+0x78>
 8000f2c:	4bb0      	ldr	r3, [pc, #704]	; (80011f0 <HAL_RCC_OscConfig+0x32c>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4baf      	ldr	r3, [pc, #700]	; (80011f0 <HAL_RCC_OscConfig+0x32c>)
 8000f32:	2180      	movs	r1, #128	; 0x80
 8000f34:	0249      	lsls	r1, r1, #9
 8000f36:	430a      	orrs	r2, r1
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	e020      	b.n	8000f7e <HAL_RCC_OscConfig+0xba>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685a      	ldr	r2, [r3, #4]
 8000f40:	23a0      	movs	r3, #160	; 0xa0
 8000f42:	02db      	lsls	r3, r3, #11
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d10e      	bne.n	8000f66 <HAL_RCC_OscConfig+0xa2>
 8000f48:	4ba9      	ldr	r3, [pc, #676]	; (80011f0 <HAL_RCC_OscConfig+0x32c>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4ba8      	ldr	r3, [pc, #672]	; (80011f0 <HAL_RCC_OscConfig+0x32c>)
 8000f4e:	2180      	movs	r1, #128	; 0x80
 8000f50:	02c9      	lsls	r1, r1, #11
 8000f52:	430a      	orrs	r2, r1
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	4ba6      	ldr	r3, [pc, #664]	; (80011f0 <HAL_RCC_OscConfig+0x32c>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	4ba5      	ldr	r3, [pc, #660]	; (80011f0 <HAL_RCC_OscConfig+0x32c>)
 8000f5c:	2180      	movs	r1, #128	; 0x80
 8000f5e:	0249      	lsls	r1, r1, #9
 8000f60:	430a      	orrs	r2, r1
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	e00b      	b.n	8000f7e <HAL_RCC_OscConfig+0xba>
 8000f66:	4ba2      	ldr	r3, [pc, #648]	; (80011f0 <HAL_RCC_OscConfig+0x32c>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	4ba1      	ldr	r3, [pc, #644]	; (80011f0 <HAL_RCC_OscConfig+0x32c>)
 8000f6c:	49a1      	ldr	r1, [pc, #644]	; (80011f4 <HAL_RCC_OscConfig+0x330>)
 8000f6e:	400a      	ands	r2, r1
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	4b9f      	ldr	r3, [pc, #636]	; (80011f0 <HAL_RCC_OscConfig+0x32c>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	4b9e      	ldr	r3, [pc, #632]	; (80011f0 <HAL_RCC_OscConfig+0x32c>)
 8000f78:	499f      	ldr	r1, [pc, #636]	; (80011f8 <HAL_RCC_OscConfig+0x334>)
 8000f7a:	400a      	ands	r2, r1
 8000f7c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d014      	beq.n	8000fb0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f86:	f7ff fcd1 	bl	800092c <HAL_GetTick>
 8000f8a:	0003      	movs	r3, r0
 8000f8c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f8e:	e008      	b.n	8000fa2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f90:	f7ff fccc 	bl	800092c <HAL_GetTick>
 8000f94:	0002      	movs	r2, r0
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	2b64      	cmp	r3, #100	; 0x64
 8000f9c:	d901      	bls.n	8000fa2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	e298      	b.n	80014d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fa2:	4b93      	ldr	r3, [pc, #588]	; (80011f0 <HAL_RCC_OscConfig+0x32c>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	2380      	movs	r3, #128	; 0x80
 8000fa8:	029b      	lsls	r3, r3, #10
 8000faa:	4013      	ands	r3, r2
 8000fac:	d0f0      	beq.n	8000f90 <HAL_RCC_OscConfig+0xcc>
 8000fae:	e015      	b.n	8000fdc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fb0:	f7ff fcbc 	bl	800092c <HAL_GetTick>
 8000fb4:	0003      	movs	r3, r0
 8000fb6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fb8:	e008      	b.n	8000fcc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fba:	f7ff fcb7 	bl	800092c <HAL_GetTick>
 8000fbe:	0002      	movs	r2, r0
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	2b64      	cmp	r3, #100	; 0x64
 8000fc6:	d901      	bls.n	8000fcc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	e283      	b.n	80014d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fcc:	4b88      	ldr	r3, [pc, #544]	; (80011f0 <HAL_RCC_OscConfig+0x32c>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	2380      	movs	r3, #128	; 0x80
 8000fd2:	029b      	lsls	r3, r3, #10
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	d1f0      	bne.n	8000fba <HAL_RCC_OscConfig+0xf6>
 8000fd8:	e000      	b.n	8000fdc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fda:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	d100      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x124>
 8000fe6:	e099      	b.n	800111c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fe8:	4b81      	ldr	r3, [pc, #516]	; (80011f0 <HAL_RCC_OscConfig+0x32c>)
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	2238      	movs	r2, #56	; 0x38
 8000fee:	4013      	ands	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ff2:	4b7f      	ldr	r3, [pc, #508]	; (80011f0 <HAL_RCC_OscConfig+0x32c>)
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	2b10      	cmp	r3, #16
 8001000:	d102      	bne.n	8001008 <HAL_RCC_OscConfig+0x144>
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	2b02      	cmp	r3, #2
 8001006:	d002      	beq.n	800100e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d135      	bne.n	800107a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800100e:	4b78      	ldr	r3, [pc, #480]	; (80011f0 <HAL_RCC_OscConfig+0x32c>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	2380      	movs	r3, #128	; 0x80
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	4013      	ands	r3, r2
 8001018:	d005      	beq.n	8001026 <HAL_RCC_OscConfig+0x162>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e256      	b.n	80014d4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001026:	4b72      	ldr	r3, [pc, #456]	; (80011f0 <HAL_RCC_OscConfig+0x32c>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	4a74      	ldr	r2, [pc, #464]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 800102c:	4013      	ands	r3, r2
 800102e:	0019      	movs	r1, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	695b      	ldr	r3, [r3, #20]
 8001034:	021a      	lsls	r2, r3, #8
 8001036:	4b6e      	ldr	r3, [pc, #440]	; (80011f0 <HAL_RCC_OscConfig+0x32c>)
 8001038:	430a      	orrs	r2, r1
 800103a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d112      	bne.n	8001068 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001042:	4b6b      	ldr	r3, [pc, #428]	; (80011f0 <HAL_RCC_OscConfig+0x32c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a6e      	ldr	r2, [pc, #440]	; (8001200 <HAL_RCC_OscConfig+0x33c>)
 8001048:	4013      	ands	r3, r2
 800104a:	0019      	movs	r1, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	691a      	ldr	r2, [r3, #16]
 8001050:	4b67      	ldr	r3, [pc, #412]	; (80011f0 <HAL_RCC_OscConfig+0x32c>)
 8001052:	430a      	orrs	r2, r1
 8001054:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001056:	4b66      	ldr	r3, [pc, #408]	; (80011f0 <HAL_RCC_OscConfig+0x32c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	0adb      	lsrs	r3, r3, #11
 800105c:	2207      	movs	r2, #7
 800105e:	4013      	ands	r3, r2
 8001060:	4a68      	ldr	r2, [pc, #416]	; (8001204 <HAL_RCC_OscConfig+0x340>)
 8001062:	40da      	lsrs	r2, r3
 8001064:	4b68      	ldr	r3, [pc, #416]	; (8001208 <HAL_RCC_OscConfig+0x344>)
 8001066:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001068:	4b68      	ldr	r3, [pc, #416]	; (800120c <HAL_RCC_OscConfig+0x348>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	0018      	movs	r0, r3
 800106e:	f7ff fc01 	bl	8000874 <HAL_InitTick>
 8001072:	1e03      	subs	r3, r0, #0
 8001074:	d051      	beq.n	800111a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e22c      	b.n	80014d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d030      	beq.n	80010e4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001082:	4b5b      	ldr	r3, [pc, #364]	; (80011f0 <HAL_RCC_OscConfig+0x32c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a5e      	ldr	r2, [pc, #376]	; (8001200 <HAL_RCC_OscConfig+0x33c>)
 8001088:	4013      	ands	r3, r2
 800108a:	0019      	movs	r1, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	691a      	ldr	r2, [r3, #16]
 8001090:	4b57      	ldr	r3, [pc, #348]	; (80011f0 <HAL_RCC_OscConfig+0x32c>)
 8001092:	430a      	orrs	r2, r1
 8001094:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001096:	4b56      	ldr	r3, [pc, #344]	; (80011f0 <HAL_RCC_OscConfig+0x32c>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	4b55      	ldr	r3, [pc, #340]	; (80011f0 <HAL_RCC_OscConfig+0x32c>)
 800109c:	2180      	movs	r1, #128	; 0x80
 800109e:	0049      	lsls	r1, r1, #1
 80010a0:	430a      	orrs	r2, r1
 80010a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010a4:	f7ff fc42 	bl	800092c <HAL_GetTick>
 80010a8:	0003      	movs	r3, r0
 80010aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010ac:	e008      	b.n	80010c0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ae:	f7ff fc3d 	bl	800092c <HAL_GetTick>
 80010b2:	0002      	movs	r2, r0
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d901      	bls.n	80010c0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80010bc:	2303      	movs	r3, #3
 80010be:	e209      	b.n	80014d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010c0:	4b4b      	ldr	r3, [pc, #300]	; (80011f0 <HAL_RCC_OscConfig+0x32c>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	2380      	movs	r3, #128	; 0x80
 80010c6:	00db      	lsls	r3, r3, #3
 80010c8:	4013      	ands	r3, r2
 80010ca:	d0f0      	beq.n	80010ae <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010cc:	4b48      	ldr	r3, [pc, #288]	; (80011f0 <HAL_RCC_OscConfig+0x32c>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	4a4a      	ldr	r2, [pc, #296]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 80010d2:	4013      	ands	r3, r2
 80010d4:	0019      	movs	r1, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	021a      	lsls	r2, r3, #8
 80010dc:	4b44      	ldr	r3, [pc, #272]	; (80011f0 <HAL_RCC_OscConfig+0x32c>)
 80010de:	430a      	orrs	r2, r1
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	e01b      	b.n	800111c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80010e4:	4b42      	ldr	r3, [pc, #264]	; (80011f0 <HAL_RCC_OscConfig+0x32c>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	4b41      	ldr	r3, [pc, #260]	; (80011f0 <HAL_RCC_OscConfig+0x32c>)
 80010ea:	4949      	ldr	r1, [pc, #292]	; (8001210 <HAL_RCC_OscConfig+0x34c>)
 80010ec:	400a      	ands	r2, r1
 80010ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f0:	f7ff fc1c 	bl	800092c <HAL_GetTick>
 80010f4:	0003      	movs	r3, r0
 80010f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010f8:	e008      	b.n	800110c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010fa:	f7ff fc17 	bl	800092c <HAL_GetTick>
 80010fe:	0002      	movs	r2, r0
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	2b02      	cmp	r3, #2
 8001106:	d901      	bls.n	800110c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001108:	2303      	movs	r3, #3
 800110a:	e1e3      	b.n	80014d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800110c:	4b38      	ldr	r3, [pc, #224]	; (80011f0 <HAL_RCC_OscConfig+0x32c>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	2380      	movs	r3, #128	; 0x80
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	4013      	ands	r3, r2
 8001116:	d1f0      	bne.n	80010fa <HAL_RCC_OscConfig+0x236>
 8001118:	e000      	b.n	800111c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800111a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2208      	movs	r2, #8
 8001122:	4013      	ands	r3, r2
 8001124:	d047      	beq.n	80011b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001126:	4b32      	ldr	r3, [pc, #200]	; (80011f0 <HAL_RCC_OscConfig+0x32c>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	2238      	movs	r2, #56	; 0x38
 800112c:	4013      	ands	r3, r2
 800112e:	2b18      	cmp	r3, #24
 8001130:	d10a      	bne.n	8001148 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001132:	4b2f      	ldr	r3, [pc, #188]	; (80011f0 <HAL_RCC_OscConfig+0x32c>)
 8001134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001136:	2202      	movs	r2, #2
 8001138:	4013      	ands	r3, r2
 800113a:	d03c      	beq.n	80011b6 <HAL_RCC_OscConfig+0x2f2>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d138      	bne.n	80011b6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e1c5      	b.n	80014d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d019      	beq.n	8001184 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001150:	4b27      	ldr	r3, [pc, #156]	; (80011f0 <HAL_RCC_OscConfig+0x32c>)
 8001152:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001154:	4b26      	ldr	r3, [pc, #152]	; (80011f0 <HAL_RCC_OscConfig+0x32c>)
 8001156:	2101      	movs	r1, #1
 8001158:	430a      	orrs	r2, r1
 800115a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800115c:	f7ff fbe6 	bl	800092c <HAL_GetTick>
 8001160:	0003      	movs	r3, r0
 8001162:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001164:	e008      	b.n	8001178 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001166:	f7ff fbe1 	bl	800092c <HAL_GetTick>
 800116a:	0002      	movs	r2, r0
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	2b02      	cmp	r3, #2
 8001172:	d901      	bls.n	8001178 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001174:	2303      	movs	r3, #3
 8001176:	e1ad      	b.n	80014d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001178:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <HAL_RCC_OscConfig+0x32c>)
 800117a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800117c:	2202      	movs	r2, #2
 800117e:	4013      	ands	r3, r2
 8001180:	d0f1      	beq.n	8001166 <HAL_RCC_OscConfig+0x2a2>
 8001182:	e018      	b.n	80011b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001184:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <HAL_RCC_OscConfig+0x32c>)
 8001186:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001188:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <HAL_RCC_OscConfig+0x32c>)
 800118a:	2101      	movs	r1, #1
 800118c:	438a      	bics	r2, r1
 800118e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001190:	f7ff fbcc 	bl	800092c <HAL_GetTick>
 8001194:	0003      	movs	r3, r0
 8001196:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001198:	e008      	b.n	80011ac <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800119a:	f7ff fbc7 	bl	800092c <HAL_GetTick>
 800119e:	0002      	movs	r2, r0
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d901      	bls.n	80011ac <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e193      	b.n	80014d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011ac:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <HAL_RCC_OscConfig+0x32c>)
 80011ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011b0:	2202      	movs	r2, #2
 80011b2:	4013      	ands	r3, r2
 80011b4:	d1f1      	bne.n	800119a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2204      	movs	r2, #4
 80011bc:	4013      	ands	r3, r2
 80011be:	d100      	bne.n	80011c2 <HAL_RCC_OscConfig+0x2fe>
 80011c0:	e0c6      	b.n	8001350 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011c2:	231f      	movs	r3, #31
 80011c4:	18fb      	adds	r3, r7, r3
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <HAL_RCC_OscConfig+0x32c>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	2238      	movs	r2, #56	; 0x38
 80011d0:	4013      	ands	r3, r2
 80011d2:	2b20      	cmp	r3, #32
 80011d4:	d11e      	bne.n	8001214 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_RCC_OscConfig+0x32c>)
 80011d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011da:	2202      	movs	r2, #2
 80011dc:	4013      	ands	r3, r2
 80011de:	d100      	bne.n	80011e2 <HAL_RCC_OscConfig+0x31e>
 80011e0:	e0b6      	b.n	8001350 <HAL_RCC_OscConfig+0x48c>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d000      	beq.n	80011ec <HAL_RCC_OscConfig+0x328>
 80011ea:	e0b1      	b.n	8001350 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e171      	b.n	80014d4 <HAL_RCC_OscConfig+0x610>
 80011f0:	40021000 	.word	0x40021000
 80011f4:	fffeffff 	.word	0xfffeffff
 80011f8:	fffbffff 	.word	0xfffbffff
 80011fc:	ffff80ff 	.word	0xffff80ff
 8001200:	ffffc7ff 	.word	0xffffc7ff
 8001204:	00f42400 	.word	0x00f42400
 8001208:	20000018 	.word	0x20000018
 800120c:	2000001c 	.word	0x2000001c
 8001210:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001214:	4bb1      	ldr	r3, [pc, #708]	; (80014dc <HAL_RCC_OscConfig+0x618>)
 8001216:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001218:	2380      	movs	r3, #128	; 0x80
 800121a:	055b      	lsls	r3, r3, #21
 800121c:	4013      	ands	r3, r2
 800121e:	d101      	bne.n	8001224 <HAL_RCC_OscConfig+0x360>
 8001220:	2301      	movs	r3, #1
 8001222:	e000      	b.n	8001226 <HAL_RCC_OscConfig+0x362>
 8001224:	2300      	movs	r3, #0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d011      	beq.n	800124e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800122a:	4bac      	ldr	r3, [pc, #688]	; (80014dc <HAL_RCC_OscConfig+0x618>)
 800122c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800122e:	4bab      	ldr	r3, [pc, #684]	; (80014dc <HAL_RCC_OscConfig+0x618>)
 8001230:	2180      	movs	r1, #128	; 0x80
 8001232:	0549      	lsls	r1, r1, #21
 8001234:	430a      	orrs	r2, r1
 8001236:	63da      	str	r2, [r3, #60]	; 0x3c
 8001238:	4ba8      	ldr	r3, [pc, #672]	; (80014dc <HAL_RCC_OscConfig+0x618>)
 800123a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800123c:	2380      	movs	r3, #128	; 0x80
 800123e:	055b      	lsls	r3, r3, #21
 8001240:	4013      	ands	r3, r2
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001246:	231f      	movs	r3, #31
 8001248:	18fb      	adds	r3, r7, r3
 800124a:	2201      	movs	r2, #1
 800124c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800124e:	4ba4      	ldr	r3, [pc, #656]	; (80014e0 <HAL_RCC_OscConfig+0x61c>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	2380      	movs	r3, #128	; 0x80
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	4013      	ands	r3, r2
 8001258:	d11a      	bne.n	8001290 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800125a:	4ba1      	ldr	r3, [pc, #644]	; (80014e0 <HAL_RCC_OscConfig+0x61c>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	4ba0      	ldr	r3, [pc, #640]	; (80014e0 <HAL_RCC_OscConfig+0x61c>)
 8001260:	2180      	movs	r1, #128	; 0x80
 8001262:	0049      	lsls	r1, r1, #1
 8001264:	430a      	orrs	r2, r1
 8001266:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001268:	f7ff fb60 	bl	800092c <HAL_GetTick>
 800126c:	0003      	movs	r3, r0
 800126e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001270:	e008      	b.n	8001284 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001272:	f7ff fb5b 	bl	800092c <HAL_GetTick>
 8001276:	0002      	movs	r2, r0
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d901      	bls.n	8001284 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001280:	2303      	movs	r3, #3
 8001282:	e127      	b.n	80014d4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001284:	4b96      	ldr	r3, [pc, #600]	; (80014e0 <HAL_RCC_OscConfig+0x61c>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	2380      	movs	r3, #128	; 0x80
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	4013      	ands	r3, r2
 800128e:	d0f0      	beq.n	8001272 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d106      	bne.n	80012a6 <HAL_RCC_OscConfig+0x3e2>
 8001298:	4b90      	ldr	r3, [pc, #576]	; (80014dc <HAL_RCC_OscConfig+0x618>)
 800129a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800129c:	4b8f      	ldr	r3, [pc, #572]	; (80014dc <HAL_RCC_OscConfig+0x618>)
 800129e:	2101      	movs	r1, #1
 80012a0:	430a      	orrs	r2, r1
 80012a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80012a4:	e01c      	b.n	80012e0 <HAL_RCC_OscConfig+0x41c>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	2b05      	cmp	r3, #5
 80012ac:	d10c      	bne.n	80012c8 <HAL_RCC_OscConfig+0x404>
 80012ae:	4b8b      	ldr	r3, [pc, #556]	; (80014dc <HAL_RCC_OscConfig+0x618>)
 80012b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80012b2:	4b8a      	ldr	r3, [pc, #552]	; (80014dc <HAL_RCC_OscConfig+0x618>)
 80012b4:	2104      	movs	r1, #4
 80012b6:	430a      	orrs	r2, r1
 80012b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80012ba:	4b88      	ldr	r3, [pc, #544]	; (80014dc <HAL_RCC_OscConfig+0x618>)
 80012bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80012be:	4b87      	ldr	r3, [pc, #540]	; (80014dc <HAL_RCC_OscConfig+0x618>)
 80012c0:	2101      	movs	r1, #1
 80012c2:	430a      	orrs	r2, r1
 80012c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80012c6:	e00b      	b.n	80012e0 <HAL_RCC_OscConfig+0x41c>
 80012c8:	4b84      	ldr	r3, [pc, #528]	; (80014dc <HAL_RCC_OscConfig+0x618>)
 80012ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80012cc:	4b83      	ldr	r3, [pc, #524]	; (80014dc <HAL_RCC_OscConfig+0x618>)
 80012ce:	2101      	movs	r1, #1
 80012d0:	438a      	bics	r2, r1
 80012d2:	65da      	str	r2, [r3, #92]	; 0x5c
 80012d4:	4b81      	ldr	r3, [pc, #516]	; (80014dc <HAL_RCC_OscConfig+0x618>)
 80012d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80012d8:	4b80      	ldr	r3, [pc, #512]	; (80014dc <HAL_RCC_OscConfig+0x618>)
 80012da:	2104      	movs	r1, #4
 80012dc:	438a      	bics	r2, r1
 80012de:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d014      	beq.n	8001312 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e8:	f7ff fb20 	bl	800092c <HAL_GetTick>
 80012ec:	0003      	movs	r3, r0
 80012ee:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012f0:	e009      	b.n	8001306 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012f2:	f7ff fb1b 	bl	800092c <HAL_GetTick>
 80012f6:	0002      	movs	r2, r0
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	4a79      	ldr	r2, [pc, #484]	; (80014e4 <HAL_RCC_OscConfig+0x620>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e0e6      	b.n	80014d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001306:	4b75      	ldr	r3, [pc, #468]	; (80014dc <HAL_RCC_OscConfig+0x618>)
 8001308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800130a:	2202      	movs	r2, #2
 800130c:	4013      	ands	r3, r2
 800130e:	d0f0      	beq.n	80012f2 <HAL_RCC_OscConfig+0x42e>
 8001310:	e013      	b.n	800133a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001312:	f7ff fb0b 	bl	800092c <HAL_GetTick>
 8001316:	0003      	movs	r3, r0
 8001318:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800131a:	e009      	b.n	8001330 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800131c:	f7ff fb06 	bl	800092c <HAL_GetTick>
 8001320:	0002      	movs	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	4a6f      	ldr	r2, [pc, #444]	; (80014e4 <HAL_RCC_OscConfig+0x620>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e0d1      	b.n	80014d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001330:	4b6a      	ldr	r3, [pc, #424]	; (80014dc <HAL_RCC_OscConfig+0x618>)
 8001332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001334:	2202      	movs	r2, #2
 8001336:	4013      	ands	r3, r2
 8001338:	d1f0      	bne.n	800131c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800133a:	231f      	movs	r3, #31
 800133c:	18fb      	adds	r3, r7, r3
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d105      	bne.n	8001350 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001344:	4b65      	ldr	r3, [pc, #404]	; (80014dc <HAL_RCC_OscConfig+0x618>)
 8001346:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001348:	4b64      	ldr	r3, [pc, #400]	; (80014dc <HAL_RCC_OscConfig+0x618>)
 800134a:	4967      	ldr	r1, [pc, #412]	; (80014e8 <HAL_RCC_OscConfig+0x624>)
 800134c:	400a      	ands	r2, r1
 800134e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	69db      	ldr	r3, [r3, #28]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d100      	bne.n	800135a <HAL_RCC_OscConfig+0x496>
 8001358:	e0bb      	b.n	80014d2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800135a:	4b60      	ldr	r3, [pc, #384]	; (80014dc <HAL_RCC_OscConfig+0x618>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	2238      	movs	r2, #56	; 0x38
 8001360:	4013      	ands	r3, r2
 8001362:	2b10      	cmp	r3, #16
 8001364:	d100      	bne.n	8001368 <HAL_RCC_OscConfig+0x4a4>
 8001366:	e07b      	b.n	8001460 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	69db      	ldr	r3, [r3, #28]
 800136c:	2b02      	cmp	r3, #2
 800136e:	d156      	bne.n	800141e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001370:	4b5a      	ldr	r3, [pc, #360]	; (80014dc <HAL_RCC_OscConfig+0x618>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b59      	ldr	r3, [pc, #356]	; (80014dc <HAL_RCC_OscConfig+0x618>)
 8001376:	495d      	ldr	r1, [pc, #372]	; (80014ec <HAL_RCC_OscConfig+0x628>)
 8001378:	400a      	ands	r2, r1
 800137a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137c:	f7ff fad6 	bl	800092c <HAL_GetTick>
 8001380:	0003      	movs	r3, r0
 8001382:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001386:	f7ff fad1 	bl	800092c <HAL_GetTick>
 800138a:	0002      	movs	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e09d      	b.n	80014d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001398:	4b50      	ldr	r3, [pc, #320]	; (80014dc <HAL_RCC_OscConfig+0x618>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	2380      	movs	r3, #128	; 0x80
 800139e:	049b      	lsls	r3, r3, #18
 80013a0:	4013      	ands	r3, r2
 80013a2:	d1f0      	bne.n	8001386 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013a4:	4b4d      	ldr	r3, [pc, #308]	; (80014dc <HAL_RCC_OscConfig+0x618>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	4a51      	ldr	r2, [pc, #324]	; (80014f0 <HAL_RCC_OscConfig+0x62c>)
 80013aa:	4013      	ands	r3, r2
 80013ac:	0019      	movs	r1, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a1a      	ldr	r2, [r3, #32]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b6:	431a      	orrs	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013bc:	021b      	lsls	r3, r3, #8
 80013be:	431a      	orrs	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c4:	431a      	orrs	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	431a      	orrs	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013d0:	431a      	orrs	r2, r3
 80013d2:	4b42      	ldr	r3, [pc, #264]	; (80014dc <HAL_RCC_OscConfig+0x618>)
 80013d4:	430a      	orrs	r2, r1
 80013d6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013d8:	4b40      	ldr	r3, [pc, #256]	; (80014dc <HAL_RCC_OscConfig+0x618>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4b3f      	ldr	r3, [pc, #252]	; (80014dc <HAL_RCC_OscConfig+0x618>)
 80013de:	2180      	movs	r1, #128	; 0x80
 80013e0:	0449      	lsls	r1, r1, #17
 80013e2:	430a      	orrs	r2, r1
 80013e4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80013e6:	4b3d      	ldr	r3, [pc, #244]	; (80014dc <HAL_RCC_OscConfig+0x618>)
 80013e8:	68da      	ldr	r2, [r3, #12]
 80013ea:	4b3c      	ldr	r3, [pc, #240]	; (80014dc <HAL_RCC_OscConfig+0x618>)
 80013ec:	2180      	movs	r1, #128	; 0x80
 80013ee:	0549      	lsls	r1, r1, #21
 80013f0:	430a      	orrs	r2, r1
 80013f2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f4:	f7ff fa9a 	bl	800092c <HAL_GetTick>
 80013f8:	0003      	movs	r3, r0
 80013fa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013fc:	e008      	b.n	8001410 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013fe:	f7ff fa95 	bl	800092c <HAL_GetTick>
 8001402:	0002      	movs	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e061      	b.n	80014d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001410:	4b32      	ldr	r3, [pc, #200]	; (80014dc <HAL_RCC_OscConfig+0x618>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	2380      	movs	r3, #128	; 0x80
 8001416:	049b      	lsls	r3, r3, #18
 8001418:	4013      	ands	r3, r2
 800141a:	d0f0      	beq.n	80013fe <HAL_RCC_OscConfig+0x53a>
 800141c:	e059      	b.n	80014d2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800141e:	4b2f      	ldr	r3, [pc, #188]	; (80014dc <HAL_RCC_OscConfig+0x618>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4b2e      	ldr	r3, [pc, #184]	; (80014dc <HAL_RCC_OscConfig+0x618>)
 8001424:	4931      	ldr	r1, [pc, #196]	; (80014ec <HAL_RCC_OscConfig+0x628>)
 8001426:	400a      	ands	r2, r1
 8001428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142a:	f7ff fa7f 	bl	800092c <HAL_GetTick>
 800142e:	0003      	movs	r3, r0
 8001430:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001434:	f7ff fa7a 	bl	800092c <HAL_GetTick>
 8001438:	0002      	movs	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e046      	b.n	80014d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001446:	4b25      	ldr	r3, [pc, #148]	; (80014dc <HAL_RCC_OscConfig+0x618>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	2380      	movs	r3, #128	; 0x80
 800144c:	049b      	lsls	r3, r3, #18
 800144e:	4013      	ands	r3, r2
 8001450:	d1f0      	bne.n	8001434 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001452:	4b22      	ldr	r3, [pc, #136]	; (80014dc <HAL_RCC_OscConfig+0x618>)
 8001454:	68da      	ldr	r2, [r3, #12]
 8001456:	4b21      	ldr	r3, [pc, #132]	; (80014dc <HAL_RCC_OscConfig+0x618>)
 8001458:	4926      	ldr	r1, [pc, #152]	; (80014f4 <HAL_RCC_OscConfig+0x630>)
 800145a:	400a      	ands	r2, r1
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	e038      	b.n	80014d2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	69db      	ldr	r3, [r3, #28]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d101      	bne.n	800146c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e033      	b.n	80014d4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800146c:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <HAL_RCC_OscConfig+0x618>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	2203      	movs	r2, #3
 8001476:	401a      	ands	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a1b      	ldr	r3, [r3, #32]
 800147c:	429a      	cmp	r2, r3
 800147e:	d126      	bne.n	80014ce <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	2270      	movs	r2, #112	; 0x70
 8001484:	401a      	ands	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800148a:	429a      	cmp	r2, r3
 800148c:	d11f      	bne.n	80014ce <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	23fe      	movs	r3, #254	; 0xfe
 8001492:	01db      	lsls	r3, r3, #7
 8001494:	401a      	ands	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800149c:	429a      	cmp	r2, r3
 800149e:	d116      	bne.n	80014ce <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80014a0:	697a      	ldr	r2, [r7, #20]
 80014a2:	23f8      	movs	r3, #248	; 0xf8
 80014a4:	039b      	lsls	r3, r3, #14
 80014a6:	401a      	ands	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d10e      	bne.n	80014ce <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80014b0:	697a      	ldr	r2, [r7, #20]
 80014b2:	23e0      	movs	r3, #224	; 0xe0
 80014b4:	051b      	lsls	r3, r3, #20
 80014b6:	401a      	ands	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80014bc:	429a      	cmp	r2, r3
 80014be:	d106      	bne.n	80014ce <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	0f5b      	lsrs	r3, r3, #29
 80014c4:	075a      	lsls	r2, r3, #29
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d001      	beq.n	80014d2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e000      	b.n	80014d4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	0018      	movs	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	b008      	add	sp, #32
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40007000 	.word	0x40007000
 80014e4:	00001388 	.word	0x00001388
 80014e8:	efffffff 	.word	0xefffffff
 80014ec:	feffffff 	.word	0xfeffffff
 80014f0:	11c1808c 	.word	0x11c1808c
 80014f4:	eefefffc 	.word	0xeefefffc

080014f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d101      	bne.n	800150c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e0e9      	b.n	80016e0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800150c:	4b76      	ldr	r3, [pc, #472]	; (80016e8 <HAL_RCC_ClockConfig+0x1f0>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2207      	movs	r2, #7
 8001512:	4013      	ands	r3, r2
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	429a      	cmp	r2, r3
 8001518:	d91e      	bls.n	8001558 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800151a:	4b73      	ldr	r3, [pc, #460]	; (80016e8 <HAL_RCC_ClockConfig+0x1f0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2207      	movs	r2, #7
 8001520:	4393      	bics	r3, r2
 8001522:	0019      	movs	r1, r3
 8001524:	4b70      	ldr	r3, [pc, #448]	; (80016e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	430a      	orrs	r2, r1
 800152a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800152c:	f7ff f9fe 	bl	800092c <HAL_GetTick>
 8001530:	0003      	movs	r3, r0
 8001532:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001534:	e009      	b.n	800154a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001536:	f7ff f9f9 	bl	800092c <HAL_GetTick>
 800153a:	0002      	movs	r2, r0
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	4a6a      	ldr	r2, [pc, #424]	; (80016ec <HAL_RCC_ClockConfig+0x1f4>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d901      	bls.n	800154a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e0ca      	b.n	80016e0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800154a:	4b67      	ldr	r3, [pc, #412]	; (80016e8 <HAL_RCC_ClockConfig+0x1f0>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2207      	movs	r2, #7
 8001550:	4013      	ands	r3, r2
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	429a      	cmp	r2, r3
 8001556:	d1ee      	bne.n	8001536 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2202      	movs	r2, #2
 800155e:	4013      	ands	r3, r2
 8001560:	d015      	beq.n	800158e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2204      	movs	r2, #4
 8001568:	4013      	ands	r3, r2
 800156a:	d006      	beq.n	800157a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800156c:	4b60      	ldr	r3, [pc, #384]	; (80016f0 <HAL_RCC_ClockConfig+0x1f8>)
 800156e:	689a      	ldr	r2, [r3, #8]
 8001570:	4b5f      	ldr	r3, [pc, #380]	; (80016f0 <HAL_RCC_ClockConfig+0x1f8>)
 8001572:	21e0      	movs	r1, #224	; 0xe0
 8001574:	01c9      	lsls	r1, r1, #7
 8001576:	430a      	orrs	r2, r1
 8001578:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800157a:	4b5d      	ldr	r3, [pc, #372]	; (80016f0 <HAL_RCC_ClockConfig+0x1f8>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	4a5d      	ldr	r2, [pc, #372]	; (80016f4 <HAL_RCC_ClockConfig+0x1fc>)
 8001580:	4013      	ands	r3, r2
 8001582:	0019      	movs	r1, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	4b59      	ldr	r3, [pc, #356]	; (80016f0 <HAL_RCC_ClockConfig+0x1f8>)
 800158a:	430a      	orrs	r2, r1
 800158c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2201      	movs	r2, #1
 8001594:	4013      	ands	r3, r2
 8001596:	d057      	beq.n	8001648 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d107      	bne.n	80015b0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015a0:	4b53      	ldr	r3, [pc, #332]	; (80016f0 <HAL_RCC_ClockConfig+0x1f8>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	2380      	movs	r3, #128	; 0x80
 80015a6:	029b      	lsls	r3, r3, #10
 80015a8:	4013      	ands	r3, r2
 80015aa:	d12b      	bne.n	8001604 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e097      	b.n	80016e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d107      	bne.n	80015c8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015b8:	4b4d      	ldr	r3, [pc, #308]	; (80016f0 <HAL_RCC_ClockConfig+0x1f8>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	2380      	movs	r3, #128	; 0x80
 80015be:	049b      	lsls	r3, r3, #18
 80015c0:	4013      	ands	r3, r2
 80015c2:	d11f      	bne.n	8001604 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e08b      	b.n	80016e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d107      	bne.n	80015e0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015d0:	4b47      	ldr	r3, [pc, #284]	; (80016f0 <HAL_RCC_ClockConfig+0x1f8>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	2380      	movs	r3, #128	; 0x80
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	4013      	ands	r3, r2
 80015da:	d113      	bne.n	8001604 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e07f      	b.n	80016e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	2b03      	cmp	r3, #3
 80015e6:	d106      	bne.n	80015f6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015e8:	4b41      	ldr	r3, [pc, #260]	; (80016f0 <HAL_RCC_ClockConfig+0x1f8>)
 80015ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ec:	2202      	movs	r2, #2
 80015ee:	4013      	ands	r3, r2
 80015f0:	d108      	bne.n	8001604 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e074      	b.n	80016e0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015f6:	4b3e      	ldr	r3, [pc, #248]	; (80016f0 <HAL_RCC_ClockConfig+0x1f8>)
 80015f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015fa:	2202      	movs	r2, #2
 80015fc:	4013      	ands	r3, r2
 80015fe:	d101      	bne.n	8001604 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e06d      	b.n	80016e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001604:	4b3a      	ldr	r3, [pc, #232]	; (80016f0 <HAL_RCC_ClockConfig+0x1f8>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	2207      	movs	r2, #7
 800160a:	4393      	bics	r3, r2
 800160c:	0019      	movs	r1, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	4b37      	ldr	r3, [pc, #220]	; (80016f0 <HAL_RCC_ClockConfig+0x1f8>)
 8001614:	430a      	orrs	r2, r1
 8001616:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001618:	f7ff f988 	bl	800092c <HAL_GetTick>
 800161c:	0003      	movs	r3, r0
 800161e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001620:	e009      	b.n	8001636 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001622:	f7ff f983 	bl	800092c <HAL_GetTick>
 8001626:	0002      	movs	r2, r0
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	4a2f      	ldr	r2, [pc, #188]	; (80016ec <HAL_RCC_ClockConfig+0x1f4>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e054      	b.n	80016e0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001636:	4b2e      	ldr	r3, [pc, #184]	; (80016f0 <HAL_RCC_ClockConfig+0x1f8>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2238      	movs	r2, #56	; 0x38
 800163c:	401a      	ands	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	429a      	cmp	r2, r3
 8001646:	d1ec      	bne.n	8001622 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001648:	4b27      	ldr	r3, [pc, #156]	; (80016e8 <HAL_RCC_ClockConfig+0x1f0>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2207      	movs	r2, #7
 800164e:	4013      	ands	r3, r2
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	429a      	cmp	r2, r3
 8001654:	d21e      	bcs.n	8001694 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001656:	4b24      	ldr	r3, [pc, #144]	; (80016e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2207      	movs	r2, #7
 800165c:	4393      	bics	r3, r2
 800165e:	0019      	movs	r1, r3
 8001660:	4b21      	ldr	r3, [pc, #132]	; (80016e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	430a      	orrs	r2, r1
 8001666:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001668:	f7ff f960 	bl	800092c <HAL_GetTick>
 800166c:	0003      	movs	r3, r0
 800166e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001670:	e009      	b.n	8001686 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001672:	f7ff f95b 	bl	800092c <HAL_GetTick>
 8001676:	0002      	movs	r2, r0
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	4a1b      	ldr	r2, [pc, #108]	; (80016ec <HAL_RCC_ClockConfig+0x1f4>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e02c      	b.n	80016e0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001686:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2207      	movs	r2, #7
 800168c:	4013      	ands	r3, r2
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	429a      	cmp	r2, r3
 8001692:	d1ee      	bne.n	8001672 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2204      	movs	r2, #4
 800169a:	4013      	ands	r3, r2
 800169c:	d009      	beq.n	80016b2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800169e:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <HAL_RCC_ClockConfig+0x1f8>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	4a15      	ldr	r2, [pc, #84]	; (80016f8 <HAL_RCC_ClockConfig+0x200>)
 80016a4:	4013      	ands	r3, r2
 80016a6:	0019      	movs	r1, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68da      	ldr	r2, [r3, #12]
 80016ac:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <HAL_RCC_ClockConfig+0x1f8>)
 80016ae:	430a      	orrs	r2, r1
 80016b0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80016b2:	f000 f829 	bl	8001708 <HAL_RCC_GetSysClockFreq>
 80016b6:	0001      	movs	r1, r0
 80016b8:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <HAL_RCC_ClockConfig+0x1f8>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	0a1b      	lsrs	r3, r3, #8
 80016be:	220f      	movs	r2, #15
 80016c0:	401a      	ands	r2, r3
 80016c2:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <HAL_RCC_ClockConfig+0x204>)
 80016c4:	0092      	lsls	r2, r2, #2
 80016c6:	58d3      	ldr	r3, [r2, r3]
 80016c8:	221f      	movs	r2, #31
 80016ca:	4013      	ands	r3, r2
 80016cc:	000a      	movs	r2, r1
 80016ce:	40da      	lsrs	r2, r3
 80016d0:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <HAL_RCC_ClockConfig+0x208>)
 80016d2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80016d4:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <HAL_RCC_ClockConfig+0x20c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	0018      	movs	r0, r3
 80016da:	f7ff f8cb 	bl	8000874 <HAL_InitTick>
 80016de:	0003      	movs	r3, r0
}
 80016e0:	0018      	movs	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	b004      	add	sp, #16
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40022000 	.word	0x40022000
 80016ec:	00001388 	.word	0x00001388
 80016f0:	40021000 	.word	0x40021000
 80016f4:	fffff0ff 	.word	0xfffff0ff
 80016f8:	ffff8fff 	.word	0xffff8fff
 80016fc:	08002fd4 	.word	0x08002fd4
 8001700:	20000018 	.word	0x20000018
 8001704:	2000001c 	.word	0x2000001c

08001708 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800170e:	4b3c      	ldr	r3, [pc, #240]	; (8001800 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	2238      	movs	r2, #56	; 0x38
 8001714:	4013      	ands	r3, r2
 8001716:	d10f      	bne.n	8001738 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001718:	4b39      	ldr	r3, [pc, #228]	; (8001800 <HAL_RCC_GetSysClockFreq+0xf8>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	0adb      	lsrs	r3, r3, #11
 800171e:	2207      	movs	r2, #7
 8001720:	4013      	ands	r3, r2
 8001722:	2201      	movs	r2, #1
 8001724:	409a      	lsls	r2, r3
 8001726:	0013      	movs	r3, r2
 8001728:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800172a:	6839      	ldr	r1, [r7, #0]
 800172c:	4835      	ldr	r0, [pc, #212]	; (8001804 <HAL_RCC_GetSysClockFreq+0xfc>)
 800172e:	f7fe fcf3 	bl	8000118 <__udivsi3>
 8001732:	0003      	movs	r3, r0
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	e05d      	b.n	80017f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001738:	4b31      	ldr	r3, [pc, #196]	; (8001800 <HAL_RCC_GetSysClockFreq+0xf8>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	2238      	movs	r2, #56	; 0x38
 800173e:	4013      	ands	r3, r2
 8001740:	2b08      	cmp	r3, #8
 8001742:	d102      	bne.n	800174a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001744:	4b30      	ldr	r3, [pc, #192]	; (8001808 <HAL_RCC_GetSysClockFreq+0x100>)
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	e054      	b.n	80017f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800174a:	4b2d      	ldr	r3, [pc, #180]	; (8001800 <HAL_RCC_GetSysClockFreq+0xf8>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	2238      	movs	r2, #56	; 0x38
 8001750:	4013      	ands	r3, r2
 8001752:	2b10      	cmp	r3, #16
 8001754:	d138      	bne.n	80017c8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001756:	4b2a      	ldr	r3, [pc, #168]	; (8001800 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	2203      	movs	r2, #3
 800175c:	4013      	ands	r3, r2
 800175e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001760:	4b27      	ldr	r3, [pc, #156]	; (8001800 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	091b      	lsrs	r3, r3, #4
 8001766:	2207      	movs	r2, #7
 8001768:	4013      	ands	r3, r2
 800176a:	3301      	adds	r3, #1
 800176c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2b03      	cmp	r3, #3
 8001772:	d10d      	bne.n	8001790 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001774:	68b9      	ldr	r1, [r7, #8]
 8001776:	4824      	ldr	r0, [pc, #144]	; (8001808 <HAL_RCC_GetSysClockFreq+0x100>)
 8001778:	f7fe fcce 	bl	8000118 <__udivsi3>
 800177c:	0003      	movs	r3, r0
 800177e:	0019      	movs	r1, r3
 8001780:	4b1f      	ldr	r3, [pc, #124]	; (8001800 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	0a1b      	lsrs	r3, r3, #8
 8001786:	227f      	movs	r2, #127	; 0x7f
 8001788:	4013      	ands	r3, r2
 800178a:	434b      	muls	r3, r1
 800178c:	617b      	str	r3, [r7, #20]
        break;
 800178e:	e00d      	b.n	80017ac <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001790:	68b9      	ldr	r1, [r7, #8]
 8001792:	481c      	ldr	r0, [pc, #112]	; (8001804 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001794:	f7fe fcc0 	bl	8000118 <__udivsi3>
 8001798:	0003      	movs	r3, r0
 800179a:	0019      	movs	r1, r3
 800179c:	4b18      	ldr	r3, [pc, #96]	; (8001800 <HAL_RCC_GetSysClockFreq+0xf8>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	0a1b      	lsrs	r3, r3, #8
 80017a2:	227f      	movs	r2, #127	; 0x7f
 80017a4:	4013      	ands	r3, r2
 80017a6:	434b      	muls	r3, r1
 80017a8:	617b      	str	r3, [r7, #20]
        break;
 80017aa:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80017ac:	4b14      	ldr	r3, [pc, #80]	; (8001800 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	0f5b      	lsrs	r3, r3, #29
 80017b2:	2207      	movs	r2, #7
 80017b4:	4013      	ands	r3, r2
 80017b6:	3301      	adds	r3, #1
 80017b8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80017ba:	6879      	ldr	r1, [r7, #4]
 80017bc:	6978      	ldr	r0, [r7, #20]
 80017be:	f7fe fcab 	bl	8000118 <__udivsi3>
 80017c2:	0003      	movs	r3, r0
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	e015      	b.n	80017f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80017c8:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2238      	movs	r2, #56	; 0x38
 80017ce:	4013      	ands	r3, r2
 80017d0:	2b20      	cmp	r3, #32
 80017d2:	d103      	bne.n	80017dc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80017d4:	2380      	movs	r3, #128	; 0x80
 80017d6:	021b      	lsls	r3, r3, #8
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	e00b      	b.n	80017f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	2238      	movs	r2, #56	; 0x38
 80017e2:	4013      	ands	r3, r2
 80017e4:	2b18      	cmp	r3, #24
 80017e6:	d103      	bne.n	80017f0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80017e8:	23fa      	movs	r3, #250	; 0xfa
 80017ea:	01db      	lsls	r3, r3, #7
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	e001      	b.n	80017f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80017f0:	2300      	movs	r3, #0
 80017f2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80017f4:	693b      	ldr	r3, [r7, #16]
}
 80017f6:	0018      	movs	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	b006      	add	sp, #24
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	40021000 	.word	0x40021000
 8001804:	00f42400 	.word	0x00f42400
 8001808:	007a1200 	.word	0x007a1200

0800180c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001814:	2313      	movs	r3, #19
 8001816:	18fb      	adds	r3, r7, r3
 8001818:	2200      	movs	r2, #0
 800181a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800181c:	2312      	movs	r3, #18
 800181e:	18fb      	adds	r3, r7, r3
 8001820:	2200      	movs	r2, #0
 8001822:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	2380      	movs	r3, #128	; 0x80
 800182a:	029b      	lsls	r3, r3, #10
 800182c:	4013      	ands	r3, r2
 800182e:	d100      	bne.n	8001832 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001830:	e0a3      	b.n	800197a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001832:	2011      	movs	r0, #17
 8001834:	183b      	adds	r3, r7, r0
 8001836:	2200      	movs	r2, #0
 8001838:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800183a:	4bc3      	ldr	r3, [pc, #780]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800183c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800183e:	2380      	movs	r3, #128	; 0x80
 8001840:	055b      	lsls	r3, r3, #21
 8001842:	4013      	ands	r3, r2
 8001844:	d110      	bne.n	8001868 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001846:	4bc0      	ldr	r3, [pc, #768]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001848:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800184a:	4bbf      	ldr	r3, [pc, #764]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800184c:	2180      	movs	r1, #128	; 0x80
 800184e:	0549      	lsls	r1, r1, #21
 8001850:	430a      	orrs	r2, r1
 8001852:	63da      	str	r2, [r3, #60]	; 0x3c
 8001854:	4bbc      	ldr	r3, [pc, #752]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001856:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	055b      	lsls	r3, r3, #21
 800185c:	4013      	ands	r3, r2
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001862:	183b      	adds	r3, r7, r0
 8001864:	2201      	movs	r2, #1
 8001866:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001868:	4bb8      	ldr	r3, [pc, #736]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4bb7      	ldr	r3, [pc, #732]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800186e:	2180      	movs	r1, #128	; 0x80
 8001870:	0049      	lsls	r1, r1, #1
 8001872:	430a      	orrs	r2, r1
 8001874:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001876:	f7ff f859 	bl	800092c <HAL_GetTick>
 800187a:	0003      	movs	r3, r0
 800187c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800187e:	e00b      	b.n	8001898 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001880:	f7ff f854 	bl	800092c <HAL_GetTick>
 8001884:	0002      	movs	r2, r0
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d904      	bls.n	8001898 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800188e:	2313      	movs	r3, #19
 8001890:	18fb      	adds	r3, r7, r3
 8001892:	2203      	movs	r2, #3
 8001894:	701a      	strb	r2, [r3, #0]
        break;
 8001896:	e005      	b.n	80018a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001898:	4bac      	ldr	r3, [pc, #688]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	2380      	movs	r3, #128	; 0x80
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	4013      	ands	r3, r2
 80018a2:	d0ed      	beq.n	8001880 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80018a4:	2313      	movs	r3, #19
 80018a6:	18fb      	adds	r3, r7, r3
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d154      	bne.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80018ae:	4ba6      	ldr	r3, [pc, #664]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80018b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018b2:	23c0      	movs	r3, #192	; 0xc0
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	4013      	ands	r3, r2
 80018b8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d019      	beq.n	80018f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c4:	697a      	ldr	r2, [r7, #20]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d014      	beq.n	80018f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80018ca:	4b9f      	ldr	r3, [pc, #636]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80018cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ce:	4aa0      	ldr	r2, [pc, #640]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80018d4:	4b9c      	ldr	r3, [pc, #624]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80018d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018d8:	4b9b      	ldr	r3, [pc, #620]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80018da:	2180      	movs	r1, #128	; 0x80
 80018dc:	0249      	lsls	r1, r1, #9
 80018de:	430a      	orrs	r2, r1
 80018e0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80018e2:	4b99      	ldr	r3, [pc, #612]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80018e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018e6:	4b98      	ldr	r3, [pc, #608]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80018e8:	499a      	ldr	r1, [pc, #616]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80018ea:	400a      	ands	r2, r1
 80018ec:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80018ee:	4b96      	ldr	r3, [pc, #600]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	2201      	movs	r2, #1
 80018f8:	4013      	ands	r3, r2
 80018fa:	d016      	beq.n	800192a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fc:	f7ff f816 	bl	800092c <HAL_GetTick>
 8001900:	0003      	movs	r3, r0
 8001902:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001904:	e00c      	b.n	8001920 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001906:	f7ff f811 	bl	800092c <HAL_GetTick>
 800190a:	0002      	movs	r2, r0
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	4a91      	ldr	r2, [pc, #580]	; (8001b58 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d904      	bls.n	8001920 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001916:	2313      	movs	r3, #19
 8001918:	18fb      	adds	r3, r7, r3
 800191a:	2203      	movs	r2, #3
 800191c:	701a      	strb	r2, [r3, #0]
            break;
 800191e:	e004      	b.n	800192a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001920:	4b89      	ldr	r3, [pc, #548]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001924:	2202      	movs	r2, #2
 8001926:	4013      	ands	r3, r2
 8001928:	d0ed      	beq.n	8001906 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800192a:	2313      	movs	r3, #19
 800192c:	18fb      	adds	r3, r7, r3
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d10a      	bne.n	800194a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001934:	4b84      	ldr	r3, [pc, #528]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001938:	4a85      	ldr	r2, [pc, #532]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800193a:	4013      	ands	r3, r2
 800193c:	0019      	movs	r1, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001942:	4b81      	ldr	r3, [pc, #516]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001944:	430a      	orrs	r2, r1
 8001946:	65da      	str	r2, [r3, #92]	; 0x5c
 8001948:	e00c      	b.n	8001964 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800194a:	2312      	movs	r3, #18
 800194c:	18fb      	adds	r3, r7, r3
 800194e:	2213      	movs	r2, #19
 8001950:	18ba      	adds	r2, r7, r2
 8001952:	7812      	ldrb	r2, [r2, #0]
 8001954:	701a      	strb	r2, [r3, #0]
 8001956:	e005      	b.n	8001964 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001958:	2312      	movs	r3, #18
 800195a:	18fb      	adds	r3, r7, r3
 800195c:	2213      	movs	r2, #19
 800195e:	18ba      	adds	r2, r7, r2
 8001960:	7812      	ldrb	r2, [r2, #0]
 8001962:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001964:	2311      	movs	r3, #17
 8001966:	18fb      	adds	r3, r7, r3
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d105      	bne.n	800197a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800196e:	4b76      	ldr	r3, [pc, #472]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001970:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001972:	4b75      	ldr	r3, [pc, #468]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001974:	4979      	ldr	r1, [pc, #484]	; (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8001976:	400a      	ands	r2, r1
 8001978:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2201      	movs	r2, #1
 8001980:	4013      	ands	r3, r2
 8001982:	d009      	beq.n	8001998 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001984:	4b70      	ldr	r3, [pc, #448]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001988:	2203      	movs	r2, #3
 800198a:	4393      	bics	r3, r2
 800198c:	0019      	movs	r1, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	4b6d      	ldr	r3, [pc, #436]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001994:	430a      	orrs	r2, r1
 8001996:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2202      	movs	r2, #2
 800199e:	4013      	ands	r3, r2
 80019a0:	d009      	beq.n	80019b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80019a2:	4b69      	ldr	r3, [pc, #420]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80019a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a6:	220c      	movs	r2, #12
 80019a8:	4393      	bics	r3, r2
 80019aa:	0019      	movs	r1, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	4b65      	ldr	r3, [pc, #404]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80019b2:	430a      	orrs	r2, r1
 80019b4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2210      	movs	r2, #16
 80019bc:	4013      	ands	r3, r2
 80019be:	d009      	beq.n	80019d4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80019c0:	4b61      	ldr	r3, [pc, #388]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80019c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c4:	4a66      	ldr	r2, [pc, #408]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80019c6:	4013      	ands	r3, r2
 80019c8:	0019      	movs	r1, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68da      	ldr	r2, [r3, #12]
 80019ce:	4b5e      	ldr	r3, [pc, #376]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80019d0:	430a      	orrs	r2, r1
 80019d2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	2380      	movs	r3, #128	; 0x80
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4013      	ands	r3, r2
 80019de:	d009      	beq.n	80019f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80019e0:	4b59      	ldr	r3, [pc, #356]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80019e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e4:	4a5f      	ldr	r2, [pc, #380]	; (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80019e6:	4013      	ands	r3, r2
 80019e8:	0019      	movs	r1, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	699a      	ldr	r2, [r3, #24]
 80019ee:	4b56      	ldr	r3, [pc, #344]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80019f0:	430a      	orrs	r2, r1
 80019f2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	4013      	ands	r3, r2
 80019fe:	d009      	beq.n	8001a14 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001a00:	4b51      	ldr	r3, [pc, #324]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a04:	4a58      	ldr	r2, [pc, #352]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001a06:	4013      	ands	r3, r2
 8001a08:	0019      	movs	r1, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	69da      	ldr	r2, [r3, #28]
 8001a0e:	4b4e      	ldr	r3, [pc, #312]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a10:	430a      	orrs	r2, r1
 8001a12:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2220      	movs	r2, #32
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d009      	beq.n	8001a32 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001a1e:	4b4a      	ldr	r3, [pc, #296]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a22:	4a52      	ldr	r2, [pc, #328]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8001a24:	4013      	ands	r3, r2
 8001a26:	0019      	movs	r1, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	691a      	ldr	r2, [r3, #16]
 8001a2c:	4b46      	ldr	r3, [pc, #280]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	2380      	movs	r3, #128	; 0x80
 8001a38:	01db      	lsls	r3, r3, #7
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d015      	beq.n	8001a6a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001a3e:	4b42      	ldr	r3, [pc, #264]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	0899      	lsrs	r1, r3, #2
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a1a      	ldr	r2, [r3, #32]
 8001a4a:	4b3f      	ldr	r3, [pc, #252]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a1a      	ldr	r2, [r3, #32]
 8001a54:	2380      	movs	r3, #128	; 0x80
 8001a56:	05db      	lsls	r3, r3, #23
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d106      	bne.n	8001a6a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001a5c:	4b3a      	ldr	r3, [pc, #232]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a5e:	68da      	ldr	r2, [r3, #12]
 8001a60:	4b39      	ldr	r3, [pc, #228]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a62:	2180      	movs	r1, #128	; 0x80
 8001a64:	0249      	lsls	r1, r1, #9
 8001a66:	430a      	orrs	r2, r1
 8001a68:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	2380      	movs	r3, #128	; 0x80
 8001a70:	031b      	lsls	r3, r3, #12
 8001a72:	4013      	ands	r3, r2
 8001a74:	d009      	beq.n	8001a8a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001a76:	4b34      	ldr	r3, [pc, #208]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a7a:	2240      	movs	r2, #64	; 0x40
 8001a7c:	4393      	bics	r3, r2
 8001a7e:	0019      	movs	r1, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a84:	4b30      	ldr	r3, [pc, #192]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a86:	430a      	orrs	r2, r1
 8001a88:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	2380      	movs	r3, #128	; 0x80
 8001a90:	039b      	lsls	r3, r3, #14
 8001a92:	4013      	ands	r3, r2
 8001a94:	d016      	beq.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001a96:	4b2c      	ldr	r3, [pc, #176]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a9a:	4a35      	ldr	r2, [pc, #212]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	0019      	movs	r1, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aa4:	4b28      	ldr	r3, [pc, #160]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aae:	2380      	movs	r3, #128	; 0x80
 8001ab0:	03db      	lsls	r3, r3, #15
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d106      	bne.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001ab6:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ab8:	68da      	ldr	r2, [r3, #12]
 8001aba:	4b23      	ldr	r3, [pc, #140]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001abc:	2180      	movs	r1, #128	; 0x80
 8001abe:	0449      	lsls	r1, r1, #17
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	2380      	movs	r3, #128	; 0x80
 8001aca:	03db      	lsls	r3, r3, #15
 8001acc:	4013      	ands	r3, r2
 8001ace:	d016      	beq.n	8001afe <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001ad0:	4b1d      	ldr	r3, [pc, #116]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad4:	4a27      	ldr	r2, [pc, #156]	; (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	0019      	movs	r1, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ade:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ae8:	2380      	movs	r3, #128	; 0x80
 8001aea:	045b      	lsls	r3, r3, #17
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d106      	bne.n	8001afe <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001af0:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001af2:	68da      	ldr	r2, [r3, #12]
 8001af4:	4b14      	ldr	r3, [pc, #80]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001af6:	2180      	movs	r1, #128	; 0x80
 8001af8:	0449      	lsls	r1, r1, #17
 8001afa:	430a      	orrs	r2, r1
 8001afc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	2380      	movs	r3, #128	; 0x80
 8001b04:	011b      	lsls	r3, r3, #4
 8001b06:	4013      	ands	r3, r2
 8001b08:	d016      	beq.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b0e:	4a1a      	ldr	r2, [pc, #104]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8001b10:	4013      	ands	r3, r2
 8001b12:	0019      	movs	r1, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	695a      	ldr	r2, [r3, #20]
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	695a      	ldr	r2, [r3, #20]
 8001b22:	2380      	movs	r3, #128	; 0x80
 8001b24:	01db      	lsls	r3, r3, #7
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d106      	bne.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001b2a:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b2c:	68da      	ldr	r2, [r3, #12]
 8001b2e:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b30:	2180      	movs	r1, #128	; 0x80
 8001b32:	0249      	lsls	r1, r1, #9
 8001b34:	430a      	orrs	r2, r1
 8001b36:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001b38:	2312      	movs	r3, #18
 8001b3a:	18fb      	adds	r3, r7, r3
 8001b3c:	781b      	ldrb	r3, [r3, #0]
}
 8001b3e:	0018      	movs	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	b006      	add	sp, #24
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	46c0      	nop			; (mov r8, r8)
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	40007000 	.word	0x40007000
 8001b50:	fffffcff 	.word	0xfffffcff
 8001b54:	fffeffff 	.word	0xfffeffff
 8001b58:	00001388 	.word	0x00001388
 8001b5c:	efffffff 	.word	0xefffffff
 8001b60:	fffff3ff 	.word	0xfffff3ff
 8001b64:	fff3ffff 	.word	0xfff3ffff
 8001b68:	ffcfffff 	.word	0xffcfffff
 8001b6c:	ffffcfff 	.word	0xffffcfff
 8001b70:	ffbfffff 	.word	0xffbfffff
 8001b74:	feffffff 	.word	0xfeffffff
 8001b78:	ffff3fff 	.word	0xffff3fff

08001b7c <HAL_RCCEx_GetPeriphCLKConfig>:
  * @note (1) Peripheral is not available on all devices
  * @note (2) Peripheral clock selection is not available on all devices
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_I2S1 | \
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a3f      	ldr	r2, [pc, #252]	; (8001c84 <HAL_RCCEx_GetPeriphCLKConfig+0x108>)
 8001b88:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_ADC     | RCC_PERIPHCLK_RTC ;

#if defined(RCC_CCIPR_LPTIM1SEL) && defined(RCC_CCIPR_LPTIM2SEL)
  PeriphClkInit->PeriphClockSelection |=  RCC_PERIPHCLK_LPTIM2  | RCC_PERIPHCLK_LPTIM1;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	22c0      	movs	r2, #192	; 0xc0
 8001b90:	00d2      	lsls	r2, r2, #3
 8001b92:	431a      	orrs	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	601a      	str	r2, [r3, #0]
#endif /* RCC_CCIPR_LPTIM1SEL && RCC_CCIPR_LPTIM2SEL */
#if defined(RCC_CCIPR_RNGSEL)
  PeriphClkInit->PeriphClockSelection |=  RCC_PERIPHCLK_RNG;
#endif /* RCC_CCIPR_RNGSEL */
#if defined(RCC_CCIPR_LPUART1SEL)
  PeriphClkInit->PeriphClockSelection |=  RCC_PERIPHCLK_LPUART1;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2210      	movs	r2, #16
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	601a      	str	r2, [r3, #0]
#endif /* RCC_CCIPR_LPUART1SEL */
#if defined(RCC_CCIPR_LPUART2SEL)
  PeriphClkInit->PeriphClockSelection |=  RCC_PERIPHCLK_LPUART2;
#endif /* RCC_CCIPR_LPUART2SEL */
#if defined(RCC_CCIPR_CECSEL)
  PeriphClkInit->PeriphClockSelection |=  RCC_PERIPHCLK_CEC;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2280      	movs	r2, #128	; 0x80
 8001baa:	0312      	lsls	r2, r2, #12
 8001bac:	431a      	orrs	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	601a      	str	r2, [r3, #0]
#endif /* RCC_CCIPR_CECSEL */
#if defined(RCC_CCIPR_TIM1SEL)
  PeriphClkInit->PeriphClockSelection |=  RCC_PERIPHCLK_TIM1;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2280      	movs	r2, #128	; 0x80
 8001bb8:	0392      	lsls	r2, r2, #14
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	601a      	str	r2, [r3, #0]
#endif /* RCC_CCIPR_TIM1SEL */
#if defined(RCC_CCIPR_TIM15SEL)
  PeriphClkInit->PeriphClockSelection |=  RCC_PERIPHCLK_TIM15;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2280      	movs	r2, #128	; 0x80
 8001bc6:	03d2      	lsls	r2, r2, #15
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	601a      	str	r2, [r3, #0]
#endif /* RCC_CCIPR_TIM15SEL */
#if defined(RCC_CCIPR_USART2SEL)
  PeriphClkInit->PeriphClockSelection |=  RCC_PERIPHCLK_USART2;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	601a      	str	r2, [r3, #0]
#endif /* RCC_CCIPR2_USBSEL */
#if defined(RCC_CCIPR2_FDCANSEL)
  PeriphClkInit->PeriphClockSelection |=  RCC_PERIPHCLK_FDCAN;
#endif /* RCC_CCIPR_FDCANSEL */
  /* Get the USART1 clock source ---------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection  = __HAL_RCC_GET_USART1_SOURCE();
 8001bda:	4b2b      	ldr	r3, [pc, #172]	; (8001c88 <HAL_RCCEx_GetPeriphCLKConfig+0x10c>)
 8001bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bde:	2203      	movs	r2, #3
 8001be0:	401a      	ands	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	605a      	str	r2, [r3, #4]
#if defined(RCC_CCIPR_USART2SEL)
  /* Get the USART2 clock source ---------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection  = __HAL_RCC_GET_USART2_SOURCE();
 8001be6:	4b28      	ldr	r3, [pc, #160]	; (8001c88 <HAL_RCCEx_GetPeriphCLKConfig+0x10c>)
 8001be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bea:	220c      	movs	r2, #12
 8001bec:	401a      	ands	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	609a      	str	r2, [r3, #8]
  /* Get the USART3 clock source ---------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection  = __HAL_RCC_GET_USART3_SOURCE();
#endif /* RCC_CCIPR_USART3SEL */
#if defined(RCC_CCIPR_LPUART1SEL)
  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection = __HAL_RCC_GET_LPUART1_SOURCE();
 8001bf2:	4b25      	ldr	r3, [pc, #148]	; (8001c88 <HAL_RCCEx_GetPeriphCLKConfig+0x10c>)
 8001bf4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001bf6:	23c0      	movs	r3, #192	; 0xc0
 8001bf8:	011b      	lsls	r3, r3, #4
 8001bfa:	401a      	ands	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	60da      	str	r2, [r3, #12]
#if defined(RCC_CCIPR_LPUART2SEL)
  /* Get the LPUART2 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart2ClockSelection = __HAL_RCC_GET_LPUART2_SOURCE();
#endif /* RCC_CCIPR_LPUART2SEL */
  /* Get the I2C1 clock source -----------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection    = __HAL_RCC_GET_I2C1_SOURCE();
 8001c00:	4b21      	ldr	r3, [pc, #132]	; (8001c88 <HAL_RCCEx_GetPeriphCLKConfig+0x10c>)
 8001c02:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c04:	23c0      	movs	r3, #192	; 0xc0
 8001c06:	019b      	lsls	r3, r3, #6
 8001c08:	401a      	ands	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	611a      	str	r2, [r3, #16]
  /* Get the I2C2 clock source -----------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection    = __HAL_RCC_GET_I2C2_SOURCE();
#endif /* RCC_CCIPR_I2C2SEL */
#if defined(RCC_CCIPR_LPTIM1SEL)
  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection  = __HAL_RCC_GET_LPTIM1_SOURCE();
 8001c0e:	4b1e      	ldr	r3, [pc, #120]	; (8001c88 <HAL_RCCEx_GetPeriphCLKConfig+0x10c>)
 8001c10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c12:	23c0      	movs	r3, #192	; 0xc0
 8001c14:	031b      	lsls	r3, r3, #12
 8001c16:	401a      	ands	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	619a      	str	r2, [r3, #24]
#endif /* RCC_CCIPR_LPTIM1SEL */
#if defined(RCC_CCIPR_LPTIM2SEL)
  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection  = __HAL_RCC_GET_LPTIM2_SOURCE();
 8001c1c:	4b1a      	ldr	r3, [pc, #104]	; (8001c88 <HAL_RCCEx_GetPeriphCLKConfig+0x10c>)
 8001c1e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c20:	23c0      	movs	r3, #192	; 0xc0
 8001c22:	039b      	lsls	r3, r3, #14
 8001c24:	401a      	ands	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	61da      	str	r2, [r3, #28]
#endif /* RCC_CCIPR_LPTIM2SEL */
#if defined(RCC_CCIPR_TIM1SEL)
  /* Get the TIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Tim1ClockSelection  = __HAL_RCC_GET_TIM1_SOURCE();
 8001c2a:	4b17      	ldr	r3, [pc, #92]	; (8001c88 <HAL_RCCEx_GetPeriphCLKConfig+0x10c>)
 8001c2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c2e:	2380      	movs	r3, #128	; 0x80
 8001c30:	03db      	lsls	r3, r3, #15
 8001c32:	401a      	ands	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* RCC_CCIPR_TIM1SEL */
#if defined(RCC_CCIPR_TIM15SEL)
  /* Get the TIM15 clock source ---------------------------------------------*/
  PeriphClkInit->Tim15ClockSelection  = __HAL_RCC_GET_TIM15_SOURCE();
 8001c38:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <HAL_RCCEx_GetPeriphCLKConfig+0x10c>)
 8001c3a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c3c:	2380      	movs	r3, #128	; 0x80
 8001c3e:	045b      	lsls	r3, r3, #17
 8001c40:	401a      	ands	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* RCC_CCIPR_TIM15SEL */
  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection     = __HAL_RCC_GET_RTC_SOURCE();
 8001c46:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <HAL_RCCEx_GetPeriphCLKConfig+0x10c>)
 8001c48:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c4a:	23c0      	movs	r3, #192	; 0xc0
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	401a      	ands	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(RCC_CCIPR_RNGSEL)
  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection     = __HAL_RCC_GET_RNG_SOURCE();
#endif  /* RCC_CCIPR_RNGSEL */
  /* Get the ADC clock source -----------------------------------------------*/
  PeriphClkInit->AdcClockSelection     = __HAL_RCC_GET_ADC_SOURCE();
 8001c54:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <HAL_RCCEx_GetPeriphCLKConfig+0x10c>)
 8001c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c58:	0f9b      	lsrs	r3, r3, #30
 8001c5a:	079a      	lsls	r2, r3, #30
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	621a      	str	r2, [r3, #32]
#if defined(RCC_CCIPR_CECSEL)
  /* Get the CEC clock source -----------------------------------------------*/
  PeriphClkInit->CecClockSelection     = __HAL_RCC_GET_CEC_SOURCE();
 8001c60:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <HAL_RCCEx_GetPeriphCLKConfig+0x10c>)
 8001c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c64:	2240      	movs	r2, #64	; 0x40
 8001c66:	401a      	ands	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	625a      	str	r2, [r3, #36]	; 0x24
#if defined(RCC_CCIPR2_FDCANSEL)
  /* Get the FDCAN clock source -----------------------------------------------*/
  PeriphClkInit->FdcanClockSelection     = __HAL_RCC_GET_FDCAN_SOURCE();
#endif  /* RCC_CCIPR2_FDCANSEL */
  /* Get the I2S1 clock source -----------------------------------------------*/
  PeriphClkInit->I2s1ClockSelection    = __HAL_RCC_GET_I2S1_SOURCE();
 8001c6c:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <HAL_RCCEx_GetPeriphCLKConfig+0x10c>)
 8001c6e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c70:	23c0      	movs	r3, #192	; 0xc0
 8001c72:	021b      	lsls	r3, r3, #8
 8001c74:	401a      	ands	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	615a      	str	r2, [r3, #20]
#if defined(RCC_CCIPR2_I2S2SEL)
  /* Get the I2S2 clock source -----------------------------------------------*/
  PeriphClkInit->I2s2ClockSelection    = __HAL_RCC_GET_I2S2_SOURCE();
#endif /* RCC_CCIPR2_I2S2SEL */
}
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	b002      	add	sp, #8
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	46c0      	nop			; (mov r8, r8)
 8001c84:	00024821 	.word	0x00024821
 8001c88:	40021000 	.word	0x40021000

08001c8c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001c8c:	b5b0      	push	{r4, r5, r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001c94:	230f      	movs	r3, #15
 8001c96:	18fb      	adds	r3, r7, r3
 8001c98:	2201      	movs	r2, #1
 8001c9a:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d100      	bne.n	8001ca4 <HAL_RTC_Init+0x18>
 8001ca2:	e080      	b.n	8001da6 <HAL_RTC_Init+0x11a>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2229      	movs	r2, #41	; 0x29
 8001ca8:	5c9b      	ldrb	r3, [r3, r2]
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d10b      	bne.n	8001cc8 <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2228      	movs	r2, #40	; 0x28
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2288      	movs	r2, #136	; 0x88
 8001cbc:	0212      	lsls	r2, r2, #8
 8001cbe:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	f7fe fc66 	bl	8000594 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2229      	movs	r2, #41	; 0x29
 8001ccc:	2102      	movs	r1, #2
 8001cce:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	22ca      	movs	r2, #202	; 0xca
 8001cd6:	625a      	str	r2, [r3, #36]	; 0x24
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2253      	movs	r2, #83	; 0x53
 8001cde:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8001ce0:	250f      	movs	r5, #15
 8001ce2:	197c      	adds	r4, r7, r5
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	f000 fbef 	bl	80024ca <RTC_EnterInitMode>
 8001cec:	0003      	movs	r3, r0
 8001cee:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 8001cf0:	0028      	movs	r0, r5
 8001cf2:	183b      	adds	r3, r7, r0
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d148      	bne.n	8001d8c <HAL_RTC_Init+0x100>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	699a      	ldr	r2, [r3, #24]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	492b      	ldr	r1, [pc, #172]	; (8001db4 <HAL_RTC_Init+0x128>)
 8001d06:	400a      	ands	r2, r1
 8001d08:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6999      	ldr	r1, [r3, #24]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	695b      	ldr	r3, [r3, #20]
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	430a      	orrs	r2, r1
 8001d26:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	6912      	ldr	r2, [r2, #16]
 8001d30:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6919      	ldr	r1, [r3, #16]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	041a      	lsls	r2, r3, #16
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8001d46:	0005      	movs	r5, r0
 8001d48:	183c      	adds	r4, r7, r0
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	f000 fbff 	bl	8002550 <RTC_ExitInitMode>
 8001d52:	0003      	movs	r3, r0
 8001d54:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 8001d56:	197b      	adds	r3, r7, r5
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d116      	bne.n	8001d8c <HAL_RTC_Init+0x100>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	699a      	ldr	r2, [r3, #24]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	00d2      	lsls	r2, r2, #3
 8001d6a:	08d2      	lsrs	r2, r2, #3
 8001d6c:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6999      	ldr	r1, [r3, #24]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a1b      	ldr	r3, [r3, #32]
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	431a      	orrs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	22ff      	movs	r2, #255	; 0xff
 8001d92:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8001d94:	230f      	movs	r3, #15
 8001d96:	18fb      	adds	r3, r7, r3
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d103      	bne.n	8001da6 <HAL_RTC_Init+0x11a>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2229      	movs	r2, #41	; 0x29
 8001da2:	2101      	movs	r1, #1
 8001da4:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8001da6:	230f      	movs	r3, #15
 8001da8:	18fb      	adds	r3, r7, r3
 8001daa:	781b      	ldrb	r3, [r3, #0]
}
 8001dac:	0018      	movs	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	b004      	add	sp, #16
 8001db2:	bdb0      	pop	{r4, r5, r7, pc}
 8001db4:	fb8fffbf 	.word	0xfb8fffbf

08001db8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001db8:	b5b0      	push	{r4, r5, r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2228      	movs	r2, #40	; 0x28
 8001dc8:	5c9b      	ldrb	r3, [r3, r2]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d101      	bne.n	8001dd2 <HAL_RTC_SetTime+0x1a>
 8001dce:	2302      	movs	r3, #2
 8001dd0:	e092      	b.n	8001ef8 <HAL_RTC_SetTime+0x140>
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2228      	movs	r2, #40	; 0x28
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2229      	movs	r2, #41	; 0x29
 8001dde:	2102      	movs	r1, #2
 8001de0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	22ca      	movs	r2, #202	; 0xca
 8001de8:	625a      	str	r2, [r3, #36]	; 0x24
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2253      	movs	r2, #83	; 0x53
 8001df0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001df2:	2513      	movs	r5, #19
 8001df4:	197c      	adds	r4, r7, r5
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	0018      	movs	r0, r3
 8001dfa:	f000 fb66 	bl	80024ca <RTC_EnterInitMode>
 8001dfe:	0003      	movs	r3, r0
 8001e00:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8001e02:	197b      	adds	r3, r7, r5
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d162      	bne.n	8001ed0 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d125      	bne.n	8001e5c <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	2240      	movs	r2, #64	; 0x40
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d102      	bne.n	8001e22 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	0018      	movs	r0, r3
 8001e28:	f000 fbd6 	bl	80025d8 <RTC_ByteToBcd2>
 8001e2c:	0003      	movs	r3, r0
 8001e2e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	785b      	ldrb	r3, [r3, #1]
 8001e34:	0018      	movs	r0, r3
 8001e36:	f000 fbcf 	bl	80025d8 <RTC_ByteToBcd2>
 8001e3a:	0003      	movs	r3, r0
 8001e3c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001e3e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	789b      	ldrb	r3, [r3, #2]
 8001e44:	0018      	movs	r0, r3
 8001e46:	f000 fbc7 	bl	80025d8 <RTC_ByteToBcd2>
 8001e4a:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001e4c:	0022      	movs	r2, r4
 8001e4e:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	78db      	ldrb	r3, [r3, #3]
 8001e54:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001e56:	4313      	orrs	r3, r2
 8001e58:	617b      	str	r3, [r7, #20]
 8001e5a:	e017      	b.n	8001e8c <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	2240      	movs	r2, #64	; 0x40
 8001e64:	4013      	ands	r3, r2
 8001e66:	d102      	bne.n	8001e6e <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	785b      	ldrb	r3, [r3, #1]
 8001e78:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001e7a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8001e7c:	68ba      	ldr	r2, [r7, #8]
 8001e7e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001e80:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	78db      	ldrb	r3, [r3, #3]
 8001e86:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	491b      	ldr	r1, [pc, #108]	; (8001f00 <HAL_RTC_SetTime+0x148>)
 8001e94:	400a      	ands	r2, r1
 8001e96:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	699a      	ldr	r2, [r3, #24]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4918      	ldr	r1, [pc, #96]	; (8001f04 <HAL_RTC_SetTime+0x14c>)
 8001ea4:	400a      	ands	r2, r1
 8001ea6:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6999      	ldr	r1, [r3, #24]
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	68da      	ldr	r2, [r3, #12]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001ec0:	2313      	movs	r3, #19
 8001ec2:	18fc      	adds	r4, r7, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	f000 fb42 	bl	8002550 <RTC_ExitInitMode>
 8001ecc:	0003      	movs	r3, r0
 8001ece:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	22ff      	movs	r2, #255	; 0xff
 8001ed6:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8001ed8:	2313      	movs	r3, #19
 8001eda:	18fb      	adds	r3, r7, r3
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d103      	bne.n	8001eea <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2229      	movs	r2, #41	; 0x29
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2228      	movs	r2, #40	; 0x28
 8001eee:	2100      	movs	r1, #0
 8001ef0:	5499      	strb	r1, [r3, r2]

  return status;
 8001ef2:	2313      	movs	r3, #19
 8001ef4:	18fb      	adds	r3, r7, r3
 8001ef6:	781b      	ldrb	r3, [r3, #0]
}
 8001ef8:	0018      	movs	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	b006      	add	sp, #24
 8001efe:	bdb0      	pop	{r4, r5, r7, pc}
 8001f00:	007f7f7f 	.word	0x007f7f7f
 8001f04:	fffbffff 	.word	0xfffbffff

08001f08 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	045b      	lsls	r3, r3, #17
 8001f26:	0c5a      	lsrs	r2, r3, #17
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a22      	ldr	r2, [pc, #136]	; (8001fbc <HAL_RTC_GetTime+0xb4>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	223f      	movs	r2, #63	; 0x3f
 8001f40:	4013      	ands	r3, r2
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	0a1b      	lsrs	r3, r3, #8
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	227f      	movs	r2, #127	; 0x7f
 8001f50:	4013      	ands	r3, r2
 8001f52:	b2da      	uxtb	r2, r3
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	227f      	movs	r2, #127	; 0x7f
 8001f5e:	4013      	ands	r3, r2
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	0d9b      	lsrs	r3, r3, #22
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	4013      	ands	r3, r2
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d11a      	bne.n	8001fb2 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	0018      	movs	r0, r3
 8001f82:	f000 fb51 	bl	8002628 <RTC_Bcd2ToByte>
 8001f86:	0003      	movs	r3, r0
 8001f88:	001a      	movs	r2, r3
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	785b      	ldrb	r3, [r3, #1]
 8001f92:	0018      	movs	r0, r3
 8001f94:	f000 fb48 	bl	8002628 <RTC_Bcd2ToByte>
 8001f98:	0003      	movs	r3, r0
 8001f9a:	001a      	movs	r2, r3
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	789b      	ldrb	r3, [r3, #2]
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	f000 fb3f 	bl	8002628 <RTC_Bcd2ToByte>
 8001faa:	0003      	movs	r3, r0
 8001fac:	001a      	movs	r2, r3
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	b006      	add	sp, #24
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	007f7f7f 	.word	0x007f7f7f

08001fc0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001fc0:	b5b0      	push	{r4, r5, r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2228      	movs	r2, #40	; 0x28
 8001fd0:	5c9b      	ldrb	r3, [r3, r2]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d101      	bne.n	8001fda <HAL_RTC_SetDate+0x1a>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	e07e      	b.n	80020d8 <HAL_RTC_SetDate+0x118>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2228      	movs	r2, #40	; 0x28
 8001fde:	2101      	movs	r1, #1
 8001fe0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2229      	movs	r2, #41	; 0x29
 8001fe6:	2102      	movs	r1, #2
 8001fe8:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d10e      	bne.n	800200e <HAL_RTC_SetDate+0x4e>
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	785b      	ldrb	r3, [r3, #1]
 8001ff4:	001a      	movs	r2, r3
 8001ff6:	2310      	movs	r3, #16
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d008      	beq.n	800200e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	785b      	ldrb	r3, [r3, #1]
 8002000:	2210      	movs	r2, #16
 8002002:	4393      	bics	r3, r2
 8002004:	b2db      	uxtb	r3, r3
 8002006:	330a      	adds	r3, #10
 8002008:	b2da      	uxtb	r2, r3
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d11c      	bne.n	800204e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	78db      	ldrb	r3, [r3, #3]
 8002018:	0018      	movs	r0, r3
 800201a:	f000 fadd 	bl	80025d8 <RTC_ByteToBcd2>
 800201e:	0003      	movs	r3, r0
 8002020:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	785b      	ldrb	r3, [r3, #1]
 8002026:	0018      	movs	r0, r3
 8002028:	f000 fad6 	bl	80025d8 <RTC_ByteToBcd2>
 800202c:	0003      	movs	r3, r0
 800202e:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002030:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	789b      	ldrb	r3, [r3, #2]
 8002036:	0018      	movs	r0, r3
 8002038:	f000 face 	bl	80025d8 <RTC_ByteToBcd2>
 800203c:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800203e:	0022      	movs	r2, r4
 8002040:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002048:	4313      	orrs	r3, r2
 800204a:	617b      	str	r3, [r7, #20]
 800204c:	e00e      	b.n	800206c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	78db      	ldrb	r3, [r3, #3]
 8002052:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	785b      	ldrb	r3, [r3, #1]
 8002058:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800205a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 800205c:	68ba      	ldr	r2, [r7, #8]
 800205e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002060:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002068:	4313      	orrs	r3, r2
 800206a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	22ca      	movs	r2, #202	; 0xca
 8002072:	625a      	str	r2, [r3, #36]	; 0x24
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2253      	movs	r2, #83	; 0x53
 800207a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800207c:	2513      	movs	r5, #19
 800207e:	197c      	adds	r4, r7, r5
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	0018      	movs	r0, r3
 8002084:	f000 fa21 	bl	80024ca <RTC_EnterInitMode>
 8002088:	0003      	movs	r3, r0
 800208a:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800208c:	0028      	movs	r0, r5
 800208e:	183b      	adds	r3, r7, r0
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10c      	bne.n	80020b0 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	4910      	ldr	r1, [pc, #64]	; (80020e0 <HAL_RTC_SetDate+0x120>)
 800209e:	400a      	ands	r2, r1
 80020a0:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80020a2:	183c      	adds	r4, r7, r0
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	0018      	movs	r0, r3
 80020a8:	f000 fa52 	bl	8002550 <RTC_ExitInitMode>
 80020ac:	0003      	movs	r3, r0
 80020ae:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	22ff      	movs	r2, #255	; 0xff
 80020b6:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80020b8:	2313      	movs	r3, #19
 80020ba:	18fb      	adds	r3, r7, r3
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d103      	bne.n	80020ca <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2229      	movs	r2, #41	; 0x29
 80020c6:	2101      	movs	r1, #1
 80020c8:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2228      	movs	r2, #40	; 0x28
 80020ce:	2100      	movs	r1, #0
 80020d0:	5499      	strb	r1, [r3, r2]

  return status;
 80020d2:	2313      	movs	r3, #19
 80020d4:	18fb      	adds	r3, r7, r3
 80020d6:	781b      	ldrb	r3, [r3, #0]
}
 80020d8:	0018      	movs	r0, r3
 80020da:	46bd      	mov	sp, r7
 80020dc:	b006      	add	sp, #24
 80020de:	bdb0      	pop	{r4, r5, r7, pc}
 80020e0:	00ffff3f 	.word	0x00ffff3f

080020e4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	4a21      	ldr	r2, [pc, #132]	; (800217c <HAL_RTC_GetDate+0x98>)
 80020f8:	4013      	ands	r3, r2
 80020fa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	0c1b      	lsrs	r3, r3, #16
 8002100:	b2da      	uxtb	r2, r3
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	0a1b      	lsrs	r3, r3, #8
 800210a:	b2db      	uxtb	r3, r3
 800210c:	221f      	movs	r2, #31
 800210e:	4013      	ands	r3, r2
 8002110:	b2da      	uxtb	r2, r3
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	b2db      	uxtb	r3, r3
 800211a:	223f      	movs	r2, #63	; 0x3f
 800211c:	4013      	ands	r3, r2
 800211e:	b2da      	uxtb	r2, r3
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	0b5b      	lsrs	r3, r3, #13
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2207      	movs	r2, #7
 800212c:	4013      	ands	r3, r2
 800212e:	b2da      	uxtb	r2, r3
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d11a      	bne.n	8002170 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	78db      	ldrb	r3, [r3, #3]
 800213e:	0018      	movs	r0, r3
 8002140:	f000 fa72 	bl	8002628 <RTC_Bcd2ToByte>
 8002144:	0003      	movs	r3, r0
 8002146:	001a      	movs	r2, r3
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	785b      	ldrb	r3, [r3, #1]
 8002150:	0018      	movs	r0, r3
 8002152:	f000 fa69 	bl	8002628 <RTC_Bcd2ToByte>
 8002156:	0003      	movs	r3, r0
 8002158:	001a      	movs	r2, r3
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	789b      	ldrb	r3, [r3, #2]
 8002162:	0018      	movs	r0, r3
 8002164:	f000 fa60 	bl	8002628 <RTC_Bcd2ToByte>
 8002168:	0003      	movs	r3, r0
 800216a:	001a      	movs	r2, r3
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	0018      	movs	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	b006      	add	sp, #24
 8002178:	bd80      	pop	{r7, pc}
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	00ffff3f 	.word	0x00ffff3f

08002180 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002180:	b590      	push	{r4, r7, lr}
 8002182:	b089      	sub	sp, #36	; 0x24
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2228      	movs	r2, #40	; 0x28
 8002190:	5c9b      	ldrb	r3, [r3, r2]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d101      	bne.n	800219a <HAL_RTC_SetAlarm_IT+0x1a>
 8002196:	2302      	movs	r3, #2
 8002198:	e127      	b.n	80023ea <HAL_RTC_SetAlarm_IT+0x26a>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2228      	movs	r2, #40	; 0x28
 800219e:	2101      	movs	r1, #1
 80021a0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2229      	movs	r2, #41	; 0x29
 80021a6:	2102      	movs	r1, #2
 80021a8:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d136      	bne.n	800221e <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	2240      	movs	r2, #64	; 0x40
 80021b8:	4013      	ands	r3, r2
 80021ba:	d102      	bne.n	80021c2 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2200      	movs	r2, #0
 80021c0:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	0018      	movs	r0, r3
 80021c8:	f000 fa06 	bl	80025d8 <RTC_ByteToBcd2>
 80021cc:	0003      	movs	r3, r0
 80021ce:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	785b      	ldrb	r3, [r3, #1]
 80021d4:	0018      	movs	r0, r3
 80021d6:	f000 f9ff 	bl	80025d8 <RTC_ByteToBcd2>
 80021da:	0003      	movs	r3, r0
 80021dc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80021de:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	789b      	ldrb	r3, [r3, #2]
 80021e4:	0018      	movs	r0, r3
 80021e6:	f000 f9f7 	bl	80025d8 <RTC_ByteToBcd2>
 80021ea:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80021ec:	0022      	movs	r2, r4
 80021ee:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	78db      	ldrb	r3, [r3, #3]
 80021f4:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80021f6:	431a      	orrs	r2, r3
 80021f8:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	2220      	movs	r2, #32
 80021fe:	5c9b      	ldrb	r3, [r3, r2]
 8002200:	0018      	movs	r0, r3
 8002202:	f000 f9e9 	bl	80025d8 <RTC_ByteToBcd2>
 8002206:	0003      	movs	r3, r0
 8002208:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800220a:	0022      	movs	r2, r4
 800220c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002212:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002218:	4313      	orrs	r3, r2
 800221a:	61fb      	str	r3, [r7, #28]
 800221c:	e022      	b.n	8002264 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	2240      	movs	r2, #64	; 0x40
 8002226:	4013      	ands	r3, r2
 8002228:	d102      	bne.n	8002230 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	2200      	movs	r2, #0
 800222e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	785b      	ldrb	r3, [r3, #1]
 800223a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800223c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002242:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	78db      	ldrb	r3, [r3, #3]
 8002248:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800224a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	2120      	movs	r1, #32
 8002250:	5c5b      	ldrb	r3, [r3, r1]
 8002252:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002254:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800225a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002260:	4313      	orrs	r3, r2
 8002262:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	22ca      	movs	r2, #202	; 0xca
 8002276:	625a      	str	r2, [r3, #36]	; 0x24
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2253      	movs	r2, #83	; 0x53
 800227e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002284:	2380      	movs	r3, #128	; 0x80
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	429a      	cmp	r2, r3
 800228a:	d14c      	bne.n	8002326 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	699a      	ldr	r2, [r3, #24]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4957      	ldr	r1, [pc, #348]	; (80023f4 <HAL_RTC_SetAlarm_IT+0x274>)
 8002298:	400a      	ands	r2, r1
 800229a:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2101      	movs	r1, #1
 80022a8:	430a      	orrs	r2, r1
 80022aa:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 80022ac:	f7fe fb3e 	bl	800092c <HAL_GetTick>
 80022b0:	0003      	movs	r3, r0
 80022b2:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80022b4:	e016      	b.n	80022e4 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80022b6:	f7fe fb39 	bl	800092c <HAL_GetTick>
 80022ba:	0002      	movs	r2, r0
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	1ad2      	subs	r2, r2, r3
 80022c0:	23fa      	movs	r3, #250	; 0xfa
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d90d      	bls.n	80022e4 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	22ff      	movs	r2, #255	; 0xff
 80022ce:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2229      	movs	r2, #41	; 0x29
 80022d4:	2103      	movs	r1, #3
 80022d6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2228      	movs	r2, #40	; 0x28
 80022dc:	2100      	movs	r1, #0
 80022de:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e082      	b.n	80023ea <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	2201      	movs	r2, #1
 80022ec:	4013      	ands	r3, r2
 80022ee:	d0e2      	beq.n	80022b6 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	69fa      	ldr	r2, [r7, #28]
 80022f6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	699a      	ldr	r2, [r3, #24]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2180      	movs	r1, #128	; 0x80
 800230c:	0049      	lsls	r1, r1, #1
 800230e:	430a      	orrs	r2, r1
 8002310:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	699a      	ldr	r2, [r3, #24]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2180      	movs	r1, #128	; 0x80
 800231e:	0149      	lsls	r1, r1, #5
 8002320:	430a      	orrs	r2, r1
 8002322:	619a      	str	r2, [r3, #24]
 8002324:	e04b      	b.n	80023be <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	699a      	ldr	r2, [r3, #24]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4931      	ldr	r1, [pc, #196]	; (80023f8 <HAL_RTC_SetAlarm_IT+0x278>)
 8002332:	400a      	ands	r2, r1
 8002334:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2102      	movs	r1, #2
 8002342:	430a      	orrs	r2, r1
 8002344:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8002346:	f7fe faf1 	bl	800092c <HAL_GetTick>
 800234a:	0003      	movs	r3, r0
 800234c:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800234e:	e016      	b.n	800237e <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002350:	f7fe faec 	bl	800092c <HAL_GetTick>
 8002354:	0002      	movs	r2, r0
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	1ad2      	subs	r2, r2, r3
 800235a:	23fa      	movs	r3, #250	; 0xfa
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	429a      	cmp	r2, r3
 8002360:	d90d      	bls.n	800237e <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	22ff      	movs	r2, #255	; 0xff
 8002368:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2229      	movs	r2, #41	; 0x29
 800236e:	2103      	movs	r1, #3
 8002370:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2228      	movs	r2, #40	; 0x28
 8002376:	2100      	movs	r1, #0
 8002378:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e035      	b.n	80023ea <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	2202      	movs	r2, #2
 8002386:	4013      	ands	r3, r2
 8002388:	d0e2      	beq.n	8002350 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	69fa      	ldr	r2, [r7, #28]
 8002390:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	699a      	ldr	r2, [r3, #24]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2180      	movs	r1, #128	; 0x80
 80023a6:	0089      	lsls	r1, r1, #2
 80023a8:	430a      	orrs	r2, r1
 80023aa:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	699a      	ldr	r2, [r3, #24]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2180      	movs	r1, #128	; 0x80
 80023b8:	0189      	lsls	r1, r1, #6
 80023ba:	430a      	orrs	r2, r1
 80023bc:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80023be:	4a0f      	ldr	r2, [pc, #60]	; (80023fc <HAL_RTC_SetAlarm_IT+0x27c>)
 80023c0:	2380      	movs	r3, #128	; 0x80
 80023c2:	58d3      	ldr	r3, [r2, r3]
 80023c4:	490d      	ldr	r1, [pc, #52]	; (80023fc <HAL_RTC_SetAlarm_IT+0x27c>)
 80023c6:	2280      	movs	r2, #128	; 0x80
 80023c8:	0312      	lsls	r2, r2, #12
 80023ca:	4313      	orrs	r3, r2
 80023cc:	2280      	movs	r2, #128	; 0x80
 80023ce:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	22ff      	movs	r2, #255	; 0xff
 80023d6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2229      	movs	r2, #41	; 0x29
 80023dc:	2101      	movs	r1, #1
 80023de:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2228      	movs	r2, #40	; 0x28
 80023e4:	2100      	movs	r1, #0
 80023e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	0018      	movs	r0, r3
 80023ec:	46bd      	mov	sp, r7
 80023ee:	b009      	add	sp, #36	; 0x24
 80023f0:	bd90      	pop	{r4, r7, pc}
 80023f2:	46c0      	nop			; (mov r8, r8)
 80023f4:	fffffeff 	.word	0xfffffeff
 80023f8:	fffffdff 	.word	0xfffffdff
 80023fc:	40021800 	.word	0x40021800

08002400 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	699a      	ldr	r2, [r3, #24]
 800240e:	2380      	movs	r3, #128	; 0x80
 8002410:	015b      	lsls	r3, r3, #5
 8002412:	4013      	ands	r3, r2
 8002414:	d011      	beq.n	800243a <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800241c:	2201      	movs	r2, #1
 800241e:	4013      	ands	r3, r2
 8002420:	d00b      	beq.n	800243a <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2101      	movs	r1, #1
 800242e:	430a      	orrs	r2, r1
 8002430:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	0018      	movs	r0, r3
 8002436:	f7fe f83d 	bl	80004b4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	699a      	ldr	r2, [r3, #24]
 8002440:	2380      	movs	r3, #128	; 0x80
 8002442:	019b      	lsls	r3, r3, #6
 8002444:	4013      	ands	r3, r2
 8002446:	d011      	beq.n	800246c <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800244e:	2202      	movs	r2, #2
 8002450:	4013      	ands	r3, r2
 8002452:	d00b      	beq.n	800246c <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2102      	movs	r1, #2
 8002460:	430a      	orrs	r2, r1
 8002462:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	0018      	movs	r0, r3
 8002468:	f000 f8fb 	bl	8002662 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2229      	movs	r2, #41	; 0x29
 8002470:	2101      	movs	r1, #1
 8002472:	5499      	strb	r1, [r3, r2]
}
 8002474:	46c0      	nop			; (mov r8, r8)
 8002476:	46bd      	mov	sp, r7
 8002478:	b002      	add	sp, #8
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	21a0      	movs	r1, #160	; 0xa0
 8002490:	438a      	bics	r2, r1
 8002492:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002494:	f7fe fa4a 	bl	800092c <HAL_GetTick>
 8002498:	0003      	movs	r3, r0
 800249a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800249c:	e00a      	b.n	80024b4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800249e:	f7fe fa45 	bl	800092c <HAL_GetTick>
 80024a2:	0002      	movs	r2, r0
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	1ad2      	subs	r2, r2, r3
 80024a8:	23fa      	movs	r3, #250	; 0xfa
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d901      	bls.n	80024b4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e006      	b.n	80024c2 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	2220      	movs	r2, #32
 80024bc:	4013      	ands	r3, r2
 80024be:	d0ee      	beq.n	800249e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	0018      	movs	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	b004      	add	sp, #16
 80024c8:	bd80      	pop	{r7, pc}

080024ca <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b084      	sub	sp, #16
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80024d2:	230f      	movs	r3, #15
 80024d4:	18fb      	adds	r3, r7, r3
 80024d6:	2200      	movs	r2, #0
 80024d8:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	2240      	movs	r2, #64	; 0x40
 80024e2:	4013      	ands	r3, r2
 80024e4:	d12c      	bne.n	8002540 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2180      	movs	r1, #128	; 0x80
 80024f2:	430a      	orrs	r2, r1
 80024f4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80024f6:	f7fe fa19 	bl	800092c <HAL_GetTick>
 80024fa:	0003      	movs	r3, r0
 80024fc:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80024fe:	e014      	b.n	800252a <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002500:	f7fe fa14 	bl	800092c <HAL_GetTick>
 8002504:	0002      	movs	r2, r0
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	1ad2      	subs	r2, r2, r3
 800250a:	200f      	movs	r0, #15
 800250c:	183b      	adds	r3, r7, r0
 800250e:	1839      	adds	r1, r7, r0
 8002510:	7809      	ldrb	r1, [r1, #0]
 8002512:	7019      	strb	r1, [r3, #0]
 8002514:	23fa      	movs	r3, #250	; 0xfa
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	429a      	cmp	r2, r3
 800251a:	d906      	bls.n	800252a <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800251c:	183b      	adds	r3, r7, r0
 800251e:	2203      	movs	r2, #3
 8002520:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2229      	movs	r2, #41	; 0x29
 8002526:	2103      	movs	r1, #3
 8002528:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	2240      	movs	r2, #64	; 0x40
 8002532:	4013      	ands	r3, r2
 8002534:	d104      	bne.n	8002540 <RTC_EnterInitMode+0x76>
 8002536:	230f      	movs	r3, #15
 8002538:	18fb      	adds	r3, r7, r3
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b03      	cmp	r3, #3
 800253e:	d1df      	bne.n	8002500 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002540:	230f      	movs	r3, #15
 8002542:	18fb      	adds	r3, r7, r3
 8002544:	781b      	ldrb	r3, [r3, #0]
}
 8002546:	0018      	movs	r0, r3
 8002548:	46bd      	mov	sp, r7
 800254a:	b004      	add	sp, #16
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002550:	b590      	push	{r4, r7, lr}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002558:	240f      	movs	r4, #15
 800255a:	193b      	adds	r3, r7, r4
 800255c:	2200      	movs	r2, #0
 800255e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002560:	4b1c      	ldr	r3, [pc, #112]	; (80025d4 <RTC_ExitInitMode+0x84>)
 8002562:	68da      	ldr	r2, [r3, #12]
 8002564:	4b1b      	ldr	r3, [pc, #108]	; (80025d4 <RTC_ExitInitMode+0x84>)
 8002566:	2180      	movs	r1, #128	; 0x80
 8002568:	438a      	bics	r2, r1
 800256a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800256c:	4b19      	ldr	r3, [pc, #100]	; (80025d4 <RTC_ExitInitMode+0x84>)
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	2220      	movs	r2, #32
 8002572:	4013      	ands	r3, r2
 8002574:	d10d      	bne.n	8002592 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	0018      	movs	r0, r3
 800257a:	f7ff ff7f 	bl	800247c <HAL_RTC_WaitForSynchro>
 800257e:	1e03      	subs	r3, r0, #0
 8002580:	d021      	beq.n	80025c6 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2229      	movs	r2, #41	; 0x29
 8002586:	2103      	movs	r1, #3
 8002588:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800258a:	193b      	adds	r3, r7, r4
 800258c:	2203      	movs	r2, #3
 800258e:	701a      	strb	r2, [r3, #0]
 8002590:	e019      	b.n	80025c6 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002592:	4b10      	ldr	r3, [pc, #64]	; (80025d4 <RTC_ExitInitMode+0x84>)
 8002594:	699a      	ldr	r2, [r3, #24]
 8002596:	4b0f      	ldr	r3, [pc, #60]	; (80025d4 <RTC_ExitInitMode+0x84>)
 8002598:	2120      	movs	r1, #32
 800259a:	438a      	bics	r2, r1
 800259c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	0018      	movs	r0, r3
 80025a2:	f7ff ff6b 	bl	800247c <HAL_RTC_WaitForSynchro>
 80025a6:	1e03      	subs	r3, r0, #0
 80025a8:	d007      	beq.n	80025ba <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2229      	movs	r2, #41	; 0x29
 80025ae:	2103      	movs	r1, #3
 80025b0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80025b2:	230f      	movs	r3, #15
 80025b4:	18fb      	adds	r3, r7, r3
 80025b6:	2203      	movs	r2, #3
 80025b8:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80025ba:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <RTC_ExitInitMode+0x84>)
 80025bc:	699a      	ldr	r2, [r3, #24]
 80025be:	4b05      	ldr	r3, [pc, #20]	; (80025d4 <RTC_ExitInitMode+0x84>)
 80025c0:	2120      	movs	r1, #32
 80025c2:	430a      	orrs	r2, r1
 80025c4:	619a      	str	r2, [r3, #24]
  }

  return status;
 80025c6:	230f      	movs	r3, #15
 80025c8:	18fb      	adds	r3, r7, r3
 80025ca:	781b      	ldrb	r3, [r3, #0]
}
 80025cc:	0018      	movs	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	b005      	add	sp, #20
 80025d2:	bd90      	pop	{r4, r7, pc}
 80025d4:	40002800 	.word	0x40002800

080025d8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	0002      	movs	r2, r0
 80025e0:	1dfb      	adds	r3, r7, #7
 80025e2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80025e8:	230b      	movs	r3, #11
 80025ea:	18fb      	adds	r3, r7, r3
 80025ec:	1dfa      	adds	r2, r7, #7
 80025ee:	7812      	ldrb	r2, [r2, #0]
 80025f0:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80025f2:	e008      	b.n	8002606 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	3301      	adds	r3, #1
 80025f8:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80025fa:	220b      	movs	r2, #11
 80025fc:	18bb      	adds	r3, r7, r2
 80025fe:	18ba      	adds	r2, r7, r2
 8002600:	7812      	ldrb	r2, [r2, #0]
 8002602:	3a0a      	subs	r2, #10
 8002604:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8002606:	210b      	movs	r1, #11
 8002608:	187b      	adds	r3, r7, r1
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b09      	cmp	r3, #9
 800260e:	d8f1      	bhi.n	80025f4 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	b2db      	uxtb	r3, r3
 8002614:	011b      	lsls	r3, r3, #4
 8002616:	b2da      	uxtb	r2, r3
 8002618:	187b      	adds	r3, r7, r1
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	4313      	orrs	r3, r2
 800261e:	b2db      	uxtb	r3, r3
}
 8002620:	0018      	movs	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	b004      	add	sp, #16
 8002626:	bd80      	pop	{r7, pc}

08002628 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	0002      	movs	r2, r0
 8002630:	1dfb      	adds	r3, r7, #7
 8002632:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8002634:	1dfb      	adds	r3, r7, #7
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	091b      	lsrs	r3, r3, #4
 800263a:	b2db      	uxtb	r3, r3
 800263c:	001a      	movs	r2, r3
 800263e:	0013      	movs	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	189b      	adds	r3, r3, r2
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	b2da      	uxtb	r2, r3
 800264c:	1dfb      	adds	r3, r7, #7
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	210f      	movs	r1, #15
 8002652:	400b      	ands	r3, r1
 8002654:	b2db      	uxtb	r3, r3
 8002656:	18d3      	adds	r3, r2, r3
 8002658:	b2db      	uxtb	r3, r3
}
 800265a:	0018      	movs	r0, r3
 800265c:	46bd      	mov	sp, r7
 800265e:	b004      	add	sp, #16
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b082      	sub	sp, #8
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	46bd      	mov	sp, r7
 800266e:	b002      	add	sp, #8
 8002670:	bd80      	pop	{r7, pc}
	...

08002674 <__errno>:
 8002674:	4b01      	ldr	r3, [pc, #4]	; (800267c <__errno+0x8>)
 8002676:	6818      	ldr	r0, [r3, #0]
 8002678:	4770      	bx	lr
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	20000024 	.word	0x20000024

08002680 <__libc_init_array>:
 8002680:	b570      	push	{r4, r5, r6, lr}
 8002682:	2600      	movs	r6, #0
 8002684:	4d0c      	ldr	r5, [pc, #48]	; (80026b8 <__libc_init_array+0x38>)
 8002686:	4c0d      	ldr	r4, [pc, #52]	; (80026bc <__libc_init_array+0x3c>)
 8002688:	1b64      	subs	r4, r4, r5
 800268a:	10a4      	asrs	r4, r4, #2
 800268c:	42a6      	cmp	r6, r4
 800268e:	d109      	bne.n	80026a4 <__libc_init_array+0x24>
 8002690:	2600      	movs	r6, #0
 8002692:	f000 fc8b 	bl	8002fac <_init>
 8002696:	4d0a      	ldr	r5, [pc, #40]	; (80026c0 <__libc_init_array+0x40>)
 8002698:	4c0a      	ldr	r4, [pc, #40]	; (80026c4 <__libc_init_array+0x44>)
 800269a:	1b64      	subs	r4, r4, r5
 800269c:	10a4      	asrs	r4, r4, #2
 800269e:	42a6      	cmp	r6, r4
 80026a0:	d105      	bne.n	80026ae <__libc_init_array+0x2e>
 80026a2:	bd70      	pop	{r4, r5, r6, pc}
 80026a4:	00b3      	lsls	r3, r6, #2
 80026a6:	58eb      	ldr	r3, [r5, r3]
 80026a8:	4798      	blx	r3
 80026aa:	3601      	adds	r6, #1
 80026ac:	e7ee      	b.n	800268c <__libc_init_array+0xc>
 80026ae:	00b3      	lsls	r3, r6, #2
 80026b0:	58eb      	ldr	r3, [r5, r3]
 80026b2:	4798      	blx	r3
 80026b4:	3601      	adds	r6, #1
 80026b6:	e7f2      	b.n	800269e <__libc_init_array+0x1e>
 80026b8:	08003048 	.word	0x08003048
 80026bc:	08003048 	.word	0x08003048
 80026c0:	08003048 	.word	0x08003048
 80026c4:	0800304c 	.word	0x0800304c

080026c8 <memset>:
 80026c8:	0003      	movs	r3, r0
 80026ca:	1882      	adds	r2, r0, r2
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d100      	bne.n	80026d2 <memset+0xa>
 80026d0:	4770      	bx	lr
 80026d2:	7019      	strb	r1, [r3, #0]
 80026d4:	3301      	adds	r3, #1
 80026d6:	e7f9      	b.n	80026cc <memset+0x4>

080026d8 <siprintf>:
 80026d8:	b40e      	push	{r1, r2, r3}
 80026da:	b500      	push	{lr}
 80026dc:	490b      	ldr	r1, [pc, #44]	; (800270c <siprintf+0x34>)
 80026de:	b09c      	sub	sp, #112	; 0x70
 80026e0:	ab1d      	add	r3, sp, #116	; 0x74
 80026e2:	9002      	str	r0, [sp, #8]
 80026e4:	9006      	str	r0, [sp, #24]
 80026e6:	9107      	str	r1, [sp, #28]
 80026e8:	9104      	str	r1, [sp, #16]
 80026ea:	4809      	ldr	r0, [pc, #36]	; (8002710 <siprintf+0x38>)
 80026ec:	4909      	ldr	r1, [pc, #36]	; (8002714 <siprintf+0x3c>)
 80026ee:	cb04      	ldmia	r3!, {r2}
 80026f0:	9105      	str	r1, [sp, #20]
 80026f2:	6800      	ldr	r0, [r0, #0]
 80026f4:	a902      	add	r1, sp, #8
 80026f6:	9301      	str	r3, [sp, #4]
 80026f8:	f000 f870 	bl	80027dc <_svfiprintf_r>
 80026fc:	2300      	movs	r3, #0
 80026fe:	9a02      	ldr	r2, [sp, #8]
 8002700:	7013      	strb	r3, [r2, #0]
 8002702:	b01c      	add	sp, #112	; 0x70
 8002704:	bc08      	pop	{r3}
 8002706:	b003      	add	sp, #12
 8002708:	4718      	bx	r3
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	7fffffff 	.word	0x7fffffff
 8002710:	20000024 	.word	0x20000024
 8002714:	ffff0208 	.word	0xffff0208

08002718 <__ssputs_r>:
 8002718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800271a:	688e      	ldr	r6, [r1, #8]
 800271c:	b085      	sub	sp, #20
 800271e:	0007      	movs	r7, r0
 8002720:	000c      	movs	r4, r1
 8002722:	9203      	str	r2, [sp, #12]
 8002724:	9301      	str	r3, [sp, #4]
 8002726:	429e      	cmp	r6, r3
 8002728:	d83c      	bhi.n	80027a4 <__ssputs_r+0x8c>
 800272a:	2390      	movs	r3, #144	; 0x90
 800272c:	898a      	ldrh	r2, [r1, #12]
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	421a      	tst	r2, r3
 8002732:	d034      	beq.n	800279e <__ssputs_r+0x86>
 8002734:	6909      	ldr	r1, [r1, #16]
 8002736:	6823      	ldr	r3, [r4, #0]
 8002738:	6960      	ldr	r0, [r4, #20]
 800273a:	1a5b      	subs	r3, r3, r1
 800273c:	9302      	str	r3, [sp, #8]
 800273e:	2303      	movs	r3, #3
 8002740:	4343      	muls	r3, r0
 8002742:	0fdd      	lsrs	r5, r3, #31
 8002744:	18ed      	adds	r5, r5, r3
 8002746:	9b01      	ldr	r3, [sp, #4]
 8002748:	9802      	ldr	r0, [sp, #8]
 800274a:	3301      	adds	r3, #1
 800274c:	181b      	adds	r3, r3, r0
 800274e:	106d      	asrs	r5, r5, #1
 8002750:	42ab      	cmp	r3, r5
 8002752:	d900      	bls.n	8002756 <__ssputs_r+0x3e>
 8002754:	001d      	movs	r5, r3
 8002756:	0553      	lsls	r3, r2, #21
 8002758:	d532      	bpl.n	80027c0 <__ssputs_r+0xa8>
 800275a:	0029      	movs	r1, r5
 800275c:	0038      	movs	r0, r7
 800275e:	f000 fb53 	bl	8002e08 <_malloc_r>
 8002762:	1e06      	subs	r6, r0, #0
 8002764:	d109      	bne.n	800277a <__ssputs_r+0x62>
 8002766:	230c      	movs	r3, #12
 8002768:	603b      	str	r3, [r7, #0]
 800276a:	2340      	movs	r3, #64	; 0x40
 800276c:	2001      	movs	r0, #1
 800276e:	89a2      	ldrh	r2, [r4, #12]
 8002770:	4240      	negs	r0, r0
 8002772:	4313      	orrs	r3, r2
 8002774:	81a3      	strh	r3, [r4, #12]
 8002776:	b005      	add	sp, #20
 8002778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800277a:	9a02      	ldr	r2, [sp, #8]
 800277c:	6921      	ldr	r1, [r4, #16]
 800277e:	f000 faba 	bl	8002cf6 <memcpy>
 8002782:	89a3      	ldrh	r3, [r4, #12]
 8002784:	4a14      	ldr	r2, [pc, #80]	; (80027d8 <__ssputs_r+0xc0>)
 8002786:	401a      	ands	r2, r3
 8002788:	2380      	movs	r3, #128	; 0x80
 800278a:	4313      	orrs	r3, r2
 800278c:	81a3      	strh	r3, [r4, #12]
 800278e:	9b02      	ldr	r3, [sp, #8]
 8002790:	6126      	str	r6, [r4, #16]
 8002792:	18f6      	adds	r6, r6, r3
 8002794:	6026      	str	r6, [r4, #0]
 8002796:	6165      	str	r5, [r4, #20]
 8002798:	9e01      	ldr	r6, [sp, #4]
 800279a:	1aed      	subs	r5, r5, r3
 800279c:	60a5      	str	r5, [r4, #8]
 800279e:	9b01      	ldr	r3, [sp, #4]
 80027a0:	429e      	cmp	r6, r3
 80027a2:	d900      	bls.n	80027a6 <__ssputs_r+0x8e>
 80027a4:	9e01      	ldr	r6, [sp, #4]
 80027a6:	0032      	movs	r2, r6
 80027a8:	9903      	ldr	r1, [sp, #12]
 80027aa:	6820      	ldr	r0, [r4, #0]
 80027ac:	f000 faac 	bl	8002d08 <memmove>
 80027b0:	68a3      	ldr	r3, [r4, #8]
 80027b2:	2000      	movs	r0, #0
 80027b4:	1b9b      	subs	r3, r3, r6
 80027b6:	60a3      	str	r3, [r4, #8]
 80027b8:	6823      	ldr	r3, [r4, #0]
 80027ba:	199e      	adds	r6, r3, r6
 80027bc:	6026      	str	r6, [r4, #0]
 80027be:	e7da      	b.n	8002776 <__ssputs_r+0x5e>
 80027c0:	002a      	movs	r2, r5
 80027c2:	0038      	movs	r0, r7
 80027c4:	f000 fb96 	bl	8002ef4 <_realloc_r>
 80027c8:	1e06      	subs	r6, r0, #0
 80027ca:	d1e0      	bne.n	800278e <__ssputs_r+0x76>
 80027cc:	0038      	movs	r0, r7
 80027ce:	6921      	ldr	r1, [r4, #16]
 80027d0:	f000 faae 	bl	8002d30 <_free_r>
 80027d4:	e7c7      	b.n	8002766 <__ssputs_r+0x4e>
 80027d6:	46c0      	nop			; (mov r8, r8)
 80027d8:	fffffb7f 	.word	0xfffffb7f

080027dc <_svfiprintf_r>:
 80027dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027de:	b0a1      	sub	sp, #132	; 0x84
 80027e0:	9003      	str	r0, [sp, #12]
 80027e2:	001d      	movs	r5, r3
 80027e4:	898b      	ldrh	r3, [r1, #12]
 80027e6:	000f      	movs	r7, r1
 80027e8:	0016      	movs	r6, r2
 80027ea:	061b      	lsls	r3, r3, #24
 80027ec:	d511      	bpl.n	8002812 <_svfiprintf_r+0x36>
 80027ee:	690b      	ldr	r3, [r1, #16]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10e      	bne.n	8002812 <_svfiprintf_r+0x36>
 80027f4:	2140      	movs	r1, #64	; 0x40
 80027f6:	f000 fb07 	bl	8002e08 <_malloc_r>
 80027fa:	6038      	str	r0, [r7, #0]
 80027fc:	6138      	str	r0, [r7, #16]
 80027fe:	2800      	cmp	r0, #0
 8002800:	d105      	bne.n	800280e <_svfiprintf_r+0x32>
 8002802:	230c      	movs	r3, #12
 8002804:	9a03      	ldr	r2, [sp, #12]
 8002806:	3801      	subs	r0, #1
 8002808:	6013      	str	r3, [r2, #0]
 800280a:	b021      	add	sp, #132	; 0x84
 800280c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800280e:	2340      	movs	r3, #64	; 0x40
 8002810:	617b      	str	r3, [r7, #20]
 8002812:	2300      	movs	r3, #0
 8002814:	ac08      	add	r4, sp, #32
 8002816:	6163      	str	r3, [r4, #20]
 8002818:	3320      	adds	r3, #32
 800281a:	7663      	strb	r3, [r4, #25]
 800281c:	3310      	adds	r3, #16
 800281e:	76a3      	strb	r3, [r4, #26]
 8002820:	9507      	str	r5, [sp, #28]
 8002822:	0035      	movs	r5, r6
 8002824:	782b      	ldrb	r3, [r5, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <_svfiprintf_r+0x52>
 800282a:	2b25      	cmp	r3, #37	; 0x25
 800282c:	d147      	bne.n	80028be <_svfiprintf_r+0xe2>
 800282e:	1bab      	subs	r3, r5, r6
 8002830:	9305      	str	r3, [sp, #20]
 8002832:	42b5      	cmp	r5, r6
 8002834:	d00c      	beq.n	8002850 <_svfiprintf_r+0x74>
 8002836:	0032      	movs	r2, r6
 8002838:	0039      	movs	r1, r7
 800283a:	9803      	ldr	r0, [sp, #12]
 800283c:	f7ff ff6c 	bl	8002718 <__ssputs_r>
 8002840:	1c43      	adds	r3, r0, #1
 8002842:	d100      	bne.n	8002846 <_svfiprintf_r+0x6a>
 8002844:	e0ae      	b.n	80029a4 <_svfiprintf_r+0x1c8>
 8002846:	6962      	ldr	r2, [r4, #20]
 8002848:	9b05      	ldr	r3, [sp, #20]
 800284a:	4694      	mov	ip, r2
 800284c:	4463      	add	r3, ip
 800284e:	6163      	str	r3, [r4, #20]
 8002850:	782b      	ldrb	r3, [r5, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d100      	bne.n	8002858 <_svfiprintf_r+0x7c>
 8002856:	e0a5      	b.n	80029a4 <_svfiprintf_r+0x1c8>
 8002858:	2201      	movs	r2, #1
 800285a:	2300      	movs	r3, #0
 800285c:	4252      	negs	r2, r2
 800285e:	6062      	str	r2, [r4, #4]
 8002860:	a904      	add	r1, sp, #16
 8002862:	3254      	adds	r2, #84	; 0x54
 8002864:	1852      	adds	r2, r2, r1
 8002866:	1c6e      	adds	r6, r5, #1
 8002868:	6023      	str	r3, [r4, #0]
 800286a:	60e3      	str	r3, [r4, #12]
 800286c:	60a3      	str	r3, [r4, #8]
 800286e:	7013      	strb	r3, [r2, #0]
 8002870:	65a3      	str	r3, [r4, #88]	; 0x58
 8002872:	2205      	movs	r2, #5
 8002874:	7831      	ldrb	r1, [r6, #0]
 8002876:	4854      	ldr	r0, [pc, #336]	; (80029c8 <_svfiprintf_r+0x1ec>)
 8002878:	f000 fa32 	bl	8002ce0 <memchr>
 800287c:	1c75      	adds	r5, r6, #1
 800287e:	2800      	cmp	r0, #0
 8002880:	d11f      	bne.n	80028c2 <_svfiprintf_r+0xe6>
 8002882:	6822      	ldr	r2, [r4, #0]
 8002884:	06d3      	lsls	r3, r2, #27
 8002886:	d504      	bpl.n	8002892 <_svfiprintf_r+0xb6>
 8002888:	2353      	movs	r3, #83	; 0x53
 800288a:	a904      	add	r1, sp, #16
 800288c:	185b      	adds	r3, r3, r1
 800288e:	2120      	movs	r1, #32
 8002890:	7019      	strb	r1, [r3, #0]
 8002892:	0713      	lsls	r3, r2, #28
 8002894:	d504      	bpl.n	80028a0 <_svfiprintf_r+0xc4>
 8002896:	2353      	movs	r3, #83	; 0x53
 8002898:	a904      	add	r1, sp, #16
 800289a:	185b      	adds	r3, r3, r1
 800289c:	212b      	movs	r1, #43	; 0x2b
 800289e:	7019      	strb	r1, [r3, #0]
 80028a0:	7833      	ldrb	r3, [r6, #0]
 80028a2:	2b2a      	cmp	r3, #42	; 0x2a
 80028a4:	d016      	beq.n	80028d4 <_svfiprintf_r+0xf8>
 80028a6:	0035      	movs	r5, r6
 80028a8:	2100      	movs	r1, #0
 80028aa:	200a      	movs	r0, #10
 80028ac:	68e3      	ldr	r3, [r4, #12]
 80028ae:	782a      	ldrb	r2, [r5, #0]
 80028b0:	1c6e      	adds	r6, r5, #1
 80028b2:	3a30      	subs	r2, #48	; 0x30
 80028b4:	2a09      	cmp	r2, #9
 80028b6:	d94e      	bls.n	8002956 <_svfiprintf_r+0x17a>
 80028b8:	2900      	cmp	r1, #0
 80028ba:	d111      	bne.n	80028e0 <_svfiprintf_r+0x104>
 80028bc:	e017      	b.n	80028ee <_svfiprintf_r+0x112>
 80028be:	3501      	adds	r5, #1
 80028c0:	e7b0      	b.n	8002824 <_svfiprintf_r+0x48>
 80028c2:	4b41      	ldr	r3, [pc, #260]	; (80029c8 <_svfiprintf_r+0x1ec>)
 80028c4:	6822      	ldr	r2, [r4, #0]
 80028c6:	1ac0      	subs	r0, r0, r3
 80028c8:	2301      	movs	r3, #1
 80028ca:	4083      	lsls	r3, r0
 80028cc:	4313      	orrs	r3, r2
 80028ce:	002e      	movs	r6, r5
 80028d0:	6023      	str	r3, [r4, #0]
 80028d2:	e7ce      	b.n	8002872 <_svfiprintf_r+0x96>
 80028d4:	9b07      	ldr	r3, [sp, #28]
 80028d6:	1d19      	adds	r1, r3, #4
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	9107      	str	r1, [sp, #28]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	db01      	blt.n	80028e4 <_svfiprintf_r+0x108>
 80028e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80028e2:	e004      	b.n	80028ee <_svfiprintf_r+0x112>
 80028e4:	425b      	negs	r3, r3
 80028e6:	60e3      	str	r3, [r4, #12]
 80028e8:	2302      	movs	r3, #2
 80028ea:	4313      	orrs	r3, r2
 80028ec:	6023      	str	r3, [r4, #0]
 80028ee:	782b      	ldrb	r3, [r5, #0]
 80028f0:	2b2e      	cmp	r3, #46	; 0x2e
 80028f2:	d10a      	bne.n	800290a <_svfiprintf_r+0x12e>
 80028f4:	786b      	ldrb	r3, [r5, #1]
 80028f6:	2b2a      	cmp	r3, #42	; 0x2a
 80028f8:	d135      	bne.n	8002966 <_svfiprintf_r+0x18a>
 80028fa:	9b07      	ldr	r3, [sp, #28]
 80028fc:	3502      	adds	r5, #2
 80028fe:	1d1a      	adds	r2, r3, #4
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	9207      	str	r2, [sp, #28]
 8002904:	2b00      	cmp	r3, #0
 8002906:	db2b      	blt.n	8002960 <_svfiprintf_r+0x184>
 8002908:	9309      	str	r3, [sp, #36]	; 0x24
 800290a:	4e30      	ldr	r6, [pc, #192]	; (80029cc <_svfiprintf_r+0x1f0>)
 800290c:	2203      	movs	r2, #3
 800290e:	0030      	movs	r0, r6
 8002910:	7829      	ldrb	r1, [r5, #0]
 8002912:	f000 f9e5 	bl	8002ce0 <memchr>
 8002916:	2800      	cmp	r0, #0
 8002918:	d006      	beq.n	8002928 <_svfiprintf_r+0x14c>
 800291a:	2340      	movs	r3, #64	; 0x40
 800291c:	1b80      	subs	r0, r0, r6
 800291e:	4083      	lsls	r3, r0
 8002920:	6822      	ldr	r2, [r4, #0]
 8002922:	3501      	adds	r5, #1
 8002924:	4313      	orrs	r3, r2
 8002926:	6023      	str	r3, [r4, #0]
 8002928:	7829      	ldrb	r1, [r5, #0]
 800292a:	2206      	movs	r2, #6
 800292c:	4828      	ldr	r0, [pc, #160]	; (80029d0 <_svfiprintf_r+0x1f4>)
 800292e:	1c6e      	adds	r6, r5, #1
 8002930:	7621      	strb	r1, [r4, #24]
 8002932:	f000 f9d5 	bl	8002ce0 <memchr>
 8002936:	2800      	cmp	r0, #0
 8002938:	d03c      	beq.n	80029b4 <_svfiprintf_r+0x1d8>
 800293a:	4b26      	ldr	r3, [pc, #152]	; (80029d4 <_svfiprintf_r+0x1f8>)
 800293c:	2b00      	cmp	r3, #0
 800293e:	d125      	bne.n	800298c <_svfiprintf_r+0x1b0>
 8002940:	2207      	movs	r2, #7
 8002942:	9b07      	ldr	r3, [sp, #28]
 8002944:	3307      	adds	r3, #7
 8002946:	4393      	bics	r3, r2
 8002948:	3308      	adds	r3, #8
 800294a:	9307      	str	r3, [sp, #28]
 800294c:	6963      	ldr	r3, [r4, #20]
 800294e:	9a04      	ldr	r2, [sp, #16]
 8002950:	189b      	adds	r3, r3, r2
 8002952:	6163      	str	r3, [r4, #20]
 8002954:	e765      	b.n	8002822 <_svfiprintf_r+0x46>
 8002956:	4343      	muls	r3, r0
 8002958:	0035      	movs	r5, r6
 800295a:	2101      	movs	r1, #1
 800295c:	189b      	adds	r3, r3, r2
 800295e:	e7a6      	b.n	80028ae <_svfiprintf_r+0xd2>
 8002960:	2301      	movs	r3, #1
 8002962:	425b      	negs	r3, r3
 8002964:	e7d0      	b.n	8002908 <_svfiprintf_r+0x12c>
 8002966:	2300      	movs	r3, #0
 8002968:	200a      	movs	r0, #10
 800296a:	001a      	movs	r2, r3
 800296c:	3501      	adds	r5, #1
 800296e:	6063      	str	r3, [r4, #4]
 8002970:	7829      	ldrb	r1, [r5, #0]
 8002972:	1c6e      	adds	r6, r5, #1
 8002974:	3930      	subs	r1, #48	; 0x30
 8002976:	2909      	cmp	r1, #9
 8002978:	d903      	bls.n	8002982 <_svfiprintf_r+0x1a6>
 800297a:	2b00      	cmp	r3, #0
 800297c:	d0c5      	beq.n	800290a <_svfiprintf_r+0x12e>
 800297e:	9209      	str	r2, [sp, #36]	; 0x24
 8002980:	e7c3      	b.n	800290a <_svfiprintf_r+0x12e>
 8002982:	4342      	muls	r2, r0
 8002984:	0035      	movs	r5, r6
 8002986:	2301      	movs	r3, #1
 8002988:	1852      	adds	r2, r2, r1
 800298a:	e7f1      	b.n	8002970 <_svfiprintf_r+0x194>
 800298c:	ab07      	add	r3, sp, #28
 800298e:	9300      	str	r3, [sp, #0]
 8002990:	003a      	movs	r2, r7
 8002992:	0021      	movs	r1, r4
 8002994:	4b10      	ldr	r3, [pc, #64]	; (80029d8 <_svfiprintf_r+0x1fc>)
 8002996:	9803      	ldr	r0, [sp, #12]
 8002998:	e000      	b.n	800299c <_svfiprintf_r+0x1c0>
 800299a:	bf00      	nop
 800299c:	9004      	str	r0, [sp, #16]
 800299e:	9b04      	ldr	r3, [sp, #16]
 80029a0:	3301      	adds	r3, #1
 80029a2:	d1d3      	bne.n	800294c <_svfiprintf_r+0x170>
 80029a4:	89bb      	ldrh	r3, [r7, #12]
 80029a6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80029a8:	065b      	lsls	r3, r3, #25
 80029aa:	d400      	bmi.n	80029ae <_svfiprintf_r+0x1d2>
 80029ac:	e72d      	b.n	800280a <_svfiprintf_r+0x2e>
 80029ae:	2001      	movs	r0, #1
 80029b0:	4240      	negs	r0, r0
 80029b2:	e72a      	b.n	800280a <_svfiprintf_r+0x2e>
 80029b4:	ab07      	add	r3, sp, #28
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	003a      	movs	r2, r7
 80029ba:	0021      	movs	r1, r4
 80029bc:	4b06      	ldr	r3, [pc, #24]	; (80029d8 <_svfiprintf_r+0x1fc>)
 80029be:	9803      	ldr	r0, [sp, #12]
 80029c0:	f000 f87c 	bl	8002abc <_printf_i>
 80029c4:	e7ea      	b.n	800299c <_svfiprintf_r+0x1c0>
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	08003014 	.word	0x08003014
 80029cc:	0800301a 	.word	0x0800301a
 80029d0:	0800301e 	.word	0x0800301e
 80029d4:	00000000 	.word	0x00000000
 80029d8:	08002719 	.word	0x08002719

080029dc <_printf_common>:
 80029dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80029de:	0015      	movs	r5, r2
 80029e0:	9301      	str	r3, [sp, #4]
 80029e2:	688a      	ldr	r2, [r1, #8]
 80029e4:	690b      	ldr	r3, [r1, #16]
 80029e6:	000c      	movs	r4, r1
 80029e8:	9000      	str	r0, [sp, #0]
 80029ea:	4293      	cmp	r3, r2
 80029ec:	da00      	bge.n	80029f0 <_printf_common+0x14>
 80029ee:	0013      	movs	r3, r2
 80029f0:	0022      	movs	r2, r4
 80029f2:	602b      	str	r3, [r5, #0]
 80029f4:	3243      	adds	r2, #67	; 0x43
 80029f6:	7812      	ldrb	r2, [r2, #0]
 80029f8:	2a00      	cmp	r2, #0
 80029fa:	d001      	beq.n	8002a00 <_printf_common+0x24>
 80029fc:	3301      	adds	r3, #1
 80029fe:	602b      	str	r3, [r5, #0]
 8002a00:	6823      	ldr	r3, [r4, #0]
 8002a02:	069b      	lsls	r3, r3, #26
 8002a04:	d502      	bpl.n	8002a0c <_printf_common+0x30>
 8002a06:	682b      	ldr	r3, [r5, #0]
 8002a08:	3302      	adds	r3, #2
 8002a0a:	602b      	str	r3, [r5, #0]
 8002a0c:	6822      	ldr	r2, [r4, #0]
 8002a0e:	2306      	movs	r3, #6
 8002a10:	0017      	movs	r7, r2
 8002a12:	401f      	ands	r7, r3
 8002a14:	421a      	tst	r2, r3
 8002a16:	d027      	beq.n	8002a68 <_printf_common+0x8c>
 8002a18:	0023      	movs	r3, r4
 8002a1a:	3343      	adds	r3, #67	; 0x43
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	1e5a      	subs	r2, r3, #1
 8002a20:	4193      	sbcs	r3, r2
 8002a22:	6822      	ldr	r2, [r4, #0]
 8002a24:	0692      	lsls	r2, r2, #26
 8002a26:	d430      	bmi.n	8002a8a <_printf_common+0xae>
 8002a28:	0022      	movs	r2, r4
 8002a2a:	9901      	ldr	r1, [sp, #4]
 8002a2c:	9800      	ldr	r0, [sp, #0]
 8002a2e:	9e08      	ldr	r6, [sp, #32]
 8002a30:	3243      	adds	r2, #67	; 0x43
 8002a32:	47b0      	blx	r6
 8002a34:	1c43      	adds	r3, r0, #1
 8002a36:	d025      	beq.n	8002a84 <_printf_common+0xa8>
 8002a38:	2306      	movs	r3, #6
 8002a3a:	6820      	ldr	r0, [r4, #0]
 8002a3c:	682a      	ldr	r2, [r5, #0]
 8002a3e:	68e1      	ldr	r1, [r4, #12]
 8002a40:	2500      	movs	r5, #0
 8002a42:	4003      	ands	r3, r0
 8002a44:	2b04      	cmp	r3, #4
 8002a46:	d103      	bne.n	8002a50 <_printf_common+0x74>
 8002a48:	1a8d      	subs	r5, r1, r2
 8002a4a:	43eb      	mvns	r3, r5
 8002a4c:	17db      	asrs	r3, r3, #31
 8002a4e:	401d      	ands	r5, r3
 8002a50:	68a3      	ldr	r3, [r4, #8]
 8002a52:	6922      	ldr	r2, [r4, #16]
 8002a54:	4293      	cmp	r3, r2
 8002a56:	dd01      	ble.n	8002a5c <_printf_common+0x80>
 8002a58:	1a9b      	subs	r3, r3, r2
 8002a5a:	18ed      	adds	r5, r5, r3
 8002a5c:	2700      	movs	r7, #0
 8002a5e:	42bd      	cmp	r5, r7
 8002a60:	d120      	bne.n	8002aa4 <_printf_common+0xc8>
 8002a62:	2000      	movs	r0, #0
 8002a64:	e010      	b.n	8002a88 <_printf_common+0xac>
 8002a66:	3701      	adds	r7, #1
 8002a68:	68e3      	ldr	r3, [r4, #12]
 8002a6a:	682a      	ldr	r2, [r5, #0]
 8002a6c:	1a9b      	subs	r3, r3, r2
 8002a6e:	42bb      	cmp	r3, r7
 8002a70:	ddd2      	ble.n	8002a18 <_printf_common+0x3c>
 8002a72:	0022      	movs	r2, r4
 8002a74:	2301      	movs	r3, #1
 8002a76:	9901      	ldr	r1, [sp, #4]
 8002a78:	9800      	ldr	r0, [sp, #0]
 8002a7a:	9e08      	ldr	r6, [sp, #32]
 8002a7c:	3219      	adds	r2, #25
 8002a7e:	47b0      	blx	r6
 8002a80:	1c43      	adds	r3, r0, #1
 8002a82:	d1f0      	bne.n	8002a66 <_printf_common+0x8a>
 8002a84:	2001      	movs	r0, #1
 8002a86:	4240      	negs	r0, r0
 8002a88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002a8a:	2030      	movs	r0, #48	; 0x30
 8002a8c:	18e1      	adds	r1, r4, r3
 8002a8e:	3143      	adds	r1, #67	; 0x43
 8002a90:	7008      	strb	r0, [r1, #0]
 8002a92:	0021      	movs	r1, r4
 8002a94:	1c5a      	adds	r2, r3, #1
 8002a96:	3145      	adds	r1, #69	; 0x45
 8002a98:	7809      	ldrb	r1, [r1, #0]
 8002a9a:	18a2      	adds	r2, r4, r2
 8002a9c:	3243      	adds	r2, #67	; 0x43
 8002a9e:	3302      	adds	r3, #2
 8002aa0:	7011      	strb	r1, [r2, #0]
 8002aa2:	e7c1      	b.n	8002a28 <_printf_common+0x4c>
 8002aa4:	0022      	movs	r2, r4
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	9901      	ldr	r1, [sp, #4]
 8002aaa:	9800      	ldr	r0, [sp, #0]
 8002aac:	9e08      	ldr	r6, [sp, #32]
 8002aae:	321a      	adds	r2, #26
 8002ab0:	47b0      	blx	r6
 8002ab2:	1c43      	adds	r3, r0, #1
 8002ab4:	d0e6      	beq.n	8002a84 <_printf_common+0xa8>
 8002ab6:	3701      	adds	r7, #1
 8002ab8:	e7d1      	b.n	8002a5e <_printf_common+0x82>
	...

08002abc <_printf_i>:
 8002abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002abe:	b08b      	sub	sp, #44	; 0x2c
 8002ac0:	9206      	str	r2, [sp, #24]
 8002ac2:	000a      	movs	r2, r1
 8002ac4:	3243      	adds	r2, #67	; 0x43
 8002ac6:	9307      	str	r3, [sp, #28]
 8002ac8:	9005      	str	r0, [sp, #20]
 8002aca:	9204      	str	r2, [sp, #16]
 8002acc:	7e0a      	ldrb	r2, [r1, #24]
 8002ace:	000c      	movs	r4, r1
 8002ad0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002ad2:	2a78      	cmp	r2, #120	; 0x78
 8002ad4:	d807      	bhi.n	8002ae6 <_printf_i+0x2a>
 8002ad6:	2a62      	cmp	r2, #98	; 0x62
 8002ad8:	d809      	bhi.n	8002aee <_printf_i+0x32>
 8002ada:	2a00      	cmp	r2, #0
 8002adc:	d100      	bne.n	8002ae0 <_printf_i+0x24>
 8002ade:	e0c1      	b.n	8002c64 <_printf_i+0x1a8>
 8002ae0:	2a58      	cmp	r2, #88	; 0x58
 8002ae2:	d100      	bne.n	8002ae6 <_printf_i+0x2a>
 8002ae4:	e08c      	b.n	8002c00 <_printf_i+0x144>
 8002ae6:	0026      	movs	r6, r4
 8002ae8:	3642      	adds	r6, #66	; 0x42
 8002aea:	7032      	strb	r2, [r6, #0]
 8002aec:	e022      	b.n	8002b34 <_printf_i+0x78>
 8002aee:	0010      	movs	r0, r2
 8002af0:	3863      	subs	r0, #99	; 0x63
 8002af2:	2815      	cmp	r0, #21
 8002af4:	d8f7      	bhi.n	8002ae6 <_printf_i+0x2a>
 8002af6:	f7fd fb05 	bl	8000104 <__gnu_thumb1_case_shi>
 8002afa:	0016      	.short	0x0016
 8002afc:	fff6001f 	.word	0xfff6001f
 8002b00:	fff6fff6 	.word	0xfff6fff6
 8002b04:	001ffff6 	.word	0x001ffff6
 8002b08:	fff6fff6 	.word	0xfff6fff6
 8002b0c:	fff6fff6 	.word	0xfff6fff6
 8002b10:	003600a8 	.word	0x003600a8
 8002b14:	fff6009a 	.word	0xfff6009a
 8002b18:	00b9fff6 	.word	0x00b9fff6
 8002b1c:	0036fff6 	.word	0x0036fff6
 8002b20:	fff6fff6 	.word	0xfff6fff6
 8002b24:	009e      	.short	0x009e
 8002b26:	0026      	movs	r6, r4
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	3642      	adds	r6, #66	; 0x42
 8002b2c:	1d11      	adds	r1, r2, #4
 8002b2e:	6019      	str	r1, [r3, #0]
 8002b30:	6813      	ldr	r3, [r2, #0]
 8002b32:	7033      	strb	r3, [r6, #0]
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0a7      	b.n	8002c88 <_printf_i+0x1cc>
 8002b38:	6808      	ldr	r0, [r1, #0]
 8002b3a:	6819      	ldr	r1, [r3, #0]
 8002b3c:	1d0a      	adds	r2, r1, #4
 8002b3e:	0605      	lsls	r5, r0, #24
 8002b40:	d50b      	bpl.n	8002b5a <_printf_i+0x9e>
 8002b42:	680d      	ldr	r5, [r1, #0]
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	2d00      	cmp	r5, #0
 8002b48:	da03      	bge.n	8002b52 <_printf_i+0x96>
 8002b4a:	232d      	movs	r3, #45	; 0x2d
 8002b4c:	9a04      	ldr	r2, [sp, #16]
 8002b4e:	426d      	negs	r5, r5
 8002b50:	7013      	strb	r3, [r2, #0]
 8002b52:	4b61      	ldr	r3, [pc, #388]	; (8002cd8 <_printf_i+0x21c>)
 8002b54:	270a      	movs	r7, #10
 8002b56:	9303      	str	r3, [sp, #12]
 8002b58:	e01b      	b.n	8002b92 <_printf_i+0xd6>
 8002b5a:	680d      	ldr	r5, [r1, #0]
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	0641      	lsls	r1, r0, #25
 8002b60:	d5f1      	bpl.n	8002b46 <_printf_i+0x8a>
 8002b62:	b22d      	sxth	r5, r5
 8002b64:	e7ef      	b.n	8002b46 <_printf_i+0x8a>
 8002b66:	680d      	ldr	r5, [r1, #0]
 8002b68:	6819      	ldr	r1, [r3, #0]
 8002b6a:	1d08      	adds	r0, r1, #4
 8002b6c:	6018      	str	r0, [r3, #0]
 8002b6e:	062e      	lsls	r6, r5, #24
 8002b70:	d501      	bpl.n	8002b76 <_printf_i+0xba>
 8002b72:	680d      	ldr	r5, [r1, #0]
 8002b74:	e003      	b.n	8002b7e <_printf_i+0xc2>
 8002b76:	066d      	lsls	r5, r5, #25
 8002b78:	d5fb      	bpl.n	8002b72 <_printf_i+0xb6>
 8002b7a:	680d      	ldr	r5, [r1, #0]
 8002b7c:	b2ad      	uxth	r5, r5
 8002b7e:	4b56      	ldr	r3, [pc, #344]	; (8002cd8 <_printf_i+0x21c>)
 8002b80:	2708      	movs	r7, #8
 8002b82:	9303      	str	r3, [sp, #12]
 8002b84:	2a6f      	cmp	r2, #111	; 0x6f
 8002b86:	d000      	beq.n	8002b8a <_printf_i+0xce>
 8002b88:	3702      	adds	r7, #2
 8002b8a:	0023      	movs	r3, r4
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	3343      	adds	r3, #67	; 0x43
 8002b90:	701a      	strb	r2, [r3, #0]
 8002b92:	6863      	ldr	r3, [r4, #4]
 8002b94:	60a3      	str	r3, [r4, #8]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	db03      	blt.n	8002ba2 <_printf_i+0xe6>
 8002b9a:	2204      	movs	r2, #4
 8002b9c:	6821      	ldr	r1, [r4, #0]
 8002b9e:	4391      	bics	r1, r2
 8002ba0:	6021      	str	r1, [r4, #0]
 8002ba2:	2d00      	cmp	r5, #0
 8002ba4:	d102      	bne.n	8002bac <_printf_i+0xf0>
 8002ba6:	9e04      	ldr	r6, [sp, #16]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00c      	beq.n	8002bc6 <_printf_i+0x10a>
 8002bac:	9e04      	ldr	r6, [sp, #16]
 8002bae:	0028      	movs	r0, r5
 8002bb0:	0039      	movs	r1, r7
 8002bb2:	f7fd fb37 	bl	8000224 <__aeabi_uidivmod>
 8002bb6:	9b03      	ldr	r3, [sp, #12]
 8002bb8:	3e01      	subs	r6, #1
 8002bba:	5c5b      	ldrb	r3, [r3, r1]
 8002bbc:	7033      	strb	r3, [r6, #0]
 8002bbe:	002b      	movs	r3, r5
 8002bc0:	0005      	movs	r5, r0
 8002bc2:	429f      	cmp	r7, r3
 8002bc4:	d9f3      	bls.n	8002bae <_printf_i+0xf2>
 8002bc6:	2f08      	cmp	r7, #8
 8002bc8:	d109      	bne.n	8002bde <_printf_i+0x122>
 8002bca:	6823      	ldr	r3, [r4, #0]
 8002bcc:	07db      	lsls	r3, r3, #31
 8002bce:	d506      	bpl.n	8002bde <_printf_i+0x122>
 8002bd0:	6863      	ldr	r3, [r4, #4]
 8002bd2:	6922      	ldr	r2, [r4, #16]
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	dc02      	bgt.n	8002bde <_printf_i+0x122>
 8002bd8:	2330      	movs	r3, #48	; 0x30
 8002bda:	3e01      	subs	r6, #1
 8002bdc:	7033      	strb	r3, [r6, #0]
 8002bde:	9b04      	ldr	r3, [sp, #16]
 8002be0:	1b9b      	subs	r3, r3, r6
 8002be2:	6123      	str	r3, [r4, #16]
 8002be4:	9b07      	ldr	r3, [sp, #28]
 8002be6:	0021      	movs	r1, r4
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	9805      	ldr	r0, [sp, #20]
 8002bec:	9b06      	ldr	r3, [sp, #24]
 8002bee:	aa09      	add	r2, sp, #36	; 0x24
 8002bf0:	f7ff fef4 	bl	80029dc <_printf_common>
 8002bf4:	1c43      	adds	r3, r0, #1
 8002bf6:	d14c      	bne.n	8002c92 <_printf_i+0x1d6>
 8002bf8:	2001      	movs	r0, #1
 8002bfa:	4240      	negs	r0, r0
 8002bfc:	b00b      	add	sp, #44	; 0x2c
 8002bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c00:	3145      	adds	r1, #69	; 0x45
 8002c02:	700a      	strb	r2, [r1, #0]
 8002c04:	4a34      	ldr	r2, [pc, #208]	; (8002cd8 <_printf_i+0x21c>)
 8002c06:	9203      	str	r2, [sp, #12]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	6821      	ldr	r1, [r4, #0]
 8002c0c:	ca20      	ldmia	r2!, {r5}
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	0608      	lsls	r0, r1, #24
 8002c12:	d516      	bpl.n	8002c42 <_printf_i+0x186>
 8002c14:	07cb      	lsls	r3, r1, #31
 8002c16:	d502      	bpl.n	8002c1e <_printf_i+0x162>
 8002c18:	2320      	movs	r3, #32
 8002c1a:	4319      	orrs	r1, r3
 8002c1c:	6021      	str	r1, [r4, #0]
 8002c1e:	2710      	movs	r7, #16
 8002c20:	2d00      	cmp	r5, #0
 8002c22:	d1b2      	bne.n	8002b8a <_printf_i+0xce>
 8002c24:	2320      	movs	r3, #32
 8002c26:	6822      	ldr	r2, [r4, #0]
 8002c28:	439a      	bics	r2, r3
 8002c2a:	6022      	str	r2, [r4, #0]
 8002c2c:	e7ad      	b.n	8002b8a <_printf_i+0xce>
 8002c2e:	2220      	movs	r2, #32
 8002c30:	6809      	ldr	r1, [r1, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	6022      	str	r2, [r4, #0]
 8002c36:	0022      	movs	r2, r4
 8002c38:	2178      	movs	r1, #120	; 0x78
 8002c3a:	3245      	adds	r2, #69	; 0x45
 8002c3c:	7011      	strb	r1, [r2, #0]
 8002c3e:	4a27      	ldr	r2, [pc, #156]	; (8002cdc <_printf_i+0x220>)
 8002c40:	e7e1      	b.n	8002c06 <_printf_i+0x14a>
 8002c42:	0648      	lsls	r0, r1, #25
 8002c44:	d5e6      	bpl.n	8002c14 <_printf_i+0x158>
 8002c46:	b2ad      	uxth	r5, r5
 8002c48:	e7e4      	b.n	8002c14 <_printf_i+0x158>
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	680d      	ldr	r5, [r1, #0]
 8002c4e:	1d10      	adds	r0, r2, #4
 8002c50:	6949      	ldr	r1, [r1, #20]
 8002c52:	6018      	str	r0, [r3, #0]
 8002c54:	6813      	ldr	r3, [r2, #0]
 8002c56:	062e      	lsls	r6, r5, #24
 8002c58:	d501      	bpl.n	8002c5e <_printf_i+0x1a2>
 8002c5a:	6019      	str	r1, [r3, #0]
 8002c5c:	e002      	b.n	8002c64 <_printf_i+0x1a8>
 8002c5e:	066d      	lsls	r5, r5, #25
 8002c60:	d5fb      	bpl.n	8002c5a <_printf_i+0x19e>
 8002c62:	8019      	strh	r1, [r3, #0]
 8002c64:	2300      	movs	r3, #0
 8002c66:	9e04      	ldr	r6, [sp, #16]
 8002c68:	6123      	str	r3, [r4, #16]
 8002c6a:	e7bb      	b.n	8002be4 <_printf_i+0x128>
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	1d11      	adds	r1, r2, #4
 8002c70:	6019      	str	r1, [r3, #0]
 8002c72:	6816      	ldr	r6, [r2, #0]
 8002c74:	2100      	movs	r1, #0
 8002c76:	0030      	movs	r0, r6
 8002c78:	6862      	ldr	r2, [r4, #4]
 8002c7a:	f000 f831 	bl	8002ce0 <memchr>
 8002c7e:	2800      	cmp	r0, #0
 8002c80:	d001      	beq.n	8002c86 <_printf_i+0x1ca>
 8002c82:	1b80      	subs	r0, r0, r6
 8002c84:	6060      	str	r0, [r4, #4]
 8002c86:	6863      	ldr	r3, [r4, #4]
 8002c88:	6123      	str	r3, [r4, #16]
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	9a04      	ldr	r2, [sp, #16]
 8002c8e:	7013      	strb	r3, [r2, #0]
 8002c90:	e7a8      	b.n	8002be4 <_printf_i+0x128>
 8002c92:	6923      	ldr	r3, [r4, #16]
 8002c94:	0032      	movs	r2, r6
 8002c96:	9906      	ldr	r1, [sp, #24]
 8002c98:	9805      	ldr	r0, [sp, #20]
 8002c9a:	9d07      	ldr	r5, [sp, #28]
 8002c9c:	47a8      	blx	r5
 8002c9e:	1c43      	adds	r3, r0, #1
 8002ca0:	d0aa      	beq.n	8002bf8 <_printf_i+0x13c>
 8002ca2:	6823      	ldr	r3, [r4, #0]
 8002ca4:	079b      	lsls	r3, r3, #30
 8002ca6:	d415      	bmi.n	8002cd4 <_printf_i+0x218>
 8002ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002caa:	68e0      	ldr	r0, [r4, #12]
 8002cac:	4298      	cmp	r0, r3
 8002cae:	daa5      	bge.n	8002bfc <_printf_i+0x140>
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	e7a3      	b.n	8002bfc <_printf_i+0x140>
 8002cb4:	0022      	movs	r2, r4
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	9906      	ldr	r1, [sp, #24]
 8002cba:	9805      	ldr	r0, [sp, #20]
 8002cbc:	9e07      	ldr	r6, [sp, #28]
 8002cbe:	3219      	adds	r2, #25
 8002cc0:	47b0      	blx	r6
 8002cc2:	1c43      	adds	r3, r0, #1
 8002cc4:	d098      	beq.n	8002bf8 <_printf_i+0x13c>
 8002cc6:	3501      	adds	r5, #1
 8002cc8:	68e3      	ldr	r3, [r4, #12]
 8002cca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ccc:	1a9b      	subs	r3, r3, r2
 8002cce:	42ab      	cmp	r3, r5
 8002cd0:	dcf0      	bgt.n	8002cb4 <_printf_i+0x1f8>
 8002cd2:	e7e9      	b.n	8002ca8 <_printf_i+0x1ec>
 8002cd4:	2500      	movs	r5, #0
 8002cd6:	e7f7      	b.n	8002cc8 <_printf_i+0x20c>
 8002cd8:	08003025 	.word	0x08003025
 8002cdc:	08003036 	.word	0x08003036

08002ce0 <memchr>:
 8002ce0:	b2c9      	uxtb	r1, r1
 8002ce2:	1882      	adds	r2, r0, r2
 8002ce4:	4290      	cmp	r0, r2
 8002ce6:	d101      	bne.n	8002cec <memchr+0xc>
 8002ce8:	2000      	movs	r0, #0
 8002cea:	4770      	bx	lr
 8002cec:	7803      	ldrb	r3, [r0, #0]
 8002cee:	428b      	cmp	r3, r1
 8002cf0:	d0fb      	beq.n	8002cea <memchr+0xa>
 8002cf2:	3001      	adds	r0, #1
 8002cf4:	e7f6      	b.n	8002ce4 <memchr+0x4>

08002cf6 <memcpy>:
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	b510      	push	{r4, lr}
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d100      	bne.n	8002d00 <memcpy+0xa>
 8002cfe:	bd10      	pop	{r4, pc}
 8002d00:	5ccc      	ldrb	r4, [r1, r3]
 8002d02:	54c4      	strb	r4, [r0, r3]
 8002d04:	3301      	adds	r3, #1
 8002d06:	e7f8      	b.n	8002cfa <memcpy+0x4>

08002d08 <memmove>:
 8002d08:	b510      	push	{r4, lr}
 8002d0a:	4288      	cmp	r0, r1
 8002d0c:	d902      	bls.n	8002d14 <memmove+0xc>
 8002d0e:	188b      	adds	r3, r1, r2
 8002d10:	4298      	cmp	r0, r3
 8002d12:	d303      	bcc.n	8002d1c <memmove+0x14>
 8002d14:	2300      	movs	r3, #0
 8002d16:	e007      	b.n	8002d28 <memmove+0x20>
 8002d18:	5c8b      	ldrb	r3, [r1, r2]
 8002d1a:	5483      	strb	r3, [r0, r2]
 8002d1c:	3a01      	subs	r2, #1
 8002d1e:	d2fb      	bcs.n	8002d18 <memmove+0x10>
 8002d20:	bd10      	pop	{r4, pc}
 8002d22:	5ccc      	ldrb	r4, [r1, r3]
 8002d24:	54c4      	strb	r4, [r0, r3]
 8002d26:	3301      	adds	r3, #1
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d1fa      	bne.n	8002d22 <memmove+0x1a>
 8002d2c:	e7f8      	b.n	8002d20 <memmove+0x18>
	...

08002d30 <_free_r>:
 8002d30:	b570      	push	{r4, r5, r6, lr}
 8002d32:	0005      	movs	r5, r0
 8002d34:	2900      	cmp	r1, #0
 8002d36:	d010      	beq.n	8002d5a <_free_r+0x2a>
 8002d38:	1f0c      	subs	r4, r1, #4
 8002d3a:	6823      	ldr	r3, [r4, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	da00      	bge.n	8002d42 <_free_r+0x12>
 8002d40:	18e4      	adds	r4, r4, r3
 8002d42:	0028      	movs	r0, r5
 8002d44:	f000 f918 	bl	8002f78 <__malloc_lock>
 8002d48:	4a1d      	ldr	r2, [pc, #116]	; (8002dc0 <_free_r+0x90>)
 8002d4a:	6813      	ldr	r3, [r2, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d105      	bne.n	8002d5c <_free_r+0x2c>
 8002d50:	6063      	str	r3, [r4, #4]
 8002d52:	6014      	str	r4, [r2, #0]
 8002d54:	0028      	movs	r0, r5
 8002d56:	f000 f917 	bl	8002f88 <__malloc_unlock>
 8002d5a:	bd70      	pop	{r4, r5, r6, pc}
 8002d5c:	42a3      	cmp	r3, r4
 8002d5e:	d908      	bls.n	8002d72 <_free_r+0x42>
 8002d60:	6821      	ldr	r1, [r4, #0]
 8002d62:	1860      	adds	r0, r4, r1
 8002d64:	4283      	cmp	r3, r0
 8002d66:	d1f3      	bne.n	8002d50 <_free_r+0x20>
 8002d68:	6818      	ldr	r0, [r3, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	1841      	adds	r1, r0, r1
 8002d6e:	6021      	str	r1, [r4, #0]
 8002d70:	e7ee      	b.n	8002d50 <_free_r+0x20>
 8002d72:	001a      	movs	r2, r3
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <_free_r+0x4e>
 8002d7a:	42a3      	cmp	r3, r4
 8002d7c:	d9f9      	bls.n	8002d72 <_free_r+0x42>
 8002d7e:	6811      	ldr	r1, [r2, #0]
 8002d80:	1850      	adds	r0, r2, r1
 8002d82:	42a0      	cmp	r0, r4
 8002d84:	d10b      	bne.n	8002d9e <_free_r+0x6e>
 8002d86:	6820      	ldr	r0, [r4, #0]
 8002d88:	1809      	adds	r1, r1, r0
 8002d8a:	1850      	adds	r0, r2, r1
 8002d8c:	6011      	str	r1, [r2, #0]
 8002d8e:	4283      	cmp	r3, r0
 8002d90:	d1e0      	bne.n	8002d54 <_free_r+0x24>
 8002d92:	6818      	ldr	r0, [r3, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	1841      	adds	r1, r0, r1
 8002d98:	6011      	str	r1, [r2, #0]
 8002d9a:	6053      	str	r3, [r2, #4]
 8002d9c:	e7da      	b.n	8002d54 <_free_r+0x24>
 8002d9e:	42a0      	cmp	r0, r4
 8002da0:	d902      	bls.n	8002da8 <_free_r+0x78>
 8002da2:	230c      	movs	r3, #12
 8002da4:	602b      	str	r3, [r5, #0]
 8002da6:	e7d5      	b.n	8002d54 <_free_r+0x24>
 8002da8:	6821      	ldr	r1, [r4, #0]
 8002daa:	1860      	adds	r0, r4, r1
 8002dac:	4283      	cmp	r3, r0
 8002dae:	d103      	bne.n	8002db8 <_free_r+0x88>
 8002db0:	6818      	ldr	r0, [r3, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	1841      	adds	r1, r0, r1
 8002db6:	6021      	str	r1, [r4, #0]
 8002db8:	6063      	str	r3, [r4, #4]
 8002dba:	6054      	str	r4, [r2, #4]
 8002dbc:	e7ca      	b.n	8002d54 <_free_r+0x24>
 8002dbe:	46c0      	nop			; (mov r8, r8)
 8002dc0:	200000dc 	.word	0x200000dc

08002dc4 <sbrk_aligned>:
 8002dc4:	b570      	push	{r4, r5, r6, lr}
 8002dc6:	4e0f      	ldr	r6, [pc, #60]	; (8002e04 <sbrk_aligned+0x40>)
 8002dc8:	000d      	movs	r5, r1
 8002dca:	6831      	ldr	r1, [r6, #0]
 8002dcc:	0004      	movs	r4, r0
 8002dce:	2900      	cmp	r1, #0
 8002dd0:	d102      	bne.n	8002dd8 <sbrk_aligned+0x14>
 8002dd2:	f000 f8bf 	bl	8002f54 <_sbrk_r>
 8002dd6:	6030      	str	r0, [r6, #0]
 8002dd8:	0029      	movs	r1, r5
 8002dda:	0020      	movs	r0, r4
 8002ddc:	f000 f8ba 	bl	8002f54 <_sbrk_r>
 8002de0:	1c43      	adds	r3, r0, #1
 8002de2:	d00a      	beq.n	8002dfa <sbrk_aligned+0x36>
 8002de4:	2303      	movs	r3, #3
 8002de6:	1cc5      	adds	r5, r0, #3
 8002de8:	439d      	bics	r5, r3
 8002dea:	42a8      	cmp	r0, r5
 8002dec:	d007      	beq.n	8002dfe <sbrk_aligned+0x3a>
 8002dee:	1a29      	subs	r1, r5, r0
 8002df0:	0020      	movs	r0, r4
 8002df2:	f000 f8af 	bl	8002f54 <_sbrk_r>
 8002df6:	1c43      	adds	r3, r0, #1
 8002df8:	d101      	bne.n	8002dfe <sbrk_aligned+0x3a>
 8002dfa:	2501      	movs	r5, #1
 8002dfc:	426d      	negs	r5, r5
 8002dfe:	0028      	movs	r0, r5
 8002e00:	bd70      	pop	{r4, r5, r6, pc}
 8002e02:	46c0      	nop			; (mov r8, r8)
 8002e04:	200000e0 	.word	0x200000e0

08002e08 <_malloc_r>:
 8002e08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e0a:	2203      	movs	r2, #3
 8002e0c:	1ccb      	adds	r3, r1, #3
 8002e0e:	4393      	bics	r3, r2
 8002e10:	3308      	adds	r3, #8
 8002e12:	0006      	movs	r6, r0
 8002e14:	001f      	movs	r7, r3
 8002e16:	2b0c      	cmp	r3, #12
 8002e18:	d232      	bcs.n	8002e80 <_malloc_r+0x78>
 8002e1a:	270c      	movs	r7, #12
 8002e1c:	42b9      	cmp	r1, r7
 8002e1e:	d831      	bhi.n	8002e84 <_malloc_r+0x7c>
 8002e20:	0030      	movs	r0, r6
 8002e22:	f000 f8a9 	bl	8002f78 <__malloc_lock>
 8002e26:	4d32      	ldr	r5, [pc, #200]	; (8002ef0 <_malloc_r+0xe8>)
 8002e28:	682b      	ldr	r3, [r5, #0]
 8002e2a:	001c      	movs	r4, r3
 8002e2c:	2c00      	cmp	r4, #0
 8002e2e:	d12e      	bne.n	8002e8e <_malloc_r+0x86>
 8002e30:	0039      	movs	r1, r7
 8002e32:	0030      	movs	r0, r6
 8002e34:	f7ff ffc6 	bl	8002dc4 <sbrk_aligned>
 8002e38:	0004      	movs	r4, r0
 8002e3a:	1c43      	adds	r3, r0, #1
 8002e3c:	d11e      	bne.n	8002e7c <_malloc_r+0x74>
 8002e3e:	682c      	ldr	r4, [r5, #0]
 8002e40:	0025      	movs	r5, r4
 8002e42:	2d00      	cmp	r5, #0
 8002e44:	d14a      	bne.n	8002edc <_malloc_r+0xd4>
 8002e46:	6823      	ldr	r3, [r4, #0]
 8002e48:	0029      	movs	r1, r5
 8002e4a:	18e3      	adds	r3, r4, r3
 8002e4c:	0030      	movs	r0, r6
 8002e4e:	9301      	str	r3, [sp, #4]
 8002e50:	f000 f880 	bl	8002f54 <_sbrk_r>
 8002e54:	9b01      	ldr	r3, [sp, #4]
 8002e56:	4283      	cmp	r3, r0
 8002e58:	d143      	bne.n	8002ee2 <_malloc_r+0xda>
 8002e5a:	6823      	ldr	r3, [r4, #0]
 8002e5c:	3703      	adds	r7, #3
 8002e5e:	1aff      	subs	r7, r7, r3
 8002e60:	2303      	movs	r3, #3
 8002e62:	439f      	bics	r7, r3
 8002e64:	3708      	adds	r7, #8
 8002e66:	2f0c      	cmp	r7, #12
 8002e68:	d200      	bcs.n	8002e6c <_malloc_r+0x64>
 8002e6a:	270c      	movs	r7, #12
 8002e6c:	0039      	movs	r1, r7
 8002e6e:	0030      	movs	r0, r6
 8002e70:	f7ff ffa8 	bl	8002dc4 <sbrk_aligned>
 8002e74:	1c43      	adds	r3, r0, #1
 8002e76:	d034      	beq.n	8002ee2 <_malloc_r+0xda>
 8002e78:	6823      	ldr	r3, [r4, #0]
 8002e7a:	19df      	adds	r7, r3, r7
 8002e7c:	6027      	str	r7, [r4, #0]
 8002e7e:	e013      	b.n	8002ea8 <_malloc_r+0xa0>
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	dacb      	bge.n	8002e1c <_malloc_r+0x14>
 8002e84:	230c      	movs	r3, #12
 8002e86:	2500      	movs	r5, #0
 8002e88:	6033      	str	r3, [r6, #0]
 8002e8a:	0028      	movs	r0, r5
 8002e8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002e8e:	6822      	ldr	r2, [r4, #0]
 8002e90:	1bd1      	subs	r1, r2, r7
 8002e92:	d420      	bmi.n	8002ed6 <_malloc_r+0xce>
 8002e94:	290b      	cmp	r1, #11
 8002e96:	d917      	bls.n	8002ec8 <_malloc_r+0xc0>
 8002e98:	19e2      	adds	r2, r4, r7
 8002e9a:	6027      	str	r7, [r4, #0]
 8002e9c:	42a3      	cmp	r3, r4
 8002e9e:	d111      	bne.n	8002ec4 <_malloc_r+0xbc>
 8002ea0:	602a      	str	r2, [r5, #0]
 8002ea2:	6863      	ldr	r3, [r4, #4]
 8002ea4:	6011      	str	r1, [r2, #0]
 8002ea6:	6053      	str	r3, [r2, #4]
 8002ea8:	0030      	movs	r0, r6
 8002eaa:	0025      	movs	r5, r4
 8002eac:	f000 f86c 	bl	8002f88 <__malloc_unlock>
 8002eb0:	2207      	movs	r2, #7
 8002eb2:	350b      	adds	r5, #11
 8002eb4:	1d23      	adds	r3, r4, #4
 8002eb6:	4395      	bics	r5, r2
 8002eb8:	1aea      	subs	r2, r5, r3
 8002eba:	429d      	cmp	r5, r3
 8002ebc:	d0e5      	beq.n	8002e8a <_malloc_r+0x82>
 8002ebe:	1b5b      	subs	r3, r3, r5
 8002ec0:	50a3      	str	r3, [r4, r2]
 8002ec2:	e7e2      	b.n	8002e8a <_malloc_r+0x82>
 8002ec4:	605a      	str	r2, [r3, #4]
 8002ec6:	e7ec      	b.n	8002ea2 <_malloc_r+0x9a>
 8002ec8:	6862      	ldr	r2, [r4, #4]
 8002eca:	42a3      	cmp	r3, r4
 8002ecc:	d101      	bne.n	8002ed2 <_malloc_r+0xca>
 8002ece:	602a      	str	r2, [r5, #0]
 8002ed0:	e7ea      	b.n	8002ea8 <_malloc_r+0xa0>
 8002ed2:	605a      	str	r2, [r3, #4]
 8002ed4:	e7e8      	b.n	8002ea8 <_malloc_r+0xa0>
 8002ed6:	0023      	movs	r3, r4
 8002ed8:	6864      	ldr	r4, [r4, #4]
 8002eda:	e7a7      	b.n	8002e2c <_malloc_r+0x24>
 8002edc:	002c      	movs	r4, r5
 8002ede:	686d      	ldr	r5, [r5, #4]
 8002ee0:	e7af      	b.n	8002e42 <_malloc_r+0x3a>
 8002ee2:	230c      	movs	r3, #12
 8002ee4:	0030      	movs	r0, r6
 8002ee6:	6033      	str	r3, [r6, #0]
 8002ee8:	f000 f84e 	bl	8002f88 <__malloc_unlock>
 8002eec:	e7cd      	b.n	8002e8a <_malloc_r+0x82>
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	200000dc 	.word	0x200000dc

08002ef4 <_realloc_r>:
 8002ef4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ef6:	0007      	movs	r7, r0
 8002ef8:	000e      	movs	r6, r1
 8002efa:	0014      	movs	r4, r2
 8002efc:	2900      	cmp	r1, #0
 8002efe:	d105      	bne.n	8002f0c <_realloc_r+0x18>
 8002f00:	0011      	movs	r1, r2
 8002f02:	f7ff ff81 	bl	8002e08 <_malloc_r>
 8002f06:	0005      	movs	r5, r0
 8002f08:	0028      	movs	r0, r5
 8002f0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002f0c:	2a00      	cmp	r2, #0
 8002f0e:	d103      	bne.n	8002f18 <_realloc_r+0x24>
 8002f10:	f7ff ff0e 	bl	8002d30 <_free_r>
 8002f14:	0025      	movs	r5, r4
 8002f16:	e7f7      	b.n	8002f08 <_realloc_r+0x14>
 8002f18:	f000 f83e 	bl	8002f98 <_malloc_usable_size_r>
 8002f1c:	9001      	str	r0, [sp, #4]
 8002f1e:	4284      	cmp	r4, r0
 8002f20:	d803      	bhi.n	8002f2a <_realloc_r+0x36>
 8002f22:	0035      	movs	r5, r6
 8002f24:	0843      	lsrs	r3, r0, #1
 8002f26:	42a3      	cmp	r3, r4
 8002f28:	d3ee      	bcc.n	8002f08 <_realloc_r+0x14>
 8002f2a:	0021      	movs	r1, r4
 8002f2c:	0038      	movs	r0, r7
 8002f2e:	f7ff ff6b 	bl	8002e08 <_malloc_r>
 8002f32:	1e05      	subs	r5, r0, #0
 8002f34:	d0e8      	beq.n	8002f08 <_realloc_r+0x14>
 8002f36:	9b01      	ldr	r3, [sp, #4]
 8002f38:	0022      	movs	r2, r4
 8002f3a:	429c      	cmp	r4, r3
 8002f3c:	d900      	bls.n	8002f40 <_realloc_r+0x4c>
 8002f3e:	001a      	movs	r2, r3
 8002f40:	0031      	movs	r1, r6
 8002f42:	0028      	movs	r0, r5
 8002f44:	f7ff fed7 	bl	8002cf6 <memcpy>
 8002f48:	0031      	movs	r1, r6
 8002f4a:	0038      	movs	r0, r7
 8002f4c:	f7ff fef0 	bl	8002d30 <_free_r>
 8002f50:	e7da      	b.n	8002f08 <_realloc_r+0x14>
	...

08002f54 <_sbrk_r>:
 8002f54:	2300      	movs	r3, #0
 8002f56:	b570      	push	{r4, r5, r6, lr}
 8002f58:	4d06      	ldr	r5, [pc, #24]	; (8002f74 <_sbrk_r+0x20>)
 8002f5a:	0004      	movs	r4, r0
 8002f5c:	0008      	movs	r0, r1
 8002f5e:	602b      	str	r3, [r5, #0]
 8002f60:	f7fd fbc4 	bl	80006ec <_sbrk>
 8002f64:	1c43      	adds	r3, r0, #1
 8002f66:	d103      	bne.n	8002f70 <_sbrk_r+0x1c>
 8002f68:	682b      	ldr	r3, [r5, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d000      	beq.n	8002f70 <_sbrk_r+0x1c>
 8002f6e:	6023      	str	r3, [r4, #0]
 8002f70:	bd70      	pop	{r4, r5, r6, pc}
 8002f72:	46c0      	nop			; (mov r8, r8)
 8002f74:	200000e4 	.word	0x200000e4

08002f78 <__malloc_lock>:
 8002f78:	b510      	push	{r4, lr}
 8002f7a:	4802      	ldr	r0, [pc, #8]	; (8002f84 <__malloc_lock+0xc>)
 8002f7c:	f000 f814 	bl	8002fa8 <__retarget_lock_acquire_recursive>
 8002f80:	bd10      	pop	{r4, pc}
 8002f82:	46c0      	nop			; (mov r8, r8)
 8002f84:	200000e8 	.word	0x200000e8

08002f88 <__malloc_unlock>:
 8002f88:	b510      	push	{r4, lr}
 8002f8a:	4802      	ldr	r0, [pc, #8]	; (8002f94 <__malloc_unlock+0xc>)
 8002f8c:	f000 f80d 	bl	8002faa <__retarget_lock_release_recursive>
 8002f90:	bd10      	pop	{r4, pc}
 8002f92:	46c0      	nop			; (mov r8, r8)
 8002f94:	200000e8 	.word	0x200000e8

08002f98 <_malloc_usable_size_r>:
 8002f98:	1f0b      	subs	r3, r1, #4
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	1f18      	subs	r0, r3, #4
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	da01      	bge.n	8002fa6 <_malloc_usable_size_r+0xe>
 8002fa2:	580b      	ldr	r3, [r1, r0]
 8002fa4:	18c0      	adds	r0, r0, r3
 8002fa6:	4770      	bx	lr

08002fa8 <__retarget_lock_acquire_recursive>:
 8002fa8:	4770      	bx	lr

08002faa <__retarget_lock_release_recursive>:
 8002faa:	4770      	bx	lr

08002fac <_init>:
 8002fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fae:	46c0      	nop			; (mov r8, r8)
 8002fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fb2:	bc08      	pop	{r3}
 8002fb4:	469e      	mov	lr, r3
 8002fb6:	4770      	bx	lr

08002fb8 <_fini>:
 8002fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fbe:	bc08      	pop	{r3}
 8002fc0:	469e      	mov	lr, r3
 8002fc2:	4770      	bx	lr
