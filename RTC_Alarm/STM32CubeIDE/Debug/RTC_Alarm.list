
RTC_Alarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003198  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003254  08003254  00013254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032d8  080032d8  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  080032d8  080032d8  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032d8  080032d8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032d8  080032d8  000132d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032dc  080032dc  000132dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080032e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000090  08003370  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08003370  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000abec  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00007ffe  00000000  00000000  0002aca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c76  00000000  00000000  00032ca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007d0  00000000  00000000  00034918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00097b43  00000000  00000000  000350e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000006d8  00000000  00000000  000ccc30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000188a4  00000000  00000000  000cd308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e5bac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d88  00000000  00000000  000e5bfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000090 	.word	0x20000090
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800323c 	.word	0x0800323c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000094 	.word	0x20000094
 8000100:	0800323c 	.word	0x0800323c

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000230:	480d      	ldr	r0, [pc, #52]	; (8000268 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000232:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000234:	f000 fc1c 	bl	8000a70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000238:	480c      	ldr	r0, [pc, #48]	; (800026c <LoopForever+0x6>)
  ldr r1, =_edata
 800023a:	490d      	ldr	r1, [pc, #52]	; (8000270 <LoopForever+0xa>)
  ldr r2, =_sidata
 800023c:	4a0d      	ldr	r2, [pc, #52]	; (8000274 <LoopForever+0xe>)
  movs r3, #0
 800023e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000240:	e002      	b.n	8000248 <LoopCopyDataInit>

08000242 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000242:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000244:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000246:	3304      	adds	r3, #4

08000248 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000248:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800024a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800024c:	d3f9      	bcc.n	8000242 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800024e:	4a0a      	ldr	r2, [pc, #40]	; (8000278 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000250:	4c0a      	ldr	r4, [pc, #40]	; (800027c <LoopForever+0x16>)
  movs r3, #0
 8000252:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000254:	e001      	b.n	800025a <LoopFillZerobss>

08000256 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000256:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000258:	3204      	adds	r2, #4

0800025a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800025a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800025c:	d3fb      	bcc.n	8000256 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800025e:	f002 fb57 	bl	8002910 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000262:	f000 f877 	bl	8000354 <main>

08000266 <LoopForever>:

LoopForever:
  b LoopForever
 8000266:	e7fe      	b.n	8000266 <LoopForever>
  ldr   r0, =_estack
 8000268:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800026c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000270:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000274:	080032e0 	.word	0x080032e0
  ldr r2, =_sbss
 8000278:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800027c:	2000011c 	.word	0x2000011c

08000280 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000280:	e7fe      	b.n	8000280 <ADC1_COMP_IRQHandler>
	...

08000284 <BSP_GPIO_Init>:
  *         This parameter can be one of the following values:
  * @arg pin
  * @retval None
  */
void BSP_GPIO_Init(GPIO_PIN_TypeDef Pin)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b088      	sub	sp, #32
 8000288:	af00      	add	r7, sp, #0
 800028a:	0002      	movs	r2, r0
 800028c:	1dfb      	adds	r3, r7, #7
 800028e:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef  gpioinitstruct;

  /* Enable the GPIO_LED Clock */
  GPIOx_GPIO_CLK_ENABLE(Pin);
 8000290:	1dfb      	adds	r3, r7, #7
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d10b      	bne.n	80002b0 <BSP_GPIO_Init+0x2c>
 8000298:	4b14      	ldr	r3, [pc, #80]	; (80002ec <BSP_GPIO_Init+0x68>)
 800029a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800029c:	4b13      	ldr	r3, [pc, #76]	; (80002ec <BSP_GPIO_Init+0x68>)
 800029e:	2108      	movs	r1, #8
 80002a0:	430a      	orrs	r2, r1
 80002a2:	635a      	str	r2, [r3, #52]	; 0x34
 80002a4:	4b11      	ldr	r3, [pc, #68]	; (80002ec <BSP_GPIO_Init+0x68>)
 80002a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002a8:	2208      	movs	r2, #8
 80002aa:	4013      	ands	r3, r2
 80002ac:	60bb      	str	r3, [r7, #8]
 80002ae:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Pin];
 80002b0:	2380      	movs	r3, #128	; 0x80
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	001a      	movs	r2, r3
 80002b6:	210c      	movs	r1, #12
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	601a      	str	r2, [r3, #0]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002bc:	187b      	adds	r3, r7, r1
 80002be:	2201      	movs	r2, #1
 80002c0:	605a      	str	r2, [r3, #4]
  gpioinitstruct.Pull = GPIO_PULLUP;
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2201      	movs	r2, #1
 80002c6:	609a      	str	r2, [r3, #8]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	2203      	movs	r2, #3
 80002cc:	60da      	str	r2, [r3, #12]

  HAL_GPIO_Init(GPIO_PORT[Pin], &gpioinitstruct);
 80002ce:	1dfb      	adds	r3, r7, #7
 80002d0:	781a      	ldrb	r2, [r3, #0]
 80002d2:	4b07      	ldr	r3, [pc, #28]	; (80002f0 <BSP_GPIO_Init+0x6c>)
 80002d4:	0092      	lsls	r2, r2, #2
 80002d6:	58d3      	ldr	r3, [r2, r3]
 80002d8:	187a      	adds	r2, r7, r1
 80002da:	0011      	movs	r1, r2
 80002dc:	0018      	movs	r0, r3
 80002de:	f000 fd71 	bl	8000dc4 <HAL_GPIO_Init>
}
 80002e2:	46c0      	nop			; (mov r8, r8)
 80002e4:	46bd      	mov	sp, r7
 80002e6:	b008      	add	sp, #32
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	46c0      	nop			; (mov r8, r8)
 80002ec:	40021000 	.word	0x40021000
 80002f0:	20000000 	.word	0x20000000

080002f4 <BSP_GPIO_On>:
  *   This parameter can be one of following parameters:
  *     @arg PIN
  * @retval None
  */
void BSP_GPIO_On(GPIO_PIN_TypeDef Pin)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b082      	sub	sp, #8
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	0002      	movs	r2, r0
 80002fc:	1dfb      	adds	r3, r7, #7
 80002fe:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIO_PORT[Pin], GPIO_PIN[Pin], GPIO_PIN_SET);
 8000300:	1dfb      	adds	r3, r7, #7
 8000302:	781a      	ldrb	r2, [r3, #0]
 8000304:	4b06      	ldr	r3, [pc, #24]	; (8000320 <BSP_GPIO_On+0x2c>)
 8000306:	0092      	lsls	r2, r2, #2
 8000308:	58d3      	ldr	r3, [r2, r3]
 800030a:	2280      	movs	r2, #128	; 0x80
 800030c:	0091      	lsls	r1, r2, #2
 800030e:	2201      	movs	r2, #1
 8000310:	0018      	movs	r0, r3
 8000312:	f000 fed8 	bl	80010c6 <HAL_GPIO_WritePin>
}
 8000316:	46c0      	nop			; (mov r8, r8)
 8000318:	46bd      	mov	sp, r7
 800031a:	b002      	add	sp, #8
 800031c:	bd80      	pop	{r7, pc}
 800031e:	46c0      	nop			; (mov r8, r8)
 8000320:	20000000 	.word	0x20000000

08000324 <BSP_GPIO_Off>:
  *   This parameter can be one of following parameters:
  *     @arg PIN
  * @retval None
  */
void BSP_GPIO_Off(GPIO_PIN_TypeDef Pin)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	0002      	movs	r2, r0
 800032c:	1dfb      	adds	r3, r7, #7
 800032e:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIO_PORT[Pin], GPIO_PIN[Pin], GPIO_PIN_RESET);
 8000330:	1dfb      	adds	r3, r7, #7
 8000332:	781a      	ldrb	r2, [r3, #0]
 8000334:	4b06      	ldr	r3, [pc, #24]	; (8000350 <BSP_GPIO_Off+0x2c>)
 8000336:	0092      	lsls	r2, r2, #2
 8000338:	58d3      	ldr	r3, [r2, r3]
 800033a:	2280      	movs	r2, #128	; 0x80
 800033c:	0091      	lsls	r1, r2, #2
 800033e:	2200      	movs	r2, #0
 8000340:	0018      	movs	r0, r3
 8000342:	f000 fec0 	bl	80010c6 <HAL_GPIO_WritePin>
}
 8000346:	46c0      	nop			; (mov r8, r8)
 8000348:	46bd      	mov	sp, r7
 800034a:	b002      	add	sp, #8
 800034c:	bd80      	pop	{r7, pc}
 800034e:	46c0      	nop			; (mov r8, r8)
 8000350:	20000000 	.word	0x20000000

08000354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000358:	f000 fb96 	bl	8000a88 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* Configure LED4 */
  BSP_LED_Init(LED4);
 800035c:	2000      	movs	r0, #0
 800035e:	f000 fa99 	bl	8000894 <BSP_LED_Init>

  /* Configure PIO */
  BSP_GPIO_Init(PIO);
 8000362:	2000      	movs	r0, #0
 8000364:	f7ff ff8e 	bl	8000284 <BSP_GPIO_Init>

  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8000368:	2100      	movs	r1, #0
 800036a:	2000      	movs	r0, #0
 800036c:	f000 fb0a 	bl	8000984 <BSP_PB_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000370:	f000 f820 	bl	80003b4 <SystemClock_Config>

  /* Initialize all configured peripherals */



  MX_RTC_Init();
 8000374:	f000 f878 	bl	8000468 <MX_RTC_Init>

//  BSP_LED_Off(LED4);
  BSP_GPIO_On(PIO);
 8000378:	2000      	movs	r0, #0
 800037a:	f7ff ffbb 	bl	80002f4 <BSP_GPIO_On>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  RTCStatus = 1;
 800037e:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <main+0x58>)
 8000380:	2201      	movs	r2, #1
 8000382:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */
	  if(BSP_PB_GetState(BUTTON_USER) == 0)
 8000384:	2000      	movs	r0, #0
 8000386:	f000 fb5b 	bl	8000a40 <BSP_PB_GetState>
 800038a:	1e03      	subs	r3, r0, #0
 800038c:	d108      	bne.n	80003a0 <main+0x4c>
	  {
		  BSP_LED_On(LED4);
 800038e:	2000      	movs	r0, #0
 8000390:	f000 fab6 	bl	8000900 <BSP_LED_On>
		  BSP_GPIO_Off(PIO);
 8000394:	2000      	movs	r0, #0
 8000396:	f7ff ffc5 	bl	8000324 <BSP_GPIO_Off>
		  MX_RTC_Set_Alarm(0x3);
 800039a:	2003      	movs	r0, #3
 800039c:	f000 f8d0 	bl	8000540 <MX_RTC_Set_Alarm>
	  else{
//		  BSP_LED_Off(LED4);
	  }
    /* USER CODE BEGIN 3 */
    /* Display the updated Time */
    RTC_TimeShow(aShowTime);
 80003a0:	4b03      	ldr	r3, [pc, #12]	; (80003b0 <main+0x5c>)
 80003a2:	0018      	movs	r0, r3
 80003a4:	f000 f932 	bl	800060c <RTC_TimeShow>
	  if(BSP_PB_GetState(BUTTON_USER) == 0)
 80003a8:	e7ec      	b.n	8000384 <main+0x30>
 80003aa:	46c0      	nop			; (mov r8, r8)
 80003ac:	200000d8 	.word	0x200000d8
 80003b0:	20000004 	.word	0x20000004

080003b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003b4:	b590      	push	{r4, r7, lr}
 80003b6:	b093      	sub	sp, #76	; 0x4c
 80003b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ba:	2410      	movs	r4, #16
 80003bc:	193b      	adds	r3, r7, r4
 80003be:	0018      	movs	r0, r3
 80003c0:	2338      	movs	r3, #56	; 0x38
 80003c2:	001a      	movs	r2, r3
 80003c4:	2100      	movs	r1, #0
 80003c6:	f002 fac7 	bl	8002958 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ca:	003b      	movs	r3, r7
 80003cc:	0018      	movs	r0, r3
 80003ce:	2310      	movs	r3, #16
 80003d0:	001a      	movs	r2, r3
 80003d2:	2100      	movs	r1, #0
 80003d4:	f002 fac0 	bl	8002958 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003d8:	193b      	adds	r3, r7, r4
 80003da:	2202      	movs	r2, #2
 80003dc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003de:	193b      	adds	r3, r7, r4
 80003e0:	2280      	movs	r2, #128	; 0x80
 80003e2:	0052      	lsls	r2, r2, #1
 80003e4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80003e6:	0021      	movs	r1, r4
 80003e8:	187b      	adds	r3, r7, r1
 80003ea:	2200      	movs	r2, #0
 80003ec:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ee:	187b      	adds	r3, r7, r1
 80003f0:	2240      	movs	r2, #64	; 0x40
 80003f2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003f4:	187b      	adds	r3, r7, r1
 80003f6:	2202      	movs	r2, #2
 80003f8:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003fa:	187b      	adds	r3, r7, r1
 80003fc:	2202      	movs	r2, #2
 80003fe:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000400:	187b      	adds	r3, r7, r1
 8000402:	2230      	movs	r2, #48	; 0x30
 8000404:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000406:	187b      	adds	r3, r7, r1
 8000408:	2246      	movs	r2, #70	; 0x46
 800040a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV10;
 800040c:	187b      	adds	r3, r7, r1
 800040e:	2290      	movs	r2, #144	; 0x90
 8000410:	0352      	lsls	r2, r2, #13
 8000412:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV5;
 8000414:	187b      	adds	r3, r7, r1
 8000416:	2280      	movs	r2, #128	; 0x80
 8000418:	0512      	lsls	r2, r2, #20
 800041a:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV5;
 800041c:	187b      	adds	r3, r7, r1
 800041e:	2280      	movs	r2, #128	; 0x80
 8000420:	0612      	lsls	r2, r2, #24
 8000422:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000424:	187b      	adds	r3, r7, r1
 8000426:	0018      	movs	r0, r3
 8000428:	f000 fe94 	bl	8001154 <HAL_RCC_OscConfig>
 800042c:	1e03      	subs	r3, r0, #0
 800042e:	d001      	beq.n	8000434 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000430:	f000 f916 	bl	8000660 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000434:	003b      	movs	r3, r7
 8000436:	2207      	movs	r2, #7
 8000438:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800043a:	003b      	movs	r3, r7
 800043c:	2202      	movs	r2, #2
 800043e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000440:	003b      	movs	r3, r7
 8000442:	2200      	movs	r2, #0
 8000444:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000446:	003b      	movs	r3, r7
 8000448:	2200      	movs	r2, #0
 800044a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800044c:	003b      	movs	r3, r7
 800044e:	2102      	movs	r1, #2
 8000450:	0018      	movs	r0, r3
 8000452:	f001 f999 	bl	8001788 <HAL_RCC_ClockConfig>
 8000456:	1e03      	subs	r3, r0, #0
 8000458:	d001      	beq.n	800045e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800045a:	f000 f901 	bl	8000660 <Error_Handler>
  }
}
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	46bd      	mov	sp, r7
 8000462:	b013      	add	sp, #76	; 0x4c
 8000464:	bd90      	pop	{r4, r7, pc}
	...

08000468 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b086      	sub	sp, #24
 800046c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800046e:	1d3b      	adds	r3, r7, #4
 8000470:	0018      	movs	r0, r3
 8000472:	2314      	movs	r3, #20
 8000474:	001a      	movs	r2, r3
 8000476:	2100      	movs	r1, #0
 8000478:	f002 fa6e 	bl	8002958 <memset>
  RTC_DateTypeDef sDate = {0};
 800047c:	003b      	movs	r3, r7
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000482:	4b2d      	ldr	r3, [pc, #180]	; (8000538 <MX_RTC_Init+0xd0>)
 8000484:	4a2d      	ldr	r2, [pc, #180]	; (800053c <MX_RTC_Init+0xd4>)
 8000486:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000488:	4b2b      	ldr	r3, [pc, #172]	; (8000538 <MX_RTC_Init+0xd0>)
 800048a:	2200      	movs	r2, #0
 800048c:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = RTC_ASYNCH_PREDIV;
 800048e:	4b2a      	ldr	r3, [pc, #168]	; (8000538 <MX_RTC_Init+0xd0>)
 8000490:	227f      	movs	r2, #127	; 0x7f
 8000492:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = RTC_SYNCH_PREDIV;
 8000494:	4b28      	ldr	r3, [pc, #160]	; (8000538 <MX_RTC_Init+0xd0>)
 8000496:	22ff      	movs	r2, #255	; 0xff
 8000498:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800049a:	4b27      	ldr	r3, [pc, #156]	; (8000538 <MX_RTC_Init+0xd0>)
 800049c:	2200      	movs	r2, #0
 800049e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80004a0:	4b25      	ldr	r3, [pc, #148]	; (8000538 <MX_RTC_Init+0xd0>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80004a6:	4b24      	ldr	r3, [pc, #144]	; (8000538 <MX_RTC_Init+0xd0>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80004ac:	4b22      	ldr	r3, [pc, #136]	; (8000538 <MX_RTC_Init+0xd0>)
 80004ae:	2280      	movs	r2, #128	; 0x80
 80004b0:	05d2      	lsls	r2, r2, #23
 80004b2:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80004b4:	4b20      	ldr	r3, [pc, #128]	; (8000538 <MX_RTC_Init+0xd0>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80004ba:	4b1f      	ldr	r3, [pc, #124]	; (8000538 <MX_RTC_Init+0xd0>)
 80004bc:	0018      	movs	r0, r3
 80004be:	f001 fd2d 	bl	8001f1c <HAL_RTC_Init>
 80004c2:	1e03      	subs	r3, r0, #0
 80004c4:	d001      	beq.n	80004ca <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80004c6:	f000 f8cb 	bl	8000660 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x2;
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	2202      	movs	r2, #2
 80004ce:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x20;
 80004d0:	1d3b      	adds	r3, r7, #4
 80004d2:	2220      	movs	r2, #32
 80004d4:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80004d6:	1d3b      	adds	r3, r7, #4
 80004d8:	2200      	movs	r2, #0
 80004da:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	2200      	movs	r2, #0
 80004e0:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	2200      	movs	r2, #0
 80004e6:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	2200      	movs	r2, #0
 80004ec:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80004ee:	1d39      	adds	r1, r7, #4
 80004f0:	4b11      	ldr	r3, [pc, #68]	; (8000538 <MX_RTC_Init+0xd0>)
 80004f2:	2201      	movs	r2, #1
 80004f4:	0018      	movs	r0, r3
 80004f6:	f001 fda7 	bl	8002048 <HAL_RTC_SetTime>
 80004fa:	1e03      	subs	r3, r0, #0
 80004fc:	d001      	beq.n	8000502 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 80004fe:	f000 f8af 	bl	8000660 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000502:	003b      	movs	r3, r7
 8000504:	2201      	movs	r2, #1
 8000506:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_FEBRUARY;
 8000508:	003b      	movs	r3, r7
 800050a:	2202      	movs	r2, #2
 800050c:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x18;
 800050e:	003b      	movs	r3, r7
 8000510:	2218      	movs	r2, #24
 8000512:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x14;
 8000514:	003b      	movs	r3, r7
 8000516:	2214      	movs	r2, #20
 8000518:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800051a:	0039      	movs	r1, r7
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <MX_RTC_Init+0xd0>)
 800051e:	2201      	movs	r2, #1
 8000520:	0018      	movs	r0, r3
 8000522:	f001 fe95 	bl	8002250 <HAL_RTC_SetDate>
 8000526:	1e03      	subs	r3, r0, #0
 8000528:	d001      	beq.n	800052e <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 800052a:	f000 f899 	bl	8000660 <Error_Handler>
  }


}
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	46bd      	mov	sp, r7
 8000532:	b006      	add	sp, #24
 8000534:	bd80      	pop	{r7, pc}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	200000ac 	.word	0x200000ac
 800053c:	40002800 	.word	0x40002800

08000540 <MX_RTC_Set_Alarm>:
/**
  * @brief RTC Alarm set Function
  * @param None
  * @retval None
  */
static void MX_RTC_Set_Alarm(uint8_t OffSec){
 8000540:	b5b0      	push	{r4, r5, r7, lr}
 8000542:	b088      	sub	sp, #32
 8000544:	af00      	add	r7, sp, #0
 8000546:	0002      	movs	r2, r0
 8000548:	1dfb      	adds	r3, r7, #7
 800054a:	701a      	strb	r2, [r3, #0]

	RTC_DateTypeDef sdatestructureget;
	RTC_TimeTypeDef stimestructureget;

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BCD);
 800054c:	2408      	movs	r4, #8
 800054e:	1939      	adds	r1, r7, r4
 8000550:	4b25      	ldr	r3, [pc, #148]	; (80005e8 <MX_RTC_Set_Alarm+0xa8>)
 8000552:	2201      	movs	r2, #1
 8000554:	0018      	movs	r0, r3
 8000556:	f001 fe1f 	bl	8002198 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BCD);
 800055a:	251c      	movs	r5, #28
 800055c:	1979      	adds	r1, r7, r5
 800055e:	4b22      	ldr	r3, [pc, #136]	; (80005e8 <MX_RTC_Set_Alarm+0xa8>)
 8000560:	2201      	movs	r2, #1
 8000562:	0018      	movs	r0, r3
 8000564:	f001 ff06 	bl	8002374 <HAL_RTC_GetDate>



	sAlarm.AlarmTime.Hours = stimestructureget.Hours;
 8000568:	0021      	movs	r1, r4
 800056a:	187b      	adds	r3, r7, r1
 800056c:	781a      	ldrb	r2, [r3, #0]
 800056e:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <MX_RTC_Set_Alarm+0xac>)
 8000570:	701a      	strb	r2, [r3, #0]
	sAlarm.AlarmTime.Minutes = stimestructureget.Minutes;
 8000572:	187b      	adds	r3, r7, r1
 8000574:	785a      	ldrb	r2, [r3, #1]
 8000576:	4b1d      	ldr	r3, [pc, #116]	; (80005ec <MX_RTC_Set_Alarm+0xac>)
 8000578:	705a      	strb	r2, [r3, #1]
	sAlarm.AlarmTime.Seconds = stimestructureget.Seconds + OffSec;
 800057a:	187b      	adds	r3, r7, r1
 800057c:	789a      	ldrb	r2, [r3, #2]
 800057e:	1dfb      	adds	r3, r7, #7
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	18d3      	adds	r3, r2, r3
 8000584:	b2da      	uxtb	r2, r3
 8000586:	4b19      	ldr	r3, [pc, #100]	; (80005ec <MX_RTC_Set_Alarm+0xac>)
 8000588:	709a      	strb	r2, [r3, #2]
	sAlarm.AlarmTime.SubSeconds = stimestructureget.SubSeconds;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	685a      	ldr	r2, [r3, #4]
 800058e:	4b17      	ldr	r3, [pc, #92]	; (80005ec <MX_RTC_Set_Alarm+0xac>)
 8000590:	605a      	str	r2, [r3, #4]
	sAlarm.AlarmTime.DayLightSaving = stimestructureget.DayLightSaving;
 8000592:	187b      	adds	r3, r7, r1
 8000594:	68da      	ldr	r2, [r3, #12]
 8000596:	4b15      	ldr	r3, [pc, #84]	; (80005ec <MX_RTC_Set_Alarm+0xac>)
 8000598:	60da      	str	r2, [r3, #12]
	sAlarm.AlarmTime.StoreOperation = stimestructureget.StoreOperation;
 800059a:	187b      	adds	r3, r7, r1
 800059c:	691a      	ldr	r2, [r3, #16]
 800059e:	4b13      	ldr	r3, [pc, #76]	; (80005ec <MX_RTC_Set_Alarm+0xac>)
 80005a0:	611a      	str	r2, [r3, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80005a2:	4b12      	ldr	r3, [pc, #72]	; (80005ec <MX_RTC_Set_Alarm+0xac>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	615a      	str	r2, [r3, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 80005a8:	4b10      	ldr	r3, [pc, #64]	; (80005ec <MX_RTC_Set_Alarm+0xac>)
 80005aa:	22f0      	movs	r2, #240	; 0xf0
 80005ac:	0512      	lsls	r2, r2, #20
 80005ae:	619a      	str	r2, [r3, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 80005b0:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <MX_RTC_Set_Alarm+0xac>)
 80005b2:	2280      	movs	r2, #128	; 0x80
 80005b4:	05d2      	lsls	r2, r2, #23
 80005b6:	61da      	str	r2, [r3, #28]
	sAlarm.AlarmDateWeekDay = sdatestructureget.WeekDay;
 80005b8:	197b      	adds	r3, r7, r5
 80005ba:	7819      	ldrb	r1, [r3, #0]
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <MX_RTC_Set_Alarm+0xac>)
 80005be:	2220      	movs	r2, #32
 80005c0:	5499      	strb	r1, [r3, r2]
	sAlarm.Alarm = RTC_ALARM_A;
 80005c2:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <MX_RTC_Set_Alarm+0xac>)
 80005c4:	2280      	movs	r2, #128	; 0x80
 80005c6:	0052      	lsls	r2, r2, #1
 80005c8:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80005ca:	4908      	ldr	r1, [pc, #32]	; (80005ec <MX_RTC_Set_Alarm+0xac>)
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <MX_RTC_Set_Alarm+0xa8>)
 80005ce:	2201      	movs	r2, #1
 80005d0:	0018      	movs	r0, r3
 80005d2:	f001 ff1d 	bl	8002410 <HAL_RTC_SetAlarm_IT>
 80005d6:	1e03      	subs	r3, r0, #0
 80005d8:	d001      	beq.n	80005de <MX_RTC_Set_Alarm+0x9e>
	{
		Error_Handler();
 80005da:	f000 f841 	bl	8000660 <Error_Handler>
	}
}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	46bd      	mov	sp, r7
 80005e2:	b008      	add	sp, #32
 80005e4:	bdb0      	pop	{r4, r5, r7, pc}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	200000ac 	.word	0x200000ac
 80005ec:	200000dc 	.word	0x200000dc

080005f0 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm callback
  * @param  hrtc : RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]

  /* Turn LED4 on: Alarm generation */
  BSP_LED_Off(LED4);
 80005f8:	2000      	movs	r0, #0
 80005fa:	f000 f997 	bl	800092c <BSP_LED_Off>

  /* Turn PIO on: Alarm generation */
  BSP_GPIO_On(PIO);
 80005fe:	2000      	movs	r0, #0
 8000600:	f7ff fe78 	bl	80002f4 <BSP_GPIO_On>

}
 8000604:	46c0      	nop			; (mov r8, r8)
 8000606:	46bd      	mov	sp, r7
 8000608:	b002      	add	sp, #8
 800060a:	bd80      	pop	{r7, pc}

0800060c <RTC_TimeShow>:
  * @brief  Display the current time.
  * @param  showtime : pointer to buffer
  * @retval None
  */
static void RTC_TimeShow(uint8_t *showtime)
{
 800060c:	b590      	push	{r4, r7, lr}
 800060e:	b08b      	sub	sp, #44	; 0x2c
 8000610:	af02      	add	r7, sp, #8
 8000612:	6078      	str	r0, [r7, #4]
  RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;

  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 8000614:	2408      	movs	r4, #8
 8000616:	1939      	adds	r1, r7, r4
 8000618:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <RTC_TimeShow+0x4c>)
 800061a:	2200      	movs	r2, #0
 800061c:	0018      	movs	r0, r3
 800061e:	f001 fdbb 	bl	8002198 <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 8000622:	231c      	movs	r3, #28
 8000624:	18f9      	adds	r1, r7, r3
 8000626:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <RTC_TimeShow+0x4c>)
 8000628:	2200      	movs	r2, #0
 800062a:	0018      	movs	r0, r3
 800062c:	f001 fea2 	bl	8002374 <HAL_RTC_GetDate>
  /* Display time Format : hh:mm:ss */
  sprintf((char *)showtime, "%02d:%02d:%02d", stimestructureget.Hours, stimestructureget.Minutes, stimestructureget.Seconds);
 8000630:	0021      	movs	r1, r4
 8000632:	187b      	adds	r3, r7, r1
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	001a      	movs	r2, r3
 8000638:	187b      	adds	r3, r7, r1
 800063a:	785b      	ldrb	r3, [r3, #1]
 800063c:	001c      	movs	r4, r3
 800063e:	187b      	adds	r3, r7, r1
 8000640:	789b      	ldrb	r3, [r3, #2]
 8000642:	4906      	ldr	r1, [pc, #24]	; (800065c <RTC_TimeShow+0x50>)
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	9300      	str	r3, [sp, #0]
 8000648:	0023      	movs	r3, r4
 800064a:	f002 f98d 	bl	8002968 <siprintf>
}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	46bd      	mov	sp, r7
 8000652:	b009      	add	sp, #36	; 0x24
 8000654:	bd90      	pop	{r4, r7, pc}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	200000ac 	.word	0x200000ac
 800065c:	08003254 	.word	0x08003254

08000660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  RTCStatus = 0xE;
 8000664:	4b05      	ldr	r3, [pc, #20]	; (800067c <Error_Handler+0x1c>)
 8000666:	220e      	movs	r2, #14
 8000668:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* Toggle LED4 with a period of one second */
    BSP_LED_Toggle(LED4);
 800066a:	2000      	movs	r0, #0
 800066c:	f000 f974 	bl	8000958 <BSP_LED_Toggle>
    HAL_Delay(1000);
 8000670:	23fa      	movs	r3, #250	; 0xfa
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	0018      	movs	r0, r3
 8000676:	f000 fa8d 	bl	8000b94 <HAL_Delay>
    BSP_LED_Toggle(LED4);
 800067a:	e7f6      	b.n	800066a <Error_Handler+0xa>
 800067c:	200000d8 	.word	0x200000d8

08000680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000686:	4b11      	ldr	r3, [pc, #68]	; (80006cc <HAL_MspInit+0x4c>)
 8000688:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <HAL_MspInit+0x4c>)
 800068c:	2101      	movs	r1, #1
 800068e:	430a      	orrs	r2, r1
 8000690:	641a      	str	r2, [r3, #64]	; 0x40
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <HAL_MspInit+0x4c>)
 8000694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000696:	2201      	movs	r2, #1
 8000698:	4013      	ands	r3, r2
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <HAL_MspInit+0x4c>)
 80006a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006a2:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <HAL_MspInit+0x4c>)
 80006a4:	2180      	movs	r1, #128	; 0x80
 80006a6:	0549      	lsls	r1, r1, #21
 80006a8:	430a      	orrs	r2, r1
 80006aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80006ac:	4b07      	ldr	r3, [pc, #28]	; (80006cc <HAL_MspInit+0x4c>)
 80006ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006b0:	2380      	movs	r3, #128	; 0x80
 80006b2:	055b      	lsls	r3, r3, #21
 80006b4:	4013      	ands	r3, r2
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80006ba:	23c0      	movs	r3, #192	; 0xc0
 80006bc:	00db      	lsls	r3, r3, #3
 80006be:	0018      	movs	r0, r3
 80006c0:	f000 fa8c 	bl	8000bdc <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006c4:	46c0      	nop			; (mov r8, r8)
 80006c6:	46bd      	mov	sp, r7
 80006c8:	b002      	add	sp, #8
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40021000 	.word	0x40021000

080006d0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80006d0:	b590      	push	{r4, r7, lr}
 80006d2:	b0a1      	sub	sp, #132	; 0x84
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a41      	ldr	r2, [pc, #260]	; (80007e4 <HAL_RTC_MspInit+0x114>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d000      	beq.n	80006e4 <HAL_RTC_MspInit+0x14>
 80006e2:	e07b      	b.n	80007dc <HAL_RTC_MspInit+0x10c>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
    RCC_OscInitTypeDef        RCC_OscInitStruct = {0};
 80006e4:	2340      	movs	r3, #64	; 0x40
 80006e6:	18fb      	adds	r3, r7, r3
 80006e8:	0018      	movs	r0, r3
 80006ea:	2338      	movs	r3, #56	; 0x38
 80006ec:	001a      	movs	r2, r3
 80006ee:	2100      	movs	r1, #0
 80006f0:	f002 f932 	bl	8002958 <memset>
    RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct = {0};
 80006f4:	240c      	movs	r4, #12
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	0018      	movs	r0, r3
 80006fa:	2334      	movs	r3, #52	; 0x34
 80006fc:	001a      	movs	r2, r3
 80006fe:	2100      	movs	r1, #0
 8000700:	f002 f92a 	bl	8002958 <memset>

    /* Enables the PWR Clock and Enables access to the backup domain */
    /* To enable access on RTC registers */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000704:	4b38      	ldr	r3, [pc, #224]	; (80007e8 <HAL_RTC_MspInit+0x118>)
 8000706:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000708:	4b37      	ldr	r3, [pc, #220]	; (80007e8 <HAL_RTC_MspInit+0x118>)
 800070a:	2180      	movs	r1, #128	; 0x80
 800070c:	0549      	lsls	r1, r1, #21
 800070e:	430a      	orrs	r2, r1
 8000710:	63da      	str	r2, [r3, #60]	; 0x3c
 8000712:	4b35      	ldr	r3, [pc, #212]	; (80007e8 <HAL_RTC_MspInit+0x118>)
 8000714:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000716:	2380      	movs	r3, #128	; 0x80
 8000718:	055b      	lsls	r3, r3, #21
 800071a:	4013      	ands	r3, r2
 800071c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800071e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    HAL_PWR_EnableBkUpAccess();
 8000720:	f000 fd0a 	bl	8001138 <HAL_PWR_EnableBkUpAccess>

    /* Get RTC clock configuration */
    HAL_RCCEx_GetPeriphCLKConfig(&PeriphClkInitStruct);
 8000724:	193b      	adds	r3, r7, r4
 8000726:	0018      	movs	r0, r3
 8000728:	f001 fb70 	bl	8001e0c <HAL_RCCEx_GetPeriphCLKConfig>

    /*In case of RTC clock already enable, make sure it's the good one */
    if (PeriphClkInitStruct.RTCClockSelection == RtcClockSource)
 800072c:	193b      	adds	r3, r7, r4
 800072e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000730:	4b2e      	ldr	r3, [pc, #184]	; (80007ec <HAL_RTC_MspInit+0x11c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	429a      	cmp	r2, r3
 8000736:	d034      	beq.n	80007a2 <HAL_RTC_MspInit+0xd2>
    {
      /* Do nothing */
    }
    else
    {
      PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000738:	193b      	adds	r3, r7, r4
 800073a:	2280      	movs	r2, #128	; 0x80
 800073c:	0292      	lsls	r2, r2, #10
 800073e:	601a      	str	r2, [r3, #0]

      /* If selected source was previously the opposite source clock, first select none*/
      if (PeriphClkInitStruct.RTCClockSelection != RCC_RTCCLKSOURCE_NONE)
 8000740:	193b      	adds	r3, r7, r4
 8000742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000744:	2b00      	cmp	r3, #0
 8000746:	d00a      	beq.n	800075e <HAL_RTC_MspInit+0x8e>
      {
        PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_NONE;
 8000748:	193b      	adds	r3, r7, r4
 800074a:	2200      	movs	r2, #0
 800074c:	631a      	str	r2, [r3, #48]	; 0x30
        if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800074e:	193b      	adds	r3, r7, r4
 8000750:	0018      	movs	r0, r3
 8000752:	f001 f9a3 	bl	8001a9c <HAL_RCCEx_PeriphCLKConfig>
 8000756:	1e03      	subs	r3, r0, #0
 8000758:	d001      	beq.n	800075e <HAL_RTC_MspInit+0x8e>
        {
          Error_Handler();
 800075a:	f7ff ff81 	bl	8000660 <Error_Handler>
        }
      }

      /* Configure LSE/LSI as RTC clock source */
#ifdef RTC_CLOCK_SOURCE_LSE
      RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_LSE;
 800075e:	2140      	movs	r1, #64	; 0x40
 8000760:	187b      	adds	r3, r7, r1
 8000762:	220c      	movs	r2, #12
 8000764:	601a      	str	r2, [r3, #0]
      RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000766:	187b      	adds	r3, r7, r1
 8000768:	2200      	movs	r2, #0
 800076a:	61da      	str	r2, [r3, #28]
      RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800076c:	187b      	adds	r3, r7, r1
 800076e:	2201      	movs	r2, #1
 8000770:	609a      	str	r2, [r3, #8]
      RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
 8000772:	187b      	adds	r3, r7, r1
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
      RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
#else
#error Please select the RTC Clock source inside the main.h file
#endif /*RTC_CLOCK_SOURCE_LSE*/

      if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000778:	187b      	adds	r3, r7, r1
 800077a:	0018      	movs	r0, r3
 800077c:	f000 fcea 	bl	8001154 <HAL_RCC_OscConfig>
 8000780:	1e03      	subs	r3, r0, #0
 8000782:	d001      	beq.n	8000788 <HAL_RTC_MspInit+0xb8>
      {
        Error_Handler();
 8000784:	f7ff ff6c 	bl	8000660 <Error_Handler>
      }

      PeriphClkInitStruct.RTCClockSelection = RtcClockSource;
 8000788:	4b18      	ldr	r3, [pc, #96]	; (80007ec <HAL_RTC_MspInit+0x11c>)
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	210c      	movs	r1, #12
 800078e:	187b      	adds	r3, r7, r1
 8000790:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000792:	187b      	adds	r3, r7, r1
 8000794:	0018      	movs	r0, r3
 8000796:	f001 f981 	bl	8001a9c <HAL_RCCEx_PeriphCLKConfig>
 800079a:	1e03      	subs	r3, r0, #0
 800079c:	d001      	beq.n	80007a2 <HAL_RTC_MspInit+0xd2>
      {
        Error_Handler();
 800079e:	f7ff ff5f 	bl	8000660 <Error_Handler>
      }
    }

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80007a2:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <HAL_RTC_MspInit+0x118>)
 80007a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80007a6:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <HAL_RTC_MspInit+0x118>)
 80007a8:	2180      	movs	r1, #128	; 0x80
 80007aa:	0209      	lsls	r1, r1, #8
 80007ac:	430a      	orrs	r2, r1
 80007ae:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80007b0:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <HAL_RTC_MspInit+0x118>)
 80007b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <HAL_RTC_MspInit+0x118>)
 80007b6:	2180      	movs	r1, #128	; 0x80
 80007b8:	00c9      	lsls	r1, r1, #3
 80007ba:	430a      	orrs	r2, r1
 80007bc:	63da      	str	r2, [r3, #60]	; 0x3c
 80007be:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <HAL_RTC_MspInit+0x118>)
 80007c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007c2:	2380      	movs	r3, #128	; 0x80
 80007c4:	00db      	lsls	r3, r3, #3
 80007c6:	4013      	ands	r3, r2
 80007c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80007ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 80007cc:	2200      	movs	r2, #0
 80007ce:	2100      	movs	r1, #0
 80007d0:	2002      	movs	r0, #2
 80007d2:	f000 fac5 	bl	8000d60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 80007d6:	2002      	movs	r0, #2
 80007d8:	f000 fad7 	bl	8000d8a <HAL_NVIC_EnableIRQ>


  /* USER CODE END RTC_MspInit 1 */
  }

}
 80007dc:	46c0      	nop			; (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	b021      	add	sp, #132	; 0x84
 80007e2:	bd90      	pop	{r4, r7, pc}
 80007e4:	40002800 	.word	0x40002800
 80007e8:	40021000 	.word	0x40021000
 80007ec:	20000014 	.word	0x20000014

080007f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007f4:	46c0      	nop			; (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007fe:	e7fe      	b.n	80007fe <HardFault_Handler+0x4>

08000800 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000804:	f000 f9aa 	bl	8000b5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000808:	46c0      	nop			; (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000814:	4b03      	ldr	r3, [pc, #12]	; (8000824 <RTC_TAMP_IRQHandler+0x14>)
 8000816:	0018      	movs	r0, r3
 8000818:	f001 ff3a 	bl	8002690 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 800081c:	46c0      	nop			; (mov r8, r8)
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	200000ac 	.word	0x200000ac

08000828 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000830:	4a14      	ldr	r2, [pc, #80]	; (8000884 <_sbrk+0x5c>)
 8000832:	4b15      	ldr	r3, [pc, #84]	; (8000888 <_sbrk+0x60>)
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800083c:	4b13      	ldr	r3, [pc, #76]	; (800088c <_sbrk+0x64>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d102      	bne.n	800084a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000844:	4b11      	ldr	r3, [pc, #68]	; (800088c <_sbrk+0x64>)
 8000846:	4a12      	ldr	r2, [pc, #72]	; (8000890 <_sbrk+0x68>)
 8000848:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <_sbrk+0x64>)
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	18d3      	adds	r3, r2, r3
 8000852:	693a      	ldr	r2, [r7, #16]
 8000854:	429a      	cmp	r2, r3
 8000856:	d207      	bcs.n	8000868 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000858:	f002 f854 	bl	8002904 <__errno>
 800085c:	0003      	movs	r3, r0
 800085e:	220c      	movs	r2, #12
 8000860:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000862:	2301      	movs	r3, #1
 8000864:	425b      	negs	r3, r3
 8000866:	e009      	b.n	800087c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000868:	4b08      	ldr	r3, [pc, #32]	; (800088c <_sbrk+0x64>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800086e:	4b07      	ldr	r3, [pc, #28]	; (800088c <_sbrk+0x64>)
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	18d2      	adds	r2, r2, r3
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <_sbrk+0x64>)
 8000878:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800087a:	68fb      	ldr	r3, [r7, #12]
}
 800087c:	0018      	movs	r0, r3
 800087e:	46bd      	mov	sp, r7
 8000880:	b006      	add	sp, #24
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20009000 	.word	0x20009000
 8000888:	00000400 	.word	0x00000400
 800088c:	20000104 	.word	0x20000104
 8000890:	20000120 	.word	0x20000120

08000894 <BSP_LED_Init>:
  *         This parameter can be one of the following values:
  * @arg LED4
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b088      	sub	sp, #32
 8000898:	af00      	add	r7, sp, #0
 800089a:	0002      	movs	r2, r0
 800089c:	1dfb      	adds	r3, r7, #7
 800089e:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef  gpioinitstruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80008a0:	1dfb      	adds	r3, r7, #7
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d10b      	bne.n	80008c0 <BSP_LED_Init+0x2c>
 80008a8:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <BSP_LED_Init+0x64>)
 80008aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <BSP_LED_Init+0x64>)
 80008ae:	2101      	movs	r1, #1
 80008b0:	430a      	orrs	r2, r1
 80008b2:	635a      	str	r2, [r3, #52]	; 0x34
 80008b4:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <BSP_LED_Init+0x64>)
 80008b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008b8:	2201      	movs	r2, #1
 80008ba:	4013      	ands	r3, r2
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = LED_PIN[Led];
 80008c0:	2320      	movs	r3, #32
 80008c2:	001a      	movs	r2, r3
 80008c4:	210c      	movs	r1, #12
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	601a      	str	r2, [r3, #0]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	2201      	movs	r2, #1
 80008ce:	605a      	str	r2, [r3, #4]
  gpioinitstruct.Pull = GPIO_NOPULL;
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2203      	movs	r2, #3
 80008da:	60da      	str	r2, [r3, #12]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpioinitstruct);
 80008dc:	1dfb      	adds	r3, r7, #7
 80008de:	781a      	ldrb	r2, [r3, #0]
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <BSP_LED_Init+0x68>)
 80008e2:	0092      	lsls	r2, r2, #2
 80008e4:	58d3      	ldr	r3, [r2, r3]
 80008e6:	187a      	adds	r2, r7, r1
 80008e8:	0011      	movs	r1, r2
 80008ea:	0018      	movs	r0, r3
 80008ec:	f000 fa6a 	bl	8000dc4 <HAL_GPIO_Init>
}
 80008f0:	46c0      	nop			; (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	b008      	add	sp, #32
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40021000 	.word	0x40021000
 80008fc:	20000018 	.word	0x20000018

08000900 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED4
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	0002      	movs	r2, r0
 8000908:	1dfb      	adds	r3, r7, #7
 800090a:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 800090c:	1dfb      	adds	r3, r7, #7
 800090e:	781a      	ldrb	r2, [r3, #0]
 8000910:	4b05      	ldr	r3, [pc, #20]	; (8000928 <BSP_LED_On+0x28>)
 8000912:	0092      	lsls	r2, r2, #2
 8000914:	58d3      	ldr	r3, [r2, r3]
 8000916:	2120      	movs	r1, #32
 8000918:	2201      	movs	r2, #1
 800091a:	0018      	movs	r0, r3
 800091c:	f000 fbd3 	bl	80010c6 <HAL_GPIO_WritePin>
}
 8000920:	46c0      	nop			; (mov r8, r8)
 8000922:	46bd      	mov	sp, r7
 8000924:	b002      	add	sp, #8
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000018 	.word	0x20000018

0800092c <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *     @arg LED4
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	0002      	movs	r2, r0
 8000934:	1dfb      	adds	r3, r7, #7
 8000936:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8000938:	1dfb      	adds	r3, r7, #7
 800093a:	781a      	ldrb	r2, [r3, #0]
 800093c:	4b05      	ldr	r3, [pc, #20]	; (8000954 <BSP_LED_Off+0x28>)
 800093e:	0092      	lsls	r2, r2, #2
 8000940:	58d3      	ldr	r3, [r2, r3]
 8000942:	2120      	movs	r1, #32
 8000944:	2200      	movs	r2, #0
 8000946:	0018      	movs	r0, r3
 8000948:	f000 fbbd 	bl	80010c6 <HAL_GPIO_WritePin>
}
 800094c:	46c0      	nop			; (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	b002      	add	sp, #8
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000018 	.word	0x20000018

08000958 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *     @arg LED4
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	0002      	movs	r2, r0
 8000960:	1dfb      	adds	r3, r7, #7
 8000962:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8000964:	1dfb      	adds	r3, r7, #7
 8000966:	781a      	ldrb	r2, [r3, #0]
 8000968:	4b05      	ldr	r3, [pc, #20]	; (8000980 <BSP_LED_Toggle+0x28>)
 800096a:	0092      	lsls	r2, r2, #2
 800096c:	58d3      	ldr	r3, [r2, r3]
 800096e:	2220      	movs	r2, #32
 8000970:	0011      	movs	r1, r2
 8000972:	0018      	movs	r0, r3
 8000974:	f000 fbc4 	bl	8001100 <HAL_GPIO_TogglePin>
}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	b002      	add	sp, #8
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000018 	.word	0x20000018

08000984 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b088      	sub	sp, #32
 8000988:	af00      	add	r7, sp, #0
 800098a:	0002      	movs	r2, r0
 800098c:	1dfb      	adds	r3, r7, #7
 800098e:	701a      	strb	r2, [r3, #0]
 8000990:	1dbb      	adds	r3, r7, #6
 8000992:	1c0a      	adds	r2, r1, #0
 8000994:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef gpioinitstruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000996:	1dfb      	adds	r3, r7, #7
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d10b      	bne.n	80009b6 <BSP_PB_Init+0x32>
 800099e:	4b26      	ldr	r3, [pc, #152]	; (8000a38 <BSP_PB_Init+0xb4>)
 80009a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009a2:	4b25      	ldr	r3, [pc, #148]	; (8000a38 <BSP_PB_Init+0xb4>)
 80009a4:	2104      	movs	r1, #4
 80009a6:	430a      	orrs	r2, r1
 80009a8:	635a      	str	r2, [r3, #52]	; 0x34
 80009aa:	4b23      	ldr	r3, [pc, #140]	; (8000a38 <BSP_PB_Init+0xb4>)
 80009ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009ae:	2204      	movs	r2, #4
 80009b0:	4013      	ands	r3, r2
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	68bb      	ldr	r3, [r7, #8]

  gpioinitstruct.Pin = BUTTON_PIN[Button];
 80009b6:	2380      	movs	r3, #128	; 0x80
 80009b8:	019b      	lsls	r3, r3, #6
 80009ba:	001a      	movs	r2, r3
 80009bc:	210c      	movs	r1, #12
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	601a      	str	r2, [r3, #0]
  gpioinitstruct.Pull = GPIO_NOPULL;
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	2203      	movs	r2, #3
 80009cc:	60da      	str	r2, [r3, #12]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80009ce:	1dbb      	adds	r3, r7, #6
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d10c      	bne.n	80009f0 <BSP_PB_Init+0x6c>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 80009d6:	187b      	adds	r3, r7, r1
 80009d8:	2200      	movs	r2, #0
 80009da:	605a      	str	r2, [r3, #4]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 80009dc:	1dfb      	adds	r3, r7, #7
 80009de:	781a      	ldrb	r2, [r3, #0]
 80009e0:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <BSP_PB_Init+0xb8>)
 80009e2:	0092      	lsls	r2, r2, #2
 80009e4:	58d3      	ldr	r3, [r2, r3]
 80009e6:	187a      	adds	r2, r7, r1
 80009e8:	0011      	movs	r1, r2
 80009ea:	0018      	movs	r0, r3
 80009ec:	f000 f9ea 	bl	8000dc4 <HAL_GPIO_Init>
  }

  if(ButtonMode == BUTTON_MODE_EXTI)
 80009f0:	1dbb      	adds	r3, r7, #6
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d11a      	bne.n	8000a2e <BSP_PB_Init+0xaa>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING;
 80009f8:	210c      	movs	r1, #12
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	2284      	movs	r2, #132	; 0x84
 80009fe:	0392      	lsls	r2, r2, #14
 8000a00:	605a      	str	r2, [r3, #4]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8000a02:	1dfb      	adds	r3, r7, #7
 8000a04:	781a      	ldrb	r2, [r3, #0]
 8000a06:	4b0d      	ldr	r3, [pc, #52]	; (8000a3c <BSP_PB_Init+0xb8>)
 8000a08:	0092      	lsls	r2, r2, #2
 8000a0a:	58d3      	ldr	r3, [r2, r3]
 8000a0c:	187a      	adds	r2, r7, r1
 8000a0e:	0011      	movs	r1, r2
 8000a10:	0018      	movs	r0, r3
 8000a12:	f000 f9d7 	bl	8000dc4 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x03, 0x00);
 8000a16:	2307      	movs	r3, #7
 8000a18:	b25b      	sxtb	r3, r3
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2103      	movs	r1, #3
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f000 f99e 	bl	8000d60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000a24:	2307      	movs	r3, #7
 8000a26:	b25b      	sxtb	r3, r3
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f000 f9ae 	bl	8000d8a <HAL_NVIC_EnableIRQ>
  }
}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	46bd      	mov	sp, r7
 8000a32:	b008      	add	sp, #32
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	2000001c 	.word	0x2000001c

08000a40 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER
  * @retval Button state.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	0002      	movs	r2, r0
 8000a48:	1dfb      	adds	r3, r7, #7
 8000a4a:	701a      	strb	r2, [r3, #0]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000a4c:	1dfb      	adds	r3, r7, #7
 8000a4e:	781a      	ldrb	r2, [r3, #0]
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <BSP_PB_GetState+0x2c>)
 8000a52:	0092      	lsls	r2, r2, #2
 8000a54:	58d3      	ldr	r3, [r2, r3]
 8000a56:	2280      	movs	r2, #128	; 0x80
 8000a58:	0192      	lsls	r2, r2, #6
 8000a5a:	0011      	movs	r1, r2
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f000 fb15 	bl	800108c <HAL_GPIO_ReadPin>
 8000a62:	0003      	movs	r3, r0
}
 8000a64:	0018      	movs	r0, r3
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b002      	add	sp, #8
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	2000001c 	.word	0x2000001c

08000a70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a74:	4b03      	ldr	r3, [pc, #12]	; (8000a84 <SystemInit+0x14>)
 8000a76:	2280      	movs	r2, #128	; 0x80
 8000a78:	0512      	lsls	r2, r2, #20
 8000a7a:	609a      	str	r2, [r3, #8]
#endif
}
 8000a7c:	46c0      	nop			; (mov r8, r8)
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a8e:	1dfb      	adds	r3, r7, #7
 8000a90:	2200      	movs	r2, #0
 8000a92:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a94:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <HAL_Init+0x3c>)
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <HAL_Init+0x3c>)
 8000a9a:	2180      	movs	r1, #128	; 0x80
 8000a9c:	0049      	lsls	r1, r1, #1
 8000a9e:	430a      	orrs	r2, r1
 8000aa0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f000 f810 	bl	8000ac8 <HAL_InitTick>
 8000aa8:	1e03      	subs	r3, r0, #0
 8000aaa:	d003      	beq.n	8000ab4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000aac:	1dfb      	adds	r3, r7, #7
 8000aae:	2201      	movs	r2, #1
 8000ab0:	701a      	strb	r2, [r3, #0]
 8000ab2:	e001      	b.n	8000ab8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000ab4:	f7ff fde4 	bl	8000680 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ab8:	1dfb      	adds	r3, r7, #7
 8000aba:	781b      	ldrb	r3, [r3, #0]
}
 8000abc:	0018      	movs	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	b002      	add	sp, #8
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40022000 	.word	0x40022000

08000ac8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac8:	b590      	push	{r4, r7, lr}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ad0:	230f      	movs	r3, #15
 8000ad2:	18fb      	adds	r3, r7, r3
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000ad8:	4b1d      	ldr	r3, [pc, #116]	; (8000b50 <HAL_InitTick+0x88>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d02b      	beq.n	8000b38 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000ae0:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <HAL_InitTick+0x8c>)
 8000ae2:	681c      	ldr	r4, [r3, #0]
 8000ae4:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <HAL_InitTick+0x88>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	0019      	movs	r1, r3
 8000aea:	23fa      	movs	r3, #250	; 0xfa
 8000aec:	0098      	lsls	r0, r3, #2
 8000aee:	f7ff fb13 	bl	8000118 <__udivsi3>
 8000af2:	0003      	movs	r3, r0
 8000af4:	0019      	movs	r1, r3
 8000af6:	0020      	movs	r0, r4
 8000af8:	f7ff fb0e 	bl	8000118 <__udivsi3>
 8000afc:	0003      	movs	r3, r0
 8000afe:	0018      	movs	r0, r3
 8000b00:	f000 f953 	bl	8000daa <HAL_SYSTICK_Config>
 8000b04:	1e03      	subs	r3, r0, #0
 8000b06:	d112      	bne.n	8000b2e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2b03      	cmp	r3, #3
 8000b0c:	d80a      	bhi.n	8000b24 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b0e:	6879      	ldr	r1, [r7, #4]
 8000b10:	2301      	movs	r3, #1
 8000b12:	425b      	negs	r3, r3
 8000b14:	2200      	movs	r2, #0
 8000b16:	0018      	movs	r0, r3
 8000b18:	f000 f922 	bl	8000d60 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b1c:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <HAL_InitTick+0x90>)
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	e00d      	b.n	8000b40 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000b24:	230f      	movs	r3, #15
 8000b26:	18fb      	adds	r3, r7, r3
 8000b28:	2201      	movs	r2, #1
 8000b2a:	701a      	strb	r2, [r3, #0]
 8000b2c:	e008      	b.n	8000b40 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b2e:	230f      	movs	r3, #15
 8000b30:	18fb      	adds	r3, r7, r3
 8000b32:	2201      	movs	r2, #1
 8000b34:	701a      	strb	r2, [r3, #0]
 8000b36:	e003      	b.n	8000b40 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b38:	230f      	movs	r3, #15
 8000b3a:	18fb      	adds	r3, r7, r3
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b40:	230f      	movs	r3, #15
 8000b42:	18fb      	adds	r3, r7, r3
 8000b44:	781b      	ldrb	r3, [r3, #0]
}
 8000b46:	0018      	movs	r0, r3
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	b005      	add	sp, #20
 8000b4c:	bd90      	pop	{r4, r7, pc}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	20000028 	.word	0x20000028
 8000b54:	20000020 	.word	0x20000020
 8000b58:	20000024 	.word	0x20000024

08000b5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b60:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <HAL_IncTick+0x1c>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	001a      	movs	r2, r3
 8000b66:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <HAL_IncTick+0x20>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	18d2      	adds	r2, r2, r3
 8000b6c:	4b03      	ldr	r3, [pc, #12]	; (8000b7c <HAL_IncTick+0x20>)
 8000b6e:	601a      	str	r2, [r3, #0]
}
 8000b70:	46c0      	nop			; (mov r8, r8)
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	20000028 	.word	0x20000028
 8000b7c:	20000108 	.word	0x20000108

08000b80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  return uwTick;
 8000b84:	4b02      	ldr	r3, [pc, #8]	; (8000b90 <HAL_GetTick+0x10>)
 8000b86:	681b      	ldr	r3, [r3, #0]
}
 8000b88:	0018      	movs	r0, r3
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	20000108 	.word	0x20000108

08000b94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b9c:	f7ff fff0 	bl	8000b80 <HAL_GetTick>
 8000ba0:	0003      	movs	r3, r0
 8000ba2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	3301      	adds	r3, #1
 8000bac:	d005      	beq.n	8000bba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bae:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <HAL_Delay+0x44>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	001a      	movs	r2, r3
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	189b      	adds	r3, r3, r2
 8000bb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	f7ff ffe0 	bl	8000b80 <HAL_GetTick>
 8000bc0:	0002      	movs	r2, r0
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d8f7      	bhi.n	8000bbc <HAL_Delay+0x28>
  {
  }
}
 8000bcc:	46c0      	nop			; (mov r8, r8)
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	b004      	add	sp, #16
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	20000028 	.word	0x20000028

08000bdc <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a06      	ldr	r2, [pc, #24]	; (8000c04 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000bea:	4013      	ands	r3, r2
 8000bec:	0019      	movs	r1, r3
 8000bee:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	601a      	str	r2, [r3, #0]
}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	b002      	add	sp, #8
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	40010000 	.word	0x40010000
 8000c04:	fffff9ff 	.word	0xfffff9ff

08000c08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	0002      	movs	r2, r0
 8000c10:	1dfb      	adds	r3, r7, #7
 8000c12:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c14:	1dfb      	adds	r3, r7, #7
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b7f      	cmp	r3, #127	; 0x7f
 8000c1a:	d809      	bhi.n	8000c30 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c1c:	1dfb      	adds	r3, r7, #7
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	001a      	movs	r2, r3
 8000c22:	231f      	movs	r3, #31
 8000c24:	401a      	ands	r2, r3
 8000c26:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <__NVIC_EnableIRQ+0x30>)
 8000c28:	2101      	movs	r1, #1
 8000c2a:	4091      	lsls	r1, r2
 8000c2c:	000a      	movs	r2, r1
 8000c2e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000c30:	46c0      	nop			; (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b002      	add	sp, #8
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	e000e100 	.word	0xe000e100

08000c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c3c:	b590      	push	{r4, r7, lr}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	0002      	movs	r2, r0
 8000c44:	6039      	str	r1, [r7, #0]
 8000c46:	1dfb      	adds	r3, r7, #7
 8000c48:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c4a:	1dfb      	adds	r3, r7, #7
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b7f      	cmp	r3, #127	; 0x7f
 8000c50:	d828      	bhi.n	8000ca4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c52:	4a2f      	ldr	r2, [pc, #188]	; (8000d10 <__NVIC_SetPriority+0xd4>)
 8000c54:	1dfb      	adds	r3, r7, #7
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	b25b      	sxtb	r3, r3
 8000c5a:	089b      	lsrs	r3, r3, #2
 8000c5c:	33c0      	adds	r3, #192	; 0xc0
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	589b      	ldr	r3, [r3, r2]
 8000c62:	1dfa      	adds	r2, r7, #7
 8000c64:	7812      	ldrb	r2, [r2, #0]
 8000c66:	0011      	movs	r1, r2
 8000c68:	2203      	movs	r2, #3
 8000c6a:	400a      	ands	r2, r1
 8000c6c:	00d2      	lsls	r2, r2, #3
 8000c6e:	21ff      	movs	r1, #255	; 0xff
 8000c70:	4091      	lsls	r1, r2
 8000c72:	000a      	movs	r2, r1
 8000c74:	43d2      	mvns	r2, r2
 8000c76:	401a      	ands	r2, r3
 8000c78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	019b      	lsls	r3, r3, #6
 8000c7e:	22ff      	movs	r2, #255	; 0xff
 8000c80:	401a      	ands	r2, r3
 8000c82:	1dfb      	adds	r3, r7, #7
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	0018      	movs	r0, r3
 8000c88:	2303      	movs	r3, #3
 8000c8a:	4003      	ands	r3, r0
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c90:	481f      	ldr	r0, [pc, #124]	; (8000d10 <__NVIC_SetPriority+0xd4>)
 8000c92:	1dfb      	adds	r3, r7, #7
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	b25b      	sxtb	r3, r3
 8000c98:	089b      	lsrs	r3, r3, #2
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	33c0      	adds	r3, #192	; 0xc0
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ca2:	e031      	b.n	8000d08 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ca4:	4a1b      	ldr	r2, [pc, #108]	; (8000d14 <__NVIC_SetPriority+0xd8>)
 8000ca6:	1dfb      	adds	r3, r7, #7
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	0019      	movs	r1, r3
 8000cac:	230f      	movs	r3, #15
 8000cae:	400b      	ands	r3, r1
 8000cb0:	3b08      	subs	r3, #8
 8000cb2:	089b      	lsrs	r3, r3, #2
 8000cb4:	3306      	adds	r3, #6
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	18d3      	adds	r3, r2, r3
 8000cba:	3304      	adds	r3, #4
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	1dfa      	adds	r2, r7, #7
 8000cc0:	7812      	ldrb	r2, [r2, #0]
 8000cc2:	0011      	movs	r1, r2
 8000cc4:	2203      	movs	r2, #3
 8000cc6:	400a      	ands	r2, r1
 8000cc8:	00d2      	lsls	r2, r2, #3
 8000cca:	21ff      	movs	r1, #255	; 0xff
 8000ccc:	4091      	lsls	r1, r2
 8000cce:	000a      	movs	r2, r1
 8000cd0:	43d2      	mvns	r2, r2
 8000cd2:	401a      	ands	r2, r3
 8000cd4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	019b      	lsls	r3, r3, #6
 8000cda:	22ff      	movs	r2, #255	; 0xff
 8000cdc:	401a      	ands	r2, r3
 8000cde:	1dfb      	adds	r3, r7, #7
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	4003      	ands	r3, r0
 8000ce8:	00db      	lsls	r3, r3, #3
 8000cea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cec:	4809      	ldr	r0, [pc, #36]	; (8000d14 <__NVIC_SetPriority+0xd8>)
 8000cee:	1dfb      	adds	r3, r7, #7
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	001c      	movs	r4, r3
 8000cf4:	230f      	movs	r3, #15
 8000cf6:	4023      	ands	r3, r4
 8000cf8:	3b08      	subs	r3, #8
 8000cfa:	089b      	lsrs	r3, r3, #2
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	3306      	adds	r3, #6
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	18c3      	adds	r3, r0, r3
 8000d04:	3304      	adds	r3, #4
 8000d06:	601a      	str	r2, [r3, #0]
}
 8000d08:	46c0      	nop			; (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b003      	add	sp, #12
 8000d0e:	bd90      	pop	{r4, r7, pc}
 8000d10:	e000e100 	.word	0xe000e100
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	1e5a      	subs	r2, r3, #1
 8000d24:	2380      	movs	r3, #128	; 0x80
 8000d26:	045b      	lsls	r3, r3, #17
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d301      	bcc.n	8000d30 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	e010      	b.n	8000d52 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d30:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <SysTick_Config+0x44>)
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	3a01      	subs	r2, #1
 8000d36:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d38:	2301      	movs	r3, #1
 8000d3a:	425b      	negs	r3, r3
 8000d3c:	2103      	movs	r1, #3
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f7ff ff7c 	bl	8000c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <SysTick_Config+0x44>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d4a:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <SysTick_Config+0x44>)
 8000d4c:	2207      	movs	r2, #7
 8000d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	0018      	movs	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	b002      	add	sp, #8
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	e000e010 	.word	0xe000e010

08000d60 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60b9      	str	r1, [r7, #8]
 8000d68:	607a      	str	r2, [r7, #4]
 8000d6a:	210f      	movs	r1, #15
 8000d6c:	187b      	adds	r3, r7, r1
 8000d6e:	1c02      	adds	r2, r0, #0
 8000d70:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	187b      	adds	r3, r7, r1
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	b25b      	sxtb	r3, r3
 8000d7a:	0011      	movs	r1, r2
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f7ff ff5d 	bl	8000c3c <__NVIC_SetPriority>
}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	46bd      	mov	sp, r7
 8000d86:	b004      	add	sp, #16
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	0002      	movs	r2, r0
 8000d92:	1dfb      	adds	r3, r7, #7
 8000d94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d96:	1dfb      	adds	r3, r7, #7
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	b25b      	sxtb	r3, r3
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f7ff ff33 	bl	8000c08 <__NVIC_EnableIRQ>
}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	46bd      	mov	sp, r7
 8000da6:	b002      	add	sp, #8
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	0018      	movs	r0, r3
 8000db6:	f7ff ffaf 	bl	8000d18 <SysTick_Config>
 8000dba:	0003      	movs	r3, r0
}
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	b002      	add	sp, #8
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dd2:	e147      	b.n	8001064 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2101      	movs	r1, #1
 8000dda:	697a      	ldr	r2, [r7, #20]
 8000ddc:	4091      	lsls	r1, r2
 8000dde:	000a      	movs	r2, r1
 8000de0:	4013      	ands	r3, r2
 8000de2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d100      	bne.n	8000dec <HAL_GPIO_Init+0x28>
 8000dea:	e138      	b.n	800105e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	2203      	movs	r2, #3
 8000df2:	4013      	ands	r3, r2
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d005      	beq.n	8000e04 <HAL_GPIO_Init+0x40>
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	4013      	ands	r3, r2
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d130      	bne.n	8000e66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	2203      	movs	r2, #3
 8000e10:	409a      	lsls	r2, r3
 8000e12:	0013      	movs	r3, r2
 8000e14:	43da      	mvns	r2, r3
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	68da      	ldr	r2, [r3, #12]
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	409a      	lsls	r2, r3
 8000e26:	0013      	movs	r3, r2
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	409a      	lsls	r2, r3
 8000e40:	0013      	movs	r3, r2
 8000e42:	43da      	mvns	r2, r3
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	4013      	ands	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	091b      	lsrs	r3, r3, #4
 8000e50:	2201      	movs	r2, #1
 8000e52:	401a      	ands	r2, r3
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	409a      	lsls	r2, r3
 8000e58:	0013      	movs	r3, r2
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	2b03      	cmp	r3, #3
 8000e70:	d017      	beq.n	8000ea2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	409a      	lsls	r2, r3
 8000e80:	0013      	movs	r3, r2
 8000e82:	43da      	mvns	r2, r3
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	4013      	ands	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	689a      	ldr	r2, [r3, #8]
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	409a      	lsls	r2, r3
 8000e94:	0013      	movs	r3, r2
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d123      	bne.n	8000ef6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	08da      	lsrs	r2, r3, #3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3208      	adds	r2, #8
 8000eb6:	0092      	lsls	r2, r2, #2
 8000eb8:	58d3      	ldr	r3, [r2, r3]
 8000eba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	2207      	movs	r2, #7
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	220f      	movs	r2, #15
 8000ec6:	409a      	lsls	r2, r3
 8000ec8:	0013      	movs	r3, r2
 8000eca:	43da      	mvns	r2, r3
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	691a      	ldr	r2, [r3, #16]
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	2107      	movs	r1, #7
 8000eda:	400b      	ands	r3, r1
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	409a      	lsls	r2, r3
 8000ee0:	0013      	movs	r3, r2
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	08da      	lsrs	r2, r3, #3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3208      	adds	r2, #8
 8000ef0:	0092      	lsls	r2, r2, #2
 8000ef2:	6939      	ldr	r1, [r7, #16]
 8000ef4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	2203      	movs	r2, #3
 8000f02:	409a      	lsls	r2, r3
 8000f04:	0013      	movs	r3, r2
 8000f06:	43da      	mvns	r2, r3
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	2203      	movs	r2, #3
 8000f14:	401a      	ands	r2, r3
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	409a      	lsls	r2, r3
 8000f1c:	0013      	movs	r3, r2
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685a      	ldr	r2, [r3, #4]
 8000f2e:	23c0      	movs	r3, #192	; 0xc0
 8000f30:	029b      	lsls	r3, r3, #10
 8000f32:	4013      	ands	r3, r2
 8000f34:	d100      	bne.n	8000f38 <HAL_GPIO_Init+0x174>
 8000f36:	e092      	b.n	800105e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000f38:	4a50      	ldr	r2, [pc, #320]	; (800107c <HAL_GPIO_Init+0x2b8>)
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	089b      	lsrs	r3, r3, #2
 8000f3e:	3318      	adds	r3, #24
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	589b      	ldr	r3, [r3, r2]
 8000f44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	2203      	movs	r2, #3
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	220f      	movs	r2, #15
 8000f50:	409a      	lsls	r2, r3
 8000f52:	0013      	movs	r3, r2
 8000f54:	43da      	mvns	r2, r3
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	23a0      	movs	r3, #160	; 0xa0
 8000f60:	05db      	lsls	r3, r3, #23
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d013      	beq.n	8000f8e <HAL_GPIO_Init+0x1ca>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a45      	ldr	r2, [pc, #276]	; (8001080 <HAL_GPIO_Init+0x2bc>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d00d      	beq.n	8000f8a <HAL_GPIO_Init+0x1c6>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a44      	ldr	r2, [pc, #272]	; (8001084 <HAL_GPIO_Init+0x2c0>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d007      	beq.n	8000f86 <HAL_GPIO_Init+0x1c2>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a43      	ldr	r2, [pc, #268]	; (8001088 <HAL_GPIO_Init+0x2c4>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d101      	bne.n	8000f82 <HAL_GPIO_Init+0x1be>
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e006      	b.n	8000f90 <HAL_GPIO_Init+0x1cc>
 8000f82:	2305      	movs	r3, #5
 8000f84:	e004      	b.n	8000f90 <HAL_GPIO_Init+0x1cc>
 8000f86:	2302      	movs	r3, #2
 8000f88:	e002      	b.n	8000f90 <HAL_GPIO_Init+0x1cc>
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e000      	b.n	8000f90 <HAL_GPIO_Init+0x1cc>
 8000f8e:	2300      	movs	r3, #0
 8000f90:	697a      	ldr	r2, [r7, #20]
 8000f92:	2103      	movs	r1, #3
 8000f94:	400a      	ands	r2, r1
 8000f96:	00d2      	lsls	r2, r2, #3
 8000f98:	4093      	lsls	r3, r2
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000fa0:	4936      	ldr	r1, [pc, #216]	; (800107c <HAL_GPIO_Init+0x2b8>)
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	089b      	lsrs	r3, r3, #2
 8000fa6:	3318      	adds	r3, #24
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fae:	4b33      	ldr	r3, [pc, #204]	; (800107c <HAL_GPIO_Init+0x2b8>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	43da      	mvns	r2, r3
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685a      	ldr	r2, [r3, #4]
 8000fc2:	2380      	movs	r3, #128	; 0x80
 8000fc4:	035b      	lsls	r3, r3, #13
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	d003      	beq.n	8000fd2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fd2:	4b2a      	ldr	r3, [pc, #168]	; (800107c <HAL_GPIO_Init+0x2b8>)
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000fd8:	4b28      	ldr	r3, [pc, #160]	; (800107c <HAL_GPIO_Init+0x2b8>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	43da      	mvns	r2, r3
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685a      	ldr	r2, [r3, #4]
 8000fec:	2380      	movs	r3, #128	; 0x80
 8000fee:	039b      	lsls	r3, r3, #14
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	d003      	beq.n	8000ffc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ffc:	4b1f      	ldr	r3, [pc, #124]	; (800107c <HAL_GPIO_Init+0x2b8>)
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001002:	4a1e      	ldr	r2, [pc, #120]	; (800107c <HAL_GPIO_Init+0x2b8>)
 8001004:	2384      	movs	r3, #132	; 0x84
 8001006:	58d3      	ldr	r3, [r2, r3]
 8001008:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	43da      	mvns	r2, r3
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	2380      	movs	r3, #128	; 0x80
 800101a:	029b      	lsls	r3, r3, #10
 800101c:	4013      	ands	r3, r2
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	4313      	orrs	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001028:	4914      	ldr	r1, [pc, #80]	; (800107c <HAL_GPIO_Init+0x2b8>)
 800102a:	2284      	movs	r2, #132	; 0x84
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001030:	4a12      	ldr	r2, [pc, #72]	; (800107c <HAL_GPIO_Init+0x2b8>)
 8001032:	2380      	movs	r3, #128	; 0x80
 8001034:	58d3      	ldr	r3, [r2, r3]
 8001036:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	43da      	mvns	r2, r3
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	4013      	ands	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685a      	ldr	r2, [r3, #4]
 8001046:	2380      	movs	r3, #128	; 0x80
 8001048:	025b      	lsls	r3, r3, #9
 800104a:	4013      	ands	r3, r2
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4313      	orrs	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001056:	4909      	ldr	r1, [pc, #36]	; (800107c <HAL_GPIO_Init+0x2b8>)
 8001058:	2280      	movs	r2, #128	; 0x80
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	3301      	adds	r3, #1
 8001062:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	40da      	lsrs	r2, r3
 800106c:	1e13      	subs	r3, r2, #0
 800106e:	d000      	beq.n	8001072 <HAL_GPIO_Init+0x2ae>
 8001070:	e6b0      	b.n	8000dd4 <HAL_GPIO_Init+0x10>
  }
}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	46c0      	nop			; (mov r8, r8)
 8001076:	46bd      	mov	sp, r7
 8001078:	b006      	add	sp, #24
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40021800 	.word	0x40021800
 8001080:	50000400 	.word	0x50000400
 8001084:	50000800 	.word	0x50000800
 8001088:	50000c00 	.word	0x50000c00

0800108c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	000a      	movs	r2, r1
 8001096:	1cbb      	adds	r3, r7, #2
 8001098:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	691b      	ldr	r3, [r3, #16]
 800109e:	1cba      	adds	r2, r7, #2
 80010a0:	8812      	ldrh	r2, [r2, #0]
 80010a2:	4013      	ands	r3, r2
 80010a4:	d004      	beq.n	80010b0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80010a6:	230f      	movs	r3, #15
 80010a8:	18fb      	adds	r3, r7, r3
 80010aa:	2201      	movs	r2, #1
 80010ac:	701a      	strb	r2, [r3, #0]
 80010ae:	e003      	b.n	80010b8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010b0:	230f      	movs	r3, #15
 80010b2:	18fb      	adds	r3, r7, r3
 80010b4:	2200      	movs	r2, #0
 80010b6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80010b8:	230f      	movs	r3, #15
 80010ba:	18fb      	adds	r3, r7, r3
 80010bc:	781b      	ldrb	r3, [r3, #0]
}
 80010be:	0018      	movs	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	b004      	add	sp, #16
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
 80010ce:	0008      	movs	r0, r1
 80010d0:	0011      	movs	r1, r2
 80010d2:	1cbb      	adds	r3, r7, #2
 80010d4:	1c02      	adds	r2, r0, #0
 80010d6:	801a      	strh	r2, [r3, #0]
 80010d8:	1c7b      	adds	r3, r7, #1
 80010da:	1c0a      	adds	r2, r1, #0
 80010dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010de:	1c7b      	adds	r3, r7, #1
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d004      	beq.n	80010f0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010e6:	1cbb      	adds	r3, r7, #2
 80010e8:	881a      	ldrh	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010ee:	e003      	b.n	80010f8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010f0:	1cbb      	adds	r3, r7, #2
 80010f2:	881a      	ldrh	r2, [r3, #0]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010f8:	46c0      	nop			; (mov r8, r8)
 80010fa:	46bd      	mov	sp, r7
 80010fc:	b002      	add	sp, #8
 80010fe:	bd80      	pop	{r7, pc}

08001100 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	000a      	movs	r2, r1
 800110a:	1cbb      	adds	r3, r7, #2
 800110c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	695b      	ldr	r3, [r3, #20]
 8001112:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001114:	1cbb      	adds	r3, r7, #2
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	68fa      	ldr	r2, [r7, #12]
 800111a:	4013      	ands	r3, r2
 800111c:	041a      	lsls	r2, r3, #16
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	43db      	mvns	r3, r3
 8001122:	1cb9      	adds	r1, r7, #2
 8001124:	8809      	ldrh	r1, [r1, #0]
 8001126:	400b      	ands	r3, r1
 8001128:	431a      	orrs	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	619a      	str	r2, [r3, #24]
}
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	46bd      	mov	sp, r7
 8001132:	b004      	add	sp, #16
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800113c:	4b04      	ldr	r3, [pc, #16]	; (8001150 <HAL_PWR_EnableBkUpAccess+0x18>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	4b03      	ldr	r3, [pc, #12]	; (8001150 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001142:	2180      	movs	r1, #128	; 0x80
 8001144:	0049      	lsls	r1, r1, #1
 8001146:	430a      	orrs	r2, r1
 8001148:	601a      	str	r2, [r3, #0]
}
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40007000 	.word	0x40007000

08001154 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d101      	bne.n	8001166 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e2fe      	b.n	8001764 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2201      	movs	r2, #1
 800116c:	4013      	ands	r3, r2
 800116e:	d100      	bne.n	8001172 <HAL_RCC_OscConfig+0x1e>
 8001170:	e07c      	b.n	800126c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001172:	4bc3      	ldr	r3, [pc, #780]	; (8001480 <HAL_RCC_OscConfig+0x32c>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	2238      	movs	r2, #56	; 0x38
 8001178:	4013      	ands	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800117c:	4bc0      	ldr	r3, [pc, #768]	; (8001480 <HAL_RCC_OscConfig+0x32c>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	2203      	movs	r2, #3
 8001182:	4013      	ands	r3, r2
 8001184:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	2b10      	cmp	r3, #16
 800118a:	d102      	bne.n	8001192 <HAL_RCC_OscConfig+0x3e>
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	2b03      	cmp	r3, #3
 8001190:	d002      	beq.n	8001198 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	2b08      	cmp	r3, #8
 8001196:	d10b      	bne.n	80011b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001198:	4bb9      	ldr	r3, [pc, #740]	; (8001480 <HAL_RCC_OscConfig+0x32c>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	2380      	movs	r3, #128	; 0x80
 800119e:	029b      	lsls	r3, r3, #10
 80011a0:	4013      	ands	r3, r2
 80011a2:	d062      	beq.n	800126a <HAL_RCC_OscConfig+0x116>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d15e      	bne.n	800126a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e2d9      	b.n	8001764 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685a      	ldr	r2, [r3, #4]
 80011b4:	2380      	movs	r3, #128	; 0x80
 80011b6:	025b      	lsls	r3, r3, #9
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d107      	bne.n	80011cc <HAL_RCC_OscConfig+0x78>
 80011bc:	4bb0      	ldr	r3, [pc, #704]	; (8001480 <HAL_RCC_OscConfig+0x32c>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4baf      	ldr	r3, [pc, #700]	; (8001480 <HAL_RCC_OscConfig+0x32c>)
 80011c2:	2180      	movs	r1, #128	; 0x80
 80011c4:	0249      	lsls	r1, r1, #9
 80011c6:	430a      	orrs	r2, r1
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	e020      	b.n	800120e <HAL_RCC_OscConfig+0xba>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	23a0      	movs	r3, #160	; 0xa0
 80011d2:	02db      	lsls	r3, r3, #11
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d10e      	bne.n	80011f6 <HAL_RCC_OscConfig+0xa2>
 80011d8:	4ba9      	ldr	r3, [pc, #676]	; (8001480 <HAL_RCC_OscConfig+0x32c>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4ba8      	ldr	r3, [pc, #672]	; (8001480 <HAL_RCC_OscConfig+0x32c>)
 80011de:	2180      	movs	r1, #128	; 0x80
 80011e0:	02c9      	lsls	r1, r1, #11
 80011e2:	430a      	orrs	r2, r1
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	4ba6      	ldr	r3, [pc, #664]	; (8001480 <HAL_RCC_OscConfig+0x32c>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	4ba5      	ldr	r3, [pc, #660]	; (8001480 <HAL_RCC_OscConfig+0x32c>)
 80011ec:	2180      	movs	r1, #128	; 0x80
 80011ee:	0249      	lsls	r1, r1, #9
 80011f0:	430a      	orrs	r2, r1
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	e00b      	b.n	800120e <HAL_RCC_OscConfig+0xba>
 80011f6:	4ba2      	ldr	r3, [pc, #648]	; (8001480 <HAL_RCC_OscConfig+0x32c>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	4ba1      	ldr	r3, [pc, #644]	; (8001480 <HAL_RCC_OscConfig+0x32c>)
 80011fc:	49a1      	ldr	r1, [pc, #644]	; (8001484 <HAL_RCC_OscConfig+0x330>)
 80011fe:	400a      	ands	r2, r1
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	4b9f      	ldr	r3, [pc, #636]	; (8001480 <HAL_RCC_OscConfig+0x32c>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	4b9e      	ldr	r3, [pc, #632]	; (8001480 <HAL_RCC_OscConfig+0x32c>)
 8001208:	499f      	ldr	r1, [pc, #636]	; (8001488 <HAL_RCC_OscConfig+0x334>)
 800120a:	400a      	ands	r2, r1
 800120c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d014      	beq.n	8001240 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001216:	f7ff fcb3 	bl	8000b80 <HAL_GetTick>
 800121a:	0003      	movs	r3, r0
 800121c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800121e:	e008      	b.n	8001232 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001220:	f7ff fcae 	bl	8000b80 <HAL_GetTick>
 8001224:	0002      	movs	r2, r0
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b64      	cmp	r3, #100	; 0x64
 800122c:	d901      	bls.n	8001232 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e298      	b.n	8001764 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001232:	4b93      	ldr	r3, [pc, #588]	; (8001480 <HAL_RCC_OscConfig+0x32c>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	2380      	movs	r3, #128	; 0x80
 8001238:	029b      	lsls	r3, r3, #10
 800123a:	4013      	ands	r3, r2
 800123c:	d0f0      	beq.n	8001220 <HAL_RCC_OscConfig+0xcc>
 800123e:	e015      	b.n	800126c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001240:	f7ff fc9e 	bl	8000b80 <HAL_GetTick>
 8001244:	0003      	movs	r3, r0
 8001246:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001248:	e008      	b.n	800125c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800124a:	f7ff fc99 	bl	8000b80 <HAL_GetTick>
 800124e:	0002      	movs	r2, r0
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	2b64      	cmp	r3, #100	; 0x64
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e283      	b.n	8001764 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800125c:	4b88      	ldr	r3, [pc, #544]	; (8001480 <HAL_RCC_OscConfig+0x32c>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	2380      	movs	r3, #128	; 0x80
 8001262:	029b      	lsls	r3, r3, #10
 8001264:	4013      	ands	r3, r2
 8001266:	d1f0      	bne.n	800124a <HAL_RCC_OscConfig+0xf6>
 8001268:	e000      	b.n	800126c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800126a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2202      	movs	r2, #2
 8001272:	4013      	ands	r3, r2
 8001274:	d100      	bne.n	8001278 <HAL_RCC_OscConfig+0x124>
 8001276:	e099      	b.n	80013ac <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001278:	4b81      	ldr	r3, [pc, #516]	; (8001480 <HAL_RCC_OscConfig+0x32c>)
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	2238      	movs	r2, #56	; 0x38
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001282:	4b7f      	ldr	r3, [pc, #508]	; (8001480 <HAL_RCC_OscConfig+0x32c>)
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	2203      	movs	r2, #3
 8001288:	4013      	ands	r3, r2
 800128a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	2b10      	cmp	r3, #16
 8001290:	d102      	bne.n	8001298 <HAL_RCC_OscConfig+0x144>
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	2b02      	cmp	r3, #2
 8001296:	d002      	beq.n	800129e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d135      	bne.n	800130a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800129e:	4b78      	ldr	r3, [pc, #480]	; (8001480 <HAL_RCC_OscConfig+0x32c>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	2380      	movs	r3, #128	; 0x80
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	4013      	ands	r3, r2
 80012a8:	d005      	beq.n	80012b6 <HAL_RCC_OscConfig+0x162>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e256      	b.n	8001764 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b6:	4b72      	ldr	r3, [pc, #456]	; (8001480 <HAL_RCC_OscConfig+0x32c>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	4a74      	ldr	r2, [pc, #464]	; (800148c <HAL_RCC_OscConfig+0x338>)
 80012bc:	4013      	ands	r3, r2
 80012be:	0019      	movs	r1, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	695b      	ldr	r3, [r3, #20]
 80012c4:	021a      	lsls	r2, r3, #8
 80012c6:	4b6e      	ldr	r3, [pc, #440]	; (8001480 <HAL_RCC_OscConfig+0x32c>)
 80012c8:	430a      	orrs	r2, r1
 80012ca:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d112      	bne.n	80012f8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80012d2:	4b6b      	ldr	r3, [pc, #428]	; (8001480 <HAL_RCC_OscConfig+0x32c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a6e      	ldr	r2, [pc, #440]	; (8001490 <HAL_RCC_OscConfig+0x33c>)
 80012d8:	4013      	ands	r3, r2
 80012da:	0019      	movs	r1, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	691a      	ldr	r2, [r3, #16]
 80012e0:	4b67      	ldr	r3, [pc, #412]	; (8001480 <HAL_RCC_OscConfig+0x32c>)
 80012e2:	430a      	orrs	r2, r1
 80012e4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80012e6:	4b66      	ldr	r3, [pc, #408]	; (8001480 <HAL_RCC_OscConfig+0x32c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	0adb      	lsrs	r3, r3, #11
 80012ec:	2207      	movs	r2, #7
 80012ee:	4013      	ands	r3, r2
 80012f0:	4a68      	ldr	r2, [pc, #416]	; (8001494 <HAL_RCC_OscConfig+0x340>)
 80012f2:	40da      	lsrs	r2, r3
 80012f4:	4b68      	ldr	r3, [pc, #416]	; (8001498 <HAL_RCC_OscConfig+0x344>)
 80012f6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80012f8:	4b68      	ldr	r3, [pc, #416]	; (800149c <HAL_RCC_OscConfig+0x348>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	0018      	movs	r0, r3
 80012fe:	f7ff fbe3 	bl	8000ac8 <HAL_InitTick>
 8001302:	1e03      	subs	r3, r0, #0
 8001304:	d051      	beq.n	80013aa <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e22c      	b.n	8001764 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d030      	beq.n	8001374 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001312:	4b5b      	ldr	r3, [pc, #364]	; (8001480 <HAL_RCC_OscConfig+0x32c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a5e      	ldr	r2, [pc, #376]	; (8001490 <HAL_RCC_OscConfig+0x33c>)
 8001318:	4013      	ands	r3, r2
 800131a:	0019      	movs	r1, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	691a      	ldr	r2, [r3, #16]
 8001320:	4b57      	ldr	r3, [pc, #348]	; (8001480 <HAL_RCC_OscConfig+0x32c>)
 8001322:	430a      	orrs	r2, r1
 8001324:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001326:	4b56      	ldr	r3, [pc, #344]	; (8001480 <HAL_RCC_OscConfig+0x32c>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	4b55      	ldr	r3, [pc, #340]	; (8001480 <HAL_RCC_OscConfig+0x32c>)
 800132c:	2180      	movs	r1, #128	; 0x80
 800132e:	0049      	lsls	r1, r1, #1
 8001330:	430a      	orrs	r2, r1
 8001332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001334:	f7ff fc24 	bl	8000b80 <HAL_GetTick>
 8001338:	0003      	movs	r3, r0
 800133a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800133c:	e008      	b.n	8001350 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800133e:	f7ff fc1f 	bl	8000b80 <HAL_GetTick>
 8001342:	0002      	movs	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e209      	b.n	8001764 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001350:	4b4b      	ldr	r3, [pc, #300]	; (8001480 <HAL_RCC_OscConfig+0x32c>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	2380      	movs	r3, #128	; 0x80
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	4013      	ands	r3, r2
 800135a:	d0f0      	beq.n	800133e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135c:	4b48      	ldr	r3, [pc, #288]	; (8001480 <HAL_RCC_OscConfig+0x32c>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	4a4a      	ldr	r2, [pc, #296]	; (800148c <HAL_RCC_OscConfig+0x338>)
 8001362:	4013      	ands	r3, r2
 8001364:	0019      	movs	r1, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	021a      	lsls	r2, r3, #8
 800136c:	4b44      	ldr	r3, [pc, #272]	; (8001480 <HAL_RCC_OscConfig+0x32c>)
 800136e:	430a      	orrs	r2, r1
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	e01b      	b.n	80013ac <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001374:	4b42      	ldr	r3, [pc, #264]	; (8001480 <HAL_RCC_OscConfig+0x32c>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4b41      	ldr	r3, [pc, #260]	; (8001480 <HAL_RCC_OscConfig+0x32c>)
 800137a:	4949      	ldr	r1, [pc, #292]	; (80014a0 <HAL_RCC_OscConfig+0x34c>)
 800137c:	400a      	ands	r2, r1
 800137e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001380:	f7ff fbfe 	bl	8000b80 <HAL_GetTick>
 8001384:	0003      	movs	r3, r0
 8001386:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001388:	e008      	b.n	800139c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800138a:	f7ff fbf9 	bl	8000b80 <HAL_GetTick>
 800138e:	0002      	movs	r2, r0
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	2b02      	cmp	r3, #2
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e1e3      	b.n	8001764 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800139c:	4b38      	ldr	r3, [pc, #224]	; (8001480 <HAL_RCC_OscConfig+0x32c>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	2380      	movs	r3, #128	; 0x80
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	4013      	ands	r3, r2
 80013a6:	d1f0      	bne.n	800138a <HAL_RCC_OscConfig+0x236>
 80013a8:	e000      	b.n	80013ac <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013aa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2208      	movs	r2, #8
 80013b2:	4013      	ands	r3, r2
 80013b4:	d047      	beq.n	8001446 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80013b6:	4b32      	ldr	r3, [pc, #200]	; (8001480 <HAL_RCC_OscConfig+0x32c>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	2238      	movs	r2, #56	; 0x38
 80013bc:	4013      	ands	r3, r2
 80013be:	2b18      	cmp	r3, #24
 80013c0:	d10a      	bne.n	80013d8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80013c2:	4b2f      	ldr	r3, [pc, #188]	; (8001480 <HAL_RCC_OscConfig+0x32c>)
 80013c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013c6:	2202      	movs	r2, #2
 80013c8:	4013      	ands	r3, r2
 80013ca:	d03c      	beq.n	8001446 <HAL_RCC_OscConfig+0x2f2>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d138      	bne.n	8001446 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e1c5      	b.n	8001764 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d019      	beq.n	8001414 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80013e0:	4b27      	ldr	r3, [pc, #156]	; (8001480 <HAL_RCC_OscConfig+0x32c>)
 80013e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013e4:	4b26      	ldr	r3, [pc, #152]	; (8001480 <HAL_RCC_OscConfig+0x32c>)
 80013e6:	2101      	movs	r1, #1
 80013e8:	430a      	orrs	r2, r1
 80013ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ec:	f7ff fbc8 	bl	8000b80 <HAL_GetTick>
 80013f0:	0003      	movs	r3, r0
 80013f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013f4:	e008      	b.n	8001408 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013f6:	f7ff fbc3 	bl	8000b80 <HAL_GetTick>
 80013fa:	0002      	movs	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e1ad      	b.n	8001764 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001408:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <HAL_RCC_OscConfig+0x32c>)
 800140a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800140c:	2202      	movs	r2, #2
 800140e:	4013      	ands	r3, r2
 8001410:	d0f1      	beq.n	80013f6 <HAL_RCC_OscConfig+0x2a2>
 8001412:	e018      	b.n	8001446 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001414:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <HAL_RCC_OscConfig+0x32c>)
 8001416:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001418:	4b19      	ldr	r3, [pc, #100]	; (8001480 <HAL_RCC_OscConfig+0x32c>)
 800141a:	2101      	movs	r1, #1
 800141c:	438a      	bics	r2, r1
 800141e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001420:	f7ff fbae 	bl	8000b80 <HAL_GetTick>
 8001424:	0003      	movs	r3, r0
 8001426:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001428:	e008      	b.n	800143c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800142a:	f7ff fba9 	bl	8000b80 <HAL_GetTick>
 800142e:	0002      	movs	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e193      	b.n	8001764 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800143c:	4b10      	ldr	r3, [pc, #64]	; (8001480 <HAL_RCC_OscConfig+0x32c>)
 800143e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001440:	2202      	movs	r2, #2
 8001442:	4013      	ands	r3, r2
 8001444:	d1f1      	bne.n	800142a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2204      	movs	r2, #4
 800144c:	4013      	ands	r3, r2
 800144e:	d100      	bne.n	8001452 <HAL_RCC_OscConfig+0x2fe>
 8001450:	e0c6      	b.n	80015e0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001452:	231f      	movs	r3, #31
 8001454:	18fb      	adds	r3, r7, r3
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <HAL_RCC_OscConfig+0x32c>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	2238      	movs	r2, #56	; 0x38
 8001460:	4013      	ands	r3, r2
 8001462:	2b20      	cmp	r3, #32
 8001464:	d11e      	bne.n	80014a4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_RCC_OscConfig+0x32c>)
 8001468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800146a:	2202      	movs	r2, #2
 800146c:	4013      	ands	r3, r2
 800146e:	d100      	bne.n	8001472 <HAL_RCC_OscConfig+0x31e>
 8001470:	e0b6      	b.n	80015e0 <HAL_RCC_OscConfig+0x48c>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d000      	beq.n	800147c <HAL_RCC_OscConfig+0x328>
 800147a:	e0b1      	b.n	80015e0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e171      	b.n	8001764 <HAL_RCC_OscConfig+0x610>
 8001480:	40021000 	.word	0x40021000
 8001484:	fffeffff 	.word	0xfffeffff
 8001488:	fffbffff 	.word	0xfffbffff
 800148c:	ffff80ff 	.word	0xffff80ff
 8001490:	ffffc7ff 	.word	0xffffc7ff
 8001494:	00f42400 	.word	0x00f42400
 8001498:	20000020 	.word	0x20000020
 800149c:	20000024 	.word	0x20000024
 80014a0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80014a4:	4bb1      	ldr	r3, [pc, #708]	; (800176c <HAL_RCC_OscConfig+0x618>)
 80014a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014a8:	2380      	movs	r3, #128	; 0x80
 80014aa:	055b      	lsls	r3, r3, #21
 80014ac:	4013      	ands	r3, r2
 80014ae:	d101      	bne.n	80014b4 <HAL_RCC_OscConfig+0x360>
 80014b0:	2301      	movs	r3, #1
 80014b2:	e000      	b.n	80014b6 <HAL_RCC_OscConfig+0x362>
 80014b4:	2300      	movs	r3, #0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d011      	beq.n	80014de <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80014ba:	4bac      	ldr	r3, [pc, #688]	; (800176c <HAL_RCC_OscConfig+0x618>)
 80014bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014be:	4bab      	ldr	r3, [pc, #684]	; (800176c <HAL_RCC_OscConfig+0x618>)
 80014c0:	2180      	movs	r1, #128	; 0x80
 80014c2:	0549      	lsls	r1, r1, #21
 80014c4:	430a      	orrs	r2, r1
 80014c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80014c8:	4ba8      	ldr	r3, [pc, #672]	; (800176c <HAL_RCC_OscConfig+0x618>)
 80014ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014cc:	2380      	movs	r3, #128	; 0x80
 80014ce:	055b      	lsls	r3, r3, #21
 80014d0:	4013      	ands	r3, r2
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80014d6:	231f      	movs	r3, #31
 80014d8:	18fb      	adds	r3, r7, r3
 80014da:	2201      	movs	r2, #1
 80014dc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014de:	4ba4      	ldr	r3, [pc, #656]	; (8001770 <HAL_RCC_OscConfig+0x61c>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	2380      	movs	r3, #128	; 0x80
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	4013      	ands	r3, r2
 80014e8:	d11a      	bne.n	8001520 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014ea:	4ba1      	ldr	r3, [pc, #644]	; (8001770 <HAL_RCC_OscConfig+0x61c>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	4ba0      	ldr	r3, [pc, #640]	; (8001770 <HAL_RCC_OscConfig+0x61c>)
 80014f0:	2180      	movs	r1, #128	; 0x80
 80014f2:	0049      	lsls	r1, r1, #1
 80014f4:	430a      	orrs	r2, r1
 80014f6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80014f8:	f7ff fb42 	bl	8000b80 <HAL_GetTick>
 80014fc:	0003      	movs	r3, r0
 80014fe:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001502:	f7ff fb3d 	bl	8000b80 <HAL_GetTick>
 8001506:	0002      	movs	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e127      	b.n	8001764 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001514:	4b96      	ldr	r3, [pc, #600]	; (8001770 <HAL_RCC_OscConfig+0x61c>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	2380      	movs	r3, #128	; 0x80
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	4013      	ands	r3, r2
 800151e:	d0f0      	beq.n	8001502 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d106      	bne.n	8001536 <HAL_RCC_OscConfig+0x3e2>
 8001528:	4b90      	ldr	r3, [pc, #576]	; (800176c <HAL_RCC_OscConfig+0x618>)
 800152a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800152c:	4b8f      	ldr	r3, [pc, #572]	; (800176c <HAL_RCC_OscConfig+0x618>)
 800152e:	2101      	movs	r1, #1
 8001530:	430a      	orrs	r2, r1
 8001532:	65da      	str	r2, [r3, #92]	; 0x5c
 8001534:	e01c      	b.n	8001570 <HAL_RCC_OscConfig+0x41c>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	2b05      	cmp	r3, #5
 800153c:	d10c      	bne.n	8001558 <HAL_RCC_OscConfig+0x404>
 800153e:	4b8b      	ldr	r3, [pc, #556]	; (800176c <HAL_RCC_OscConfig+0x618>)
 8001540:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001542:	4b8a      	ldr	r3, [pc, #552]	; (800176c <HAL_RCC_OscConfig+0x618>)
 8001544:	2104      	movs	r1, #4
 8001546:	430a      	orrs	r2, r1
 8001548:	65da      	str	r2, [r3, #92]	; 0x5c
 800154a:	4b88      	ldr	r3, [pc, #544]	; (800176c <HAL_RCC_OscConfig+0x618>)
 800154c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800154e:	4b87      	ldr	r3, [pc, #540]	; (800176c <HAL_RCC_OscConfig+0x618>)
 8001550:	2101      	movs	r1, #1
 8001552:	430a      	orrs	r2, r1
 8001554:	65da      	str	r2, [r3, #92]	; 0x5c
 8001556:	e00b      	b.n	8001570 <HAL_RCC_OscConfig+0x41c>
 8001558:	4b84      	ldr	r3, [pc, #528]	; (800176c <HAL_RCC_OscConfig+0x618>)
 800155a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800155c:	4b83      	ldr	r3, [pc, #524]	; (800176c <HAL_RCC_OscConfig+0x618>)
 800155e:	2101      	movs	r1, #1
 8001560:	438a      	bics	r2, r1
 8001562:	65da      	str	r2, [r3, #92]	; 0x5c
 8001564:	4b81      	ldr	r3, [pc, #516]	; (800176c <HAL_RCC_OscConfig+0x618>)
 8001566:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001568:	4b80      	ldr	r3, [pc, #512]	; (800176c <HAL_RCC_OscConfig+0x618>)
 800156a:	2104      	movs	r1, #4
 800156c:	438a      	bics	r2, r1
 800156e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d014      	beq.n	80015a2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001578:	f7ff fb02 	bl	8000b80 <HAL_GetTick>
 800157c:	0003      	movs	r3, r0
 800157e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001580:	e009      	b.n	8001596 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001582:	f7ff fafd 	bl	8000b80 <HAL_GetTick>
 8001586:	0002      	movs	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	4a79      	ldr	r2, [pc, #484]	; (8001774 <HAL_RCC_OscConfig+0x620>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e0e6      	b.n	8001764 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001596:	4b75      	ldr	r3, [pc, #468]	; (800176c <HAL_RCC_OscConfig+0x618>)
 8001598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800159a:	2202      	movs	r2, #2
 800159c:	4013      	ands	r3, r2
 800159e:	d0f0      	beq.n	8001582 <HAL_RCC_OscConfig+0x42e>
 80015a0:	e013      	b.n	80015ca <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a2:	f7ff faed 	bl	8000b80 <HAL_GetTick>
 80015a6:	0003      	movs	r3, r0
 80015a8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015aa:	e009      	b.n	80015c0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ac:	f7ff fae8 	bl	8000b80 <HAL_GetTick>
 80015b0:	0002      	movs	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	4a6f      	ldr	r2, [pc, #444]	; (8001774 <HAL_RCC_OscConfig+0x620>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e0d1      	b.n	8001764 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015c0:	4b6a      	ldr	r3, [pc, #424]	; (800176c <HAL_RCC_OscConfig+0x618>)
 80015c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c4:	2202      	movs	r2, #2
 80015c6:	4013      	ands	r3, r2
 80015c8:	d1f0      	bne.n	80015ac <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80015ca:	231f      	movs	r3, #31
 80015cc:	18fb      	adds	r3, r7, r3
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d105      	bne.n	80015e0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80015d4:	4b65      	ldr	r3, [pc, #404]	; (800176c <HAL_RCC_OscConfig+0x618>)
 80015d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015d8:	4b64      	ldr	r3, [pc, #400]	; (800176c <HAL_RCC_OscConfig+0x618>)
 80015da:	4967      	ldr	r1, [pc, #412]	; (8001778 <HAL_RCC_OscConfig+0x624>)
 80015dc:	400a      	ands	r2, r1
 80015de:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69db      	ldr	r3, [r3, #28]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d100      	bne.n	80015ea <HAL_RCC_OscConfig+0x496>
 80015e8:	e0bb      	b.n	8001762 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015ea:	4b60      	ldr	r3, [pc, #384]	; (800176c <HAL_RCC_OscConfig+0x618>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	2238      	movs	r2, #56	; 0x38
 80015f0:	4013      	ands	r3, r2
 80015f2:	2b10      	cmp	r3, #16
 80015f4:	d100      	bne.n	80015f8 <HAL_RCC_OscConfig+0x4a4>
 80015f6:	e07b      	b.n	80016f0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	69db      	ldr	r3, [r3, #28]
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d156      	bne.n	80016ae <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001600:	4b5a      	ldr	r3, [pc, #360]	; (800176c <HAL_RCC_OscConfig+0x618>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4b59      	ldr	r3, [pc, #356]	; (800176c <HAL_RCC_OscConfig+0x618>)
 8001606:	495d      	ldr	r1, [pc, #372]	; (800177c <HAL_RCC_OscConfig+0x628>)
 8001608:	400a      	ands	r2, r1
 800160a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160c:	f7ff fab8 	bl	8000b80 <HAL_GetTick>
 8001610:	0003      	movs	r3, r0
 8001612:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001616:	f7ff fab3 	bl	8000b80 <HAL_GetTick>
 800161a:	0002      	movs	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e09d      	b.n	8001764 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001628:	4b50      	ldr	r3, [pc, #320]	; (800176c <HAL_RCC_OscConfig+0x618>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	049b      	lsls	r3, r3, #18
 8001630:	4013      	ands	r3, r2
 8001632:	d1f0      	bne.n	8001616 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001634:	4b4d      	ldr	r3, [pc, #308]	; (800176c <HAL_RCC_OscConfig+0x618>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	4a51      	ldr	r2, [pc, #324]	; (8001780 <HAL_RCC_OscConfig+0x62c>)
 800163a:	4013      	ands	r3, r2
 800163c:	0019      	movs	r1, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a1a      	ldr	r2, [r3, #32]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164c:	021b      	lsls	r3, r3, #8
 800164e:	431a      	orrs	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001654:	431a      	orrs	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	431a      	orrs	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001660:	431a      	orrs	r2, r3
 8001662:	4b42      	ldr	r3, [pc, #264]	; (800176c <HAL_RCC_OscConfig+0x618>)
 8001664:	430a      	orrs	r2, r1
 8001666:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001668:	4b40      	ldr	r3, [pc, #256]	; (800176c <HAL_RCC_OscConfig+0x618>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4b3f      	ldr	r3, [pc, #252]	; (800176c <HAL_RCC_OscConfig+0x618>)
 800166e:	2180      	movs	r1, #128	; 0x80
 8001670:	0449      	lsls	r1, r1, #17
 8001672:	430a      	orrs	r2, r1
 8001674:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001676:	4b3d      	ldr	r3, [pc, #244]	; (800176c <HAL_RCC_OscConfig+0x618>)
 8001678:	68da      	ldr	r2, [r3, #12]
 800167a:	4b3c      	ldr	r3, [pc, #240]	; (800176c <HAL_RCC_OscConfig+0x618>)
 800167c:	2180      	movs	r1, #128	; 0x80
 800167e:	0549      	lsls	r1, r1, #21
 8001680:	430a      	orrs	r2, r1
 8001682:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001684:	f7ff fa7c 	bl	8000b80 <HAL_GetTick>
 8001688:	0003      	movs	r3, r0
 800168a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800168e:	f7ff fa77 	bl	8000b80 <HAL_GetTick>
 8001692:	0002      	movs	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e061      	b.n	8001764 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016a0:	4b32      	ldr	r3, [pc, #200]	; (800176c <HAL_RCC_OscConfig+0x618>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	2380      	movs	r3, #128	; 0x80
 80016a6:	049b      	lsls	r3, r3, #18
 80016a8:	4013      	ands	r3, r2
 80016aa:	d0f0      	beq.n	800168e <HAL_RCC_OscConfig+0x53a>
 80016ac:	e059      	b.n	8001762 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ae:	4b2f      	ldr	r3, [pc, #188]	; (800176c <HAL_RCC_OscConfig+0x618>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	4b2e      	ldr	r3, [pc, #184]	; (800176c <HAL_RCC_OscConfig+0x618>)
 80016b4:	4931      	ldr	r1, [pc, #196]	; (800177c <HAL_RCC_OscConfig+0x628>)
 80016b6:	400a      	ands	r2, r1
 80016b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ba:	f7ff fa61 	bl	8000b80 <HAL_GetTick>
 80016be:	0003      	movs	r3, r0
 80016c0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016c4:	f7ff fa5c 	bl	8000b80 <HAL_GetTick>
 80016c8:	0002      	movs	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e046      	b.n	8001764 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016d6:	4b25      	ldr	r3, [pc, #148]	; (800176c <HAL_RCC_OscConfig+0x618>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	2380      	movs	r3, #128	; 0x80
 80016dc:	049b      	lsls	r3, r3, #18
 80016de:	4013      	ands	r3, r2
 80016e0:	d1f0      	bne.n	80016c4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80016e2:	4b22      	ldr	r3, [pc, #136]	; (800176c <HAL_RCC_OscConfig+0x618>)
 80016e4:	68da      	ldr	r2, [r3, #12]
 80016e6:	4b21      	ldr	r3, [pc, #132]	; (800176c <HAL_RCC_OscConfig+0x618>)
 80016e8:	4926      	ldr	r1, [pc, #152]	; (8001784 <HAL_RCC_OscConfig+0x630>)
 80016ea:	400a      	ands	r2, r1
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	e038      	b.n	8001762 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69db      	ldr	r3, [r3, #28]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d101      	bne.n	80016fc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e033      	b.n	8001764 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80016fc:	4b1b      	ldr	r3, [pc, #108]	; (800176c <HAL_RCC_OscConfig+0x618>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	2203      	movs	r2, #3
 8001706:	401a      	ands	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	429a      	cmp	r2, r3
 800170e:	d126      	bne.n	800175e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	2270      	movs	r2, #112	; 0x70
 8001714:	401a      	ands	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800171a:	429a      	cmp	r2, r3
 800171c:	d11f      	bne.n	800175e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800171e:	697a      	ldr	r2, [r7, #20]
 8001720:	23fe      	movs	r3, #254	; 0xfe
 8001722:	01db      	lsls	r3, r3, #7
 8001724:	401a      	ands	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800172c:	429a      	cmp	r2, r3
 800172e:	d116      	bne.n	800175e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	23f8      	movs	r3, #248	; 0xf8
 8001734:	039b      	lsls	r3, r3, #14
 8001736:	401a      	ands	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800173c:	429a      	cmp	r2, r3
 800173e:	d10e      	bne.n	800175e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001740:	697a      	ldr	r2, [r7, #20]
 8001742:	23e0      	movs	r3, #224	; 0xe0
 8001744:	051b      	lsls	r3, r3, #20
 8001746:	401a      	ands	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800174c:	429a      	cmp	r2, r3
 800174e:	d106      	bne.n	800175e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	0f5b      	lsrs	r3, r3, #29
 8001754:	075a      	lsls	r2, r3, #29
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800175a:	429a      	cmp	r2, r3
 800175c:	d001      	beq.n	8001762 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e000      	b.n	8001764 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001762:	2300      	movs	r3, #0
}
 8001764:	0018      	movs	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	b008      	add	sp, #32
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40021000 	.word	0x40021000
 8001770:	40007000 	.word	0x40007000
 8001774:	00001388 	.word	0x00001388
 8001778:	efffffff 	.word	0xefffffff
 800177c:	feffffff 	.word	0xfeffffff
 8001780:	11c1808c 	.word	0x11c1808c
 8001784:	eefefffc 	.word	0xeefefffc

08001788 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d101      	bne.n	800179c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e0e9      	b.n	8001970 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800179c:	4b76      	ldr	r3, [pc, #472]	; (8001978 <HAL_RCC_ClockConfig+0x1f0>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2207      	movs	r2, #7
 80017a2:	4013      	ands	r3, r2
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d91e      	bls.n	80017e8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017aa:	4b73      	ldr	r3, [pc, #460]	; (8001978 <HAL_RCC_ClockConfig+0x1f0>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2207      	movs	r2, #7
 80017b0:	4393      	bics	r3, r2
 80017b2:	0019      	movs	r1, r3
 80017b4:	4b70      	ldr	r3, [pc, #448]	; (8001978 <HAL_RCC_ClockConfig+0x1f0>)
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	430a      	orrs	r2, r1
 80017ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017bc:	f7ff f9e0 	bl	8000b80 <HAL_GetTick>
 80017c0:	0003      	movs	r3, r0
 80017c2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017c4:	e009      	b.n	80017da <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c6:	f7ff f9db 	bl	8000b80 <HAL_GetTick>
 80017ca:	0002      	movs	r2, r0
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	4a6a      	ldr	r2, [pc, #424]	; (800197c <HAL_RCC_ClockConfig+0x1f4>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e0ca      	b.n	8001970 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017da:	4b67      	ldr	r3, [pc, #412]	; (8001978 <HAL_RCC_ClockConfig+0x1f0>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2207      	movs	r2, #7
 80017e0:	4013      	ands	r3, r2
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d1ee      	bne.n	80017c6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2202      	movs	r2, #2
 80017ee:	4013      	ands	r3, r2
 80017f0:	d015      	beq.n	800181e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2204      	movs	r2, #4
 80017f8:	4013      	ands	r3, r2
 80017fa:	d006      	beq.n	800180a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80017fc:	4b60      	ldr	r3, [pc, #384]	; (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	4b5f      	ldr	r3, [pc, #380]	; (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 8001802:	21e0      	movs	r1, #224	; 0xe0
 8001804:	01c9      	lsls	r1, r1, #7
 8001806:	430a      	orrs	r2, r1
 8001808:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800180a:	4b5d      	ldr	r3, [pc, #372]	; (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	4a5d      	ldr	r2, [pc, #372]	; (8001984 <HAL_RCC_ClockConfig+0x1fc>)
 8001810:	4013      	ands	r3, r2
 8001812:	0019      	movs	r1, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	4b59      	ldr	r3, [pc, #356]	; (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 800181a:	430a      	orrs	r2, r1
 800181c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2201      	movs	r2, #1
 8001824:	4013      	ands	r3, r2
 8001826:	d057      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d107      	bne.n	8001840 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001830:	4b53      	ldr	r3, [pc, #332]	; (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	2380      	movs	r3, #128	; 0x80
 8001836:	029b      	lsls	r3, r3, #10
 8001838:	4013      	ands	r3, r2
 800183a:	d12b      	bne.n	8001894 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e097      	b.n	8001970 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	2b02      	cmp	r3, #2
 8001846:	d107      	bne.n	8001858 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001848:	4b4d      	ldr	r3, [pc, #308]	; (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	2380      	movs	r3, #128	; 0x80
 800184e:	049b      	lsls	r3, r3, #18
 8001850:	4013      	ands	r3, r2
 8001852:	d11f      	bne.n	8001894 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e08b      	b.n	8001970 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d107      	bne.n	8001870 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001860:	4b47      	ldr	r3, [pc, #284]	; (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	2380      	movs	r3, #128	; 0x80
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	4013      	ands	r3, r2
 800186a:	d113      	bne.n	8001894 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e07f      	b.n	8001970 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	2b03      	cmp	r3, #3
 8001876:	d106      	bne.n	8001886 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001878:	4b41      	ldr	r3, [pc, #260]	; (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 800187a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800187c:	2202      	movs	r2, #2
 800187e:	4013      	ands	r3, r2
 8001880:	d108      	bne.n	8001894 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e074      	b.n	8001970 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001886:	4b3e      	ldr	r3, [pc, #248]	; (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 8001888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800188a:	2202      	movs	r2, #2
 800188c:	4013      	ands	r3, r2
 800188e:	d101      	bne.n	8001894 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e06d      	b.n	8001970 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001894:	4b3a      	ldr	r3, [pc, #232]	; (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	2207      	movs	r2, #7
 800189a:	4393      	bics	r3, r2
 800189c:	0019      	movs	r1, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	4b37      	ldr	r3, [pc, #220]	; (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 80018a4:	430a      	orrs	r2, r1
 80018a6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018a8:	f7ff f96a 	bl	8000b80 <HAL_GetTick>
 80018ac:	0003      	movs	r3, r0
 80018ae:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b0:	e009      	b.n	80018c6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b2:	f7ff f965 	bl	8000b80 <HAL_GetTick>
 80018b6:	0002      	movs	r2, r0
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	4a2f      	ldr	r2, [pc, #188]	; (800197c <HAL_RCC_ClockConfig+0x1f4>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e054      	b.n	8001970 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c6:	4b2e      	ldr	r3, [pc, #184]	; (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	2238      	movs	r2, #56	; 0x38
 80018cc:	401a      	ands	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d1ec      	bne.n	80018b2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018d8:	4b27      	ldr	r3, [pc, #156]	; (8001978 <HAL_RCC_ClockConfig+0x1f0>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2207      	movs	r2, #7
 80018de:	4013      	ands	r3, r2
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d21e      	bcs.n	8001924 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e6:	4b24      	ldr	r3, [pc, #144]	; (8001978 <HAL_RCC_ClockConfig+0x1f0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2207      	movs	r2, #7
 80018ec:	4393      	bics	r3, r2
 80018ee:	0019      	movs	r1, r3
 80018f0:	4b21      	ldr	r3, [pc, #132]	; (8001978 <HAL_RCC_ClockConfig+0x1f0>)
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	430a      	orrs	r2, r1
 80018f6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018f8:	f7ff f942 	bl	8000b80 <HAL_GetTick>
 80018fc:	0003      	movs	r3, r0
 80018fe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001900:	e009      	b.n	8001916 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001902:	f7ff f93d 	bl	8000b80 <HAL_GetTick>
 8001906:	0002      	movs	r2, r0
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	4a1b      	ldr	r2, [pc, #108]	; (800197c <HAL_RCC_ClockConfig+0x1f4>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e02c      	b.n	8001970 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001916:	4b18      	ldr	r3, [pc, #96]	; (8001978 <HAL_RCC_ClockConfig+0x1f0>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2207      	movs	r2, #7
 800191c:	4013      	ands	r3, r2
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	429a      	cmp	r2, r3
 8001922:	d1ee      	bne.n	8001902 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2204      	movs	r2, #4
 800192a:	4013      	ands	r3, r2
 800192c:	d009      	beq.n	8001942 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800192e:	4b14      	ldr	r3, [pc, #80]	; (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	4a15      	ldr	r2, [pc, #84]	; (8001988 <HAL_RCC_ClockConfig+0x200>)
 8001934:	4013      	ands	r3, r2
 8001936:	0019      	movs	r1, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68da      	ldr	r2, [r3, #12]
 800193c:	4b10      	ldr	r3, [pc, #64]	; (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 800193e:	430a      	orrs	r2, r1
 8001940:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001942:	f000 f829 	bl	8001998 <HAL_RCC_GetSysClockFreq>
 8001946:	0001      	movs	r1, r0
 8001948:	4b0d      	ldr	r3, [pc, #52]	; (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	0a1b      	lsrs	r3, r3, #8
 800194e:	220f      	movs	r2, #15
 8001950:	401a      	ands	r2, r3
 8001952:	4b0e      	ldr	r3, [pc, #56]	; (800198c <HAL_RCC_ClockConfig+0x204>)
 8001954:	0092      	lsls	r2, r2, #2
 8001956:	58d3      	ldr	r3, [r2, r3]
 8001958:	221f      	movs	r2, #31
 800195a:	4013      	ands	r3, r2
 800195c:	000a      	movs	r2, r1
 800195e:	40da      	lsrs	r2, r3
 8001960:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <HAL_RCC_ClockConfig+0x208>)
 8001962:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001964:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <HAL_RCC_ClockConfig+0x20c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	0018      	movs	r0, r3
 800196a:	f7ff f8ad 	bl	8000ac8 <HAL_InitTick>
 800196e:	0003      	movs	r3, r0
}
 8001970:	0018      	movs	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	b004      	add	sp, #16
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40022000 	.word	0x40022000
 800197c:	00001388 	.word	0x00001388
 8001980:	40021000 	.word	0x40021000
 8001984:	fffff0ff 	.word	0xfffff0ff
 8001988:	ffff8fff 	.word	0xffff8fff
 800198c:	08003264 	.word	0x08003264
 8001990:	20000020 	.word	0x20000020
 8001994:	20000024 	.word	0x20000024

08001998 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800199e:	4b3c      	ldr	r3, [pc, #240]	; (8001a90 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	2238      	movs	r2, #56	; 0x38
 80019a4:	4013      	ands	r3, r2
 80019a6:	d10f      	bne.n	80019c8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80019a8:	4b39      	ldr	r3, [pc, #228]	; (8001a90 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	0adb      	lsrs	r3, r3, #11
 80019ae:	2207      	movs	r2, #7
 80019b0:	4013      	ands	r3, r2
 80019b2:	2201      	movs	r2, #1
 80019b4:	409a      	lsls	r2, r3
 80019b6:	0013      	movs	r3, r2
 80019b8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80019ba:	6839      	ldr	r1, [r7, #0]
 80019bc:	4835      	ldr	r0, [pc, #212]	; (8001a94 <HAL_RCC_GetSysClockFreq+0xfc>)
 80019be:	f7fe fbab 	bl	8000118 <__udivsi3>
 80019c2:	0003      	movs	r3, r0
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	e05d      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019c8:	4b31      	ldr	r3, [pc, #196]	; (8001a90 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2238      	movs	r2, #56	; 0x38
 80019ce:	4013      	ands	r3, r2
 80019d0:	2b08      	cmp	r3, #8
 80019d2:	d102      	bne.n	80019da <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019d4:	4b30      	ldr	r3, [pc, #192]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x100>)
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	e054      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019da:	4b2d      	ldr	r3, [pc, #180]	; (8001a90 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	2238      	movs	r2, #56	; 0x38
 80019e0:	4013      	ands	r3, r2
 80019e2:	2b10      	cmp	r3, #16
 80019e4:	d138      	bne.n	8001a58 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80019e6:	4b2a      	ldr	r3, [pc, #168]	; (8001a90 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	2203      	movs	r2, #3
 80019ec:	4013      	ands	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019f0:	4b27      	ldr	r3, [pc, #156]	; (8001a90 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	091b      	lsrs	r3, r3, #4
 80019f6:	2207      	movs	r2, #7
 80019f8:	4013      	ands	r3, r2
 80019fa:	3301      	adds	r3, #1
 80019fc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2b03      	cmp	r3, #3
 8001a02:	d10d      	bne.n	8001a20 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a04:	68b9      	ldr	r1, [r7, #8]
 8001a06:	4824      	ldr	r0, [pc, #144]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x100>)
 8001a08:	f7fe fb86 	bl	8000118 <__udivsi3>
 8001a0c:	0003      	movs	r3, r0
 8001a0e:	0019      	movs	r1, r3
 8001a10:	4b1f      	ldr	r3, [pc, #124]	; (8001a90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	0a1b      	lsrs	r3, r3, #8
 8001a16:	227f      	movs	r2, #127	; 0x7f
 8001a18:	4013      	ands	r3, r2
 8001a1a:	434b      	muls	r3, r1
 8001a1c:	617b      	str	r3, [r7, #20]
        break;
 8001a1e:	e00d      	b.n	8001a3c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001a20:	68b9      	ldr	r1, [r7, #8]
 8001a22:	481c      	ldr	r0, [pc, #112]	; (8001a94 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a24:	f7fe fb78 	bl	8000118 <__udivsi3>
 8001a28:	0003      	movs	r3, r0
 8001a2a:	0019      	movs	r1, r3
 8001a2c:	4b18      	ldr	r3, [pc, #96]	; (8001a90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	0a1b      	lsrs	r3, r3, #8
 8001a32:	227f      	movs	r2, #127	; 0x7f
 8001a34:	4013      	ands	r3, r2
 8001a36:	434b      	muls	r3, r1
 8001a38:	617b      	str	r3, [r7, #20]
        break;
 8001a3a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001a3c:	4b14      	ldr	r3, [pc, #80]	; (8001a90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	0f5b      	lsrs	r3, r3, #29
 8001a42:	2207      	movs	r2, #7
 8001a44:	4013      	ands	r3, r2
 8001a46:	3301      	adds	r3, #1
 8001a48:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	6978      	ldr	r0, [r7, #20]
 8001a4e:	f7fe fb63 	bl	8000118 <__udivsi3>
 8001a52:	0003      	movs	r3, r0
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	e015      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001a58:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	2238      	movs	r2, #56	; 0x38
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2b20      	cmp	r3, #32
 8001a62:	d103      	bne.n	8001a6c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001a64:	2380      	movs	r3, #128	; 0x80
 8001a66:	021b      	lsls	r3, r3, #8
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	e00b      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001a6c:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2238      	movs	r2, #56	; 0x38
 8001a72:	4013      	ands	r3, r2
 8001a74:	2b18      	cmp	r3, #24
 8001a76:	d103      	bne.n	8001a80 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001a78:	23fa      	movs	r3, #250	; 0xfa
 8001a7a:	01db      	lsls	r3, r3, #7
 8001a7c:	613b      	str	r3, [r7, #16]
 8001a7e:	e001      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001a84:	693b      	ldr	r3, [r7, #16]
}
 8001a86:	0018      	movs	r0, r3
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	b006      	add	sp, #24
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	46c0      	nop			; (mov r8, r8)
 8001a90:	40021000 	.word	0x40021000
 8001a94:	00f42400 	.word	0x00f42400
 8001a98:	007a1200 	.word	0x007a1200

08001a9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001aa4:	2313      	movs	r3, #19
 8001aa6:	18fb      	adds	r3, r7, r3
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001aac:	2312      	movs	r3, #18
 8001aae:	18fb      	adds	r3, r7, r3
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	2380      	movs	r3, #128	; 0x80
 8001aba:	029b      	lsls	r3, r3, #10
 8001abc:	4013      	ands	r3, r2
 8001abe:	d100      	bne.n	8001ac2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001ac0:	e0a3      	b.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ac2:	2011      	movs	r0, #17
 8001ac4:	183b      	adds	r3, r7, r0
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aca:	4bc3      	ldr	r3, [pc, #780]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001acc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ace:	2380      	movs	r3, #128	; 0x80
 8001ad0:	055b      	lsls	r3, r3, #21
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d110      	bne.n	8001af8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ad6:	4bc0      	ldr	r3, [pc, #768]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ad8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ada:	4bbf      	ldr	r3, [pc, #764]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001adc:	2180      	movs	r1, #128	; 0x80
 8001ade:	0549      	lsls	r1, r1, #21
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ae4:	4bbc      	ldr	r3, [pc, #752]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ae6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ae8:	2380      	movs	r3, #128	; 0x80
 8001aea:	055b      	lsls	r3, r3, #21
 8001aec:	4013      	ands	r3, r2
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001af2:	183b      	adds	r3, r7, r0
 8001af4:	2201      	movs	r2, #1
 8001af6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001af8:	4bb8      	ldr	r3, [pc, #736]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4bb7      	ldr	r3, [pc, #732]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001afe:	2180      	movs	r1, #128	; 0x80
 8001b00:	0049      	lsls	r1, r1, #1
 8001b02:	430a      	orrs	r2, r1
 8001b04:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b06:	f7ff f83b 	bl	8000b80 <HAL_GetTick>
 8001b0a:	0003      	movs	r3, r0
 8001b0c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b0e:	e00b      	b.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b10:	f7ff f836 	bl	8000b80 <HAL_GetTick>
 8001b14:	0002      	movs	r2, r0
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d904      	bls.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001b1e:	2313      	movs	r3, #19
 8001b20:	18fb      	adds	r3, r7, r3
 8001b22:	2203      	movs	r2, #3
 8001b24:	701a      	strb	r2, [r3, #0]
        break;
 8001b26:	e005      	b.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b28:	4bac      	ldr	r3, [pc, #688]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	2380      	movs	r3, #128	; 0x80
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	4013      	ands	r3, r2
 8001b32:	d0ed      	beq.n	8001b10 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001b34:	2313      	movs	r3, #19
 8001b36:	18fb      	adds	r3, r7, r3
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d154      	bne.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001b3e:	4ba6      	ldr	r3, [pc, #664]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b40:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b42:	23c0      	movs	r3, #192	; 0xc0
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4013      	ands	r3, r2
 8001b48:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d019      	beq.n	8001b84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d014      	beq.n	8001b84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001b5a:	4b9f      	ldr	r3, [pc, #636]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b5e:	4aa0      	ldr	r2, [pc, #640]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001b60:	4013      	ands	r3, r2
 8001b62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001b64:	4b9c      	ldr	r3, [pc, #624]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b68:	4b9b      	ldr	r3, [pc, #620]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b6a:	2180      	movs	r1, #128	; 0x80
 8001b6c:	0249      	lsls	r1, r1, #9
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001b72:	4b99      	ldr	r3, [pc, #612]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b76:	4b98      	ldr	r3, [pc, #608]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b78:	499a      	ldr	r1, [pc, #616]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8001b7a:	400a      	ands	r2, r1
 8001b7c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001b7e:	4b96      	ldr	r3, [pc, #600]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	2201      	movs	r2, #1
 8001b88:	4013      	ands	r3, r2
 8001b8a:	d016      	beq.n	8001bba <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8c:	f7fe fff8 	bl	8000b80 <HAL_GetTick>
 8001b90:	0003      	movs	r3, r0
 8001b92:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b94:	e00c      	b.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b96:	f7fe fff3 	bl	8000b80 <HAL_GetTick>
 8001b9a:	0002      	movs	r2, r0
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	4a91      	ldr	r2, [pc, #580]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d904      	bls.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001ba6:	2313      	movs	r3, #19
 8001ba8:	18fb      	adds	r3, r7, r3
 8001baa:	2203      	movs	r2, #3
 8001bac:	701a      	strb	r2, [r3, #0]
            break;
 8001bae:	e004      	b.n	8001bba <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bb0:	4b89      	ldr	r3, [pc, #548]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb4:	2202      	movs	r2, #2
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	d0ed      	beq.n	8001b96 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001bba:	2313      	movs	r3, #19
 8001bbc:	18fb      	adds	r3, r7, r3
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d10a      	bne.n	8001bda <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bc4:	4b84      	ldr	r3, [pc, #528]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc8:	4a85      	ldr	r2, [pc, #532]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001bca:	4013      	ands	r3, r2
 8001bcc:	0019      	movs	r1, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bd2:	4b81      	ldr	r3, [pc, #516]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bd8:	e00c      	b.n	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001bda:	2312      	movs	r3, #18
 8001bdc:	18fb      	adds	r3, r7, r3
 8001bde:	2213      	movs	r2, #19
 8001be0:	18ba      	adds	r2, r7, r2
 8001be2:	7812      	ldrb	r2, [r2, #0]
 8001be4:	701a      	strb	r2, [r3, #0]
 8001be6:	e005      	b.n	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001be8:	2312      	movs	r3, #18
 8001bea:	18fb      	adds	r3, r7, r3
 8001bec:	2213      	movs	r2, #19
 8001bee:	18ba      	adds	r2, r7, r2
 8001bf0:	7812      	ldrb	r2, [r2, #0]
 8001bf2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bf4:	2311      	movs	r3, #17
 8001bf6:	18fb      	adds	r3, r7, r3
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d105      	bne.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bfe:	4b76      	ldr	r3, [pc, #472]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c02:	4b75      	ldr	r3, [pc, #468]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c04:	4979      	ldr	r1, [pc, #484]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8001c06:	400a      	ands	r2, r1
 8001c08:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	4013      	ands	r3, r2
 8001c12:	d009      	beq.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c14:	4b70      	ldr	r3, [pc, #448]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c18:	2203      	movs	r2, #3
 8001c1a:	4393      	bics	r3, r2
 8001c1c:	0019      	movs	r1, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	4b6d      	ldr	r3, [pc, #436]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c24:	430a      	orrs	r2, r1
 8001c26:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	4013      	ands	r3, r2
 8001c30:	d009      	beq.n	8001c46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c32:	4b69      	ldr	r3, [pc, #420]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c36:	220c      	movs	r2, #12
 8001c38:	4393      	bics	r3, r2
 8001c3a:	0019      	movs	r1, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	4b65      	ldr	r3, [pc, #404]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c42:	430a      	orrs	r2, r1
 8001c44:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2210      	movs	r2, #16
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	d009      	beq.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001c50:	4b61      	ldr	r3, [pc, #388]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c54:	4a66      	ldr	r2, [pc, #408]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8001c56:	4013      	ands	r3, r2
 8001c58:	0019      	movs	r1, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	4b5e      	ldr	r3, [pc, #376]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c60:	430a      	orrs	r2, r1
 8001c62:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	2380      	movs	r3, #128	; 0x80
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	d009      	beq.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001c70:	4b59      	ldr	r3, [pc, #356]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c74:	4a5f      	ldr	r2, [pc, #380]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8001c76:	4013      	ands	r3, r2
 8001c78:	0019      	movs	r1, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	699a      	ldr	r2, [r3, #24]
 8001c7e:	4b56      	ldr	r3, [pc, #344]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c80:	430a      	orrs	r2, r1
 8001c82:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	2380      	movs	r3, #128	; 0x80
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d009      	beq.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001c90:	4b51      	ldr	r3, [pc, #324]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c94:	4a58      	ldr	r2, [pc, #352]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001c96:	4013      	ands	r3, r2
 8001c98:	0019      	movs	r1, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69da      	ldr	r2, [r3, #28]
 8001c9e:	4b4e      	ldr	r3, [pc, #312]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2220      	movs	r2, #32
 8001caa:	4013      	ands	r3, r2
 8001cac:	d009      	beq.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001cae:	4b4a      	ldr	r3, [pc, #296]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb2:	4a52      	ldr	r2, [pc, #328]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	0019      	movs	r1, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	691a      	ldr	r2, [r3, #16]
 8001cbc:	4b46      	ldr	r3, [pc, #280]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	2380      	movs	r3, #128	; 0x80
 8001cc8:	01db      	lsls	r3, r3, #7
 8001cca:	4013      	ands	r3, r2
 8001ccc:	d015      	beq.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001cce:	4b42      	ldr	r3, [pc, #264]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	0899      	lsrs	r1, r3, #2
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a1a      	ldr	r2, [r3, #32]
 8001cda:	4b3f      	ldr	r3, [pc, #252]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a1a      	ldr	r2, [r3, #32]
 8001ce4:	2380      	movs	r3, #128	; 0x80
 8001ce6:	05db      	lsls	r3, r3, #23
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d106      	bne.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001cec:	4b3a      	ldr	r3, [pc, #232]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cee:	68da      	ldr	r2, [r3, #12]
 8001cf0:	4b39      	ldr	r3, [pc, #228]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cf2:	2180      	movs	r1, #128	; 0x80
 8001cf4:	0249      	lsls	r1, r1, #9
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	2380      	movs	r3, #128	; 0x80
 8001d00:	031b      	lsls	r3, r3, #12
 8001d02:	4013      	ands	r3, r2
 8001d04:	d009      	beq.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001d06:	4b34      	ldr	r3, [pc, #208]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d0a:	2240      	movs	r2, #64	; 0x40
 8001d0c:	4393      	bics	r3, r2
 8001d0e:	0019      	movs	r1, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d14:	4b30      	ldr	r3, [pc, #192]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d16:	430a      	orrs	r2, r1
 8001d18:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	2380      	movs	r3, #128	; 0x80
 8001d20:	039b      	lsls	r3, r3, #14
 8001d22:	4013      	ands	r3, r2
 8001d24:	d016      	beq.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001d26:	4b2c      	ldr	r3, [pc, #176]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d2a:	4a35      	ldr	r2, [pc, #212]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	0019      	movs	r1, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d34:	4b28      	ldr	r3, [pc, #160]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d36:	430a      	orrs	r2, r1
 8001d38:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	03db      	lsls	r3, r3, #15
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d106      	bne.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001d46:	4b24      	ldr	r3, [pc, #144]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d48:	68da      	ldr	r2, [r3, #12]
 8001d4a:	4b23      	ldr	r3, [pc, #140]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d4c:	2180      	movs	r1, #128	; 0x80
 8001d4e:	0449      	lsls	r1, r1, #17
 8001d50:	430a      	orrs	r2, r1
 8001d52:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	2380      	movs	r3, #128	; 0x80
 8001d5a:	03db      	lsls	r3, r3, #15
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d016      	beq.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001d60:	4b1d      	ldr	r3, [pc, #116]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d64:	4a27      	ldr	r2, [pc, #156]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8001d66:	4013      	ands	r3, r2
 8001d68:	0019      	movs	r1, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d6e:	4b1a      	ldr	r3, [pc, #104]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d70:	430a      	orrs	r2, r1
 8001d72:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d78:	2380      	movs	r3, #128	; 0x80
 8001d7a:	045b      	lsls	r3, r3, #17
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d106      	bne.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001d80:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d82:	68da      	ldr	r2, [r3, #12]
 8001d84:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d86:	2180      	movs	r1, #128	; 0x80
 8001d88:	0449      	lsls	r1, r1, #17
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	2380      	movs	r3, #128	; 0x80
 8001d94:	011b      	lsls	r3, r3, #4
 8001d96:	4013      	ands	r3, r2
 8001d98:	d016      	beq.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001d9a:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d9e:	4a1a      	ldr	r2, [pc, #104]	; (8001e08 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8001da0:	4013      	ands	r3, r2
 8001da2:	0019      	movs	r1, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	695a      	ldr	r2, [r3, #20]
 8001da8:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001daa:	430a      	orrs	r2, r1
 8001dac:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	695a      	ldr	r2, [r3, #20]
 8001db2:	2380      	movs	r3, #128	; 0x80
 8001db4:	01db      	lsls	r3, r3, #7
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d106      	bne.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001dba:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dbc:	68da      	ldr	r2, [r3, #12]
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dc0:	2180      	movs	r1, #128	; 0x80
 8001dc2:	0249      	lsls	r1, r1, #9
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001dc8:	2312      	movs	r3, #18
 8001dca:	18fb      	adds	r3, r7, r3
 8001dcc:	781b      	ldrb	r3, [r3, #0]
}
 8001dce:	0018      	movs	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	b006      	add	sp, #24
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40007000 	.word	0x40007000
 8001de0:	fffffcff 	.word	0xfffffcff
 8001de4:	fffeffff 	.word	0xfffeffff
 8001de8:	00001388 	.word	0x00001388
 8001dec:	efffffff 	.word	0xefffffff
 8001df0:	fffff3ff 	.word	0xfffff3ff
 8001df4:	fff3ffff 	.word	0xfff3ffff
 8001df8:	ffcfffff 	.word	0xffcfffff
 8001dfc:	ffffcfff 	.word	0xffffcfff
 8001e00:	ffbfffff 	.word	0xffbfffff
 8001e04:	feffffff 	.word	0xfeffffff
 8001e08:	ffff3fff 	.word	0xffff3fff

08001e0c <HAL_RCCEx_GetPeriphCLKConfig>:
  * @note (1) Peripheral is not available on all devices
  * @note (2) Peripheral clock selection is not available on all devices
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_I2S1 | \
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a3f      	ldr	r2, [pc, #252]	; (8001f14 <HAL_RCCEx_GetPeriphCLKConfig+0x108>)
 8001e18:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_ADC     | RCC_PERIPHCLK_RTC ;

#if defined(RCC_CCIPR_LPTIM1SEL) && defined(RCC_CCIPR_LPTIM2SEL)
  PeriphClkInit->PeriphClockSelection |=  RCC_PERIPHCLK_LPTIM2  | RCC_PERIPHCLK_LPTIM1;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	22c0      	movs	r2, #192	; 0xc0
 8001e20:	00d2      	lsls	r2, r2, #3
 8001e22:	431a      	orrs	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	601a      	str	r2, [r3, #0]
#endif /* RCC_CCIPR_LPTIM1SEL && RCC_CCIPR_LPTIM2SEL */
#if defined(RCC_CCIPR_RNGSEL)
  PeriphClkInit->PeriphClockSelection |=  RCC_PERIPHCLK_RNG;
#endif /* RCC_CCIPR_RNGSEL */
#if defined(RCC_CCIPR_LPUART1SEL)
  PeriphClkInit->PeriphClockSelection |=  RCC_PERIPHCLK_LPUART1;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2210      	movs	r2, #16
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	601a      	str	r2, [r3, #0]
#endif /* RCC_CCIPR_LPUART1SEL */
#if defined(RCC_CCIPR_LPUART2SEL)
  PeriphClkInit->PeriphClockSelection |=  RCC_PERIPHCLK_LPUART2;
#endif /* RCC_CCIPR_LPUART2SEL */
#if defined(RCC_CCIPR_CECSEL)
  PeriphClkInit->PeriphClockSelection |=  RCC_PERIPHCLK_CEC;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2280      	movs	r2, #128	; 0x80
 8001e3a:	0312      	lsls	r2, r2, #12
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	601a      	str	r2, [r3, #0]
#endif /* RCC_CCIPR_CECSEL */
#if defined(RCC_CCIPR_TIM1SEL)
  PeriphClkInit->PeriphClockSelection |=  RCC_PERIPHCLK_TIM1;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2280      	movs	r2, #128	; 0x80
 8001e48:	0392      	lsls	r2, r2, #14
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	601a      	str	r2, [r3, #0]
#endif /* RCC_CCIPR_TIM1SEL */
#if defined(RCC_CCIPR_TIM15SEL)
  PeriphClkInit->PeriphClockSelection |=  RCC_PERIPHCLK_TIM15;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2280      	movs	r2, #128	; 0x80
 8001e56:	03d2      	lsls	r2, r2, #15
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	601a      	str	r2, [r3, #0]
#endif /* RCC_CCIPR_TIM15SEL */
#if defined(RCC_CCIPR_USART2SEL)
  PeriphClkInit->PeriphClockSelection |=  RCC_PERIPHCLK_USART2;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2202      	movs	r2, #2
 8001e64:	431a      	orrs	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	601a      	str	r2, [r3, #0]
#endif /* RCC_CCIPR2_USBSEL */
#if defined(RCC_CCIPR2_FDCANSEL)
  PeriphClkInit->PeriphClockSelection |=  RCC_PERIPHCLK_FDCAN;
#endif /* RCC_CCIPR_FDCANSEL */
  /* Get the USART1 clock source ---------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection  = __HAL_RCC_GET_USART1_SOURCE();
 8001e6a:	4b2b      	ldr	r3, [pc, #172]	; (8001f18 <HAL_RCCEx_GetPeriphCLKConfig+0x10c>)
 8001e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6e:	2203      	movs	r2, #3
 8001e70:	401a      	ands	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	605a      	str	r2, [r3, #4]
#if defined(RCC_CCIPR_USART2SEL)
  /* Get the USART2 clock source ---------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection  = __HAL_RCC_GET_USART2_SOURCE();
 8001e76:	4b28      	ldr	r3, [pc, #160]	; (8001f18 <HAL_RCCEx_GetPeriphCLKConfig+0x10c>)
 8001e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7a:	220c      	movs	r2, #12
 8001e7c:	401a      	ands	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	609a      	str	r2, [r3, #8]
  /* Get the USART3 clock source ---------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection  = __HAL_RCC_GET_USART3_SOURCE();
#endif /* RCC_CCIPR_USART3SEL */
#if defined(RCC_CCIPR_LPUART1SEL)
  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection = __HAL_RCC_GET_LPUART1_SOURCE();
 8001e82:	4b25      	ldr	r3, [pc, #148]	; (8001f18 <HAL_RCCEx_GetPeriphCLKConfig+0x10c>)
 8001e84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e86:	23c0      	movs	r3, #192	; 0xc0
 8001e88:	011b      	lsls	r3, r3, #4
 8001e8a:	401a      	ands	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	60da      	str	r2, [r3, #12]
#if defined(RCC_CCIPR_LPUART2SEL)
  /* Get the LPUART2 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart2ClockSelection = __HAL_RCC_GET_LPUART2_SOURCE();
#endif /* RCC_CCIPR_LPUART2SEL */
  /* Get the I2C1 clock source -----------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection    = __HAL_RCC_GET_I2C1_SOURCE();
 8001e90:	4b21      	ldr	r3, [pc, #132]	; (8001f18 <HAL_RCCEx_GetPeriphCLKConfig+0x10c>)
 8001e92:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e94:	23c0      	movs	r3, #192	; 0xc0
 8001e96:	019b      	lsls	r3, r3, #6
 8001e98:	401a      	ands	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	611a      	str	r2, [r3, #16]
  /* Get the I2C2 clock source -----------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection    = __HAL_RCC_GET_I2C2_SOURCE();
#endif /* RCC_CCIPR_I2C2SEL */
#if defined(RCC_CCIPR_LPTIM1SEL)
  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection  = __HAL_RCC_GET_LPTIM1_SOURCE();
 8001e9e:	4b1e      	ldr	r3, [pc, #120]	; (8001f18 <HAL_RCCEx_GetPeriphCLKConfig+0x10c>)
 8001ea0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001ea2:	23c0      	movs	r3, #192	; 0xc0
 8001ea4:	031b      	lsls	r3, r3, #12
 8001ea6:	401a      	ands	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	619a      	str	r2, [r3, #24]
#endif /* RCC_CCIPR_LPTIM1SEL */
#if defined(RCC_CCIPR_LPTIM2SEL)
  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection  = __HAL_RCC_GET_LPTIM2_SOURCE();
 8001eac:	4b1a      	ldr	r3, [pc, #104]	; (8001f18 <HAL_RCCEx_GetPeriphCLKConfig+0x10c>)
 8001eae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001eb0:	23c0      	movs	r3, #192	; 0xc0
 8001eb2:	039b      	lsls	r3, r3, #14
 8001eb4:	401a      	ands	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	61da      	str	r2, [r3, #28]
#endif /* RCC_CCIPR_LPTIM2SEL */
#if defined(RCC_CCIPR_TIM1SEL)
  /* Get the TIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Tim1ClockSelection  = __HAL_RCC_GET_TIM1_SOURCE();
 8001eba:	4b17      	ldr	r3, [pc, #92]	; (8001f18 <HAL_RCCEx_GetPeriphCLKConfig+0x10c>)
 8001ebc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001ebe:	2380      	movs	r3, #128	; 0x80
 8001ec0:	03db      	lsls	r3, r3, #15
 8001ec2:	401a      	ands	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* RCC_CCIPR_TIM1SEL */
#if defined(RCC_CCIPR_TIM15SEL)
  /* Get the TIM15 clock source ---------------------------------------------*/
  PeriphClkInit->Tim15ClockSelection  = __HAL_RCC_GET_TIM15_SOURCE();
 8001ec8:	4b13      	ldr	r3, [pc, #76]	; (8001f18 <HAL_RCCEx_GetPeriphCLKConfig+0x10c>)
 8001eca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001ecc:	2380      	movs	r3, #128	; 0x80
 8001ece:	045b      	lsls	r3, r3, #17
 8001ed0:	401a      	ands	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* RCC_CCIPR_TIM15SEL */
  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection     = __HAL_RCC_GET_RTC_SOURCE();
 8001ed6:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <HAL_RCCEx_GetPeriphCLKConfig+0x10c>)
 8001ed8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001eda:	23c0      	movs	r3, #192	; 0xc0
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	401a      	ands	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(RCC_CCIPR_RNGSEL)
  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection     = __HAL_RCC_GET_RNG_SOURCE();
#endif  /* RCC_CCIPR_RNGSEL */
  /* Get the ADC clock source -----------------------------------------------*/
  PeriphClkInit->AdcClockSelection     = __HAL_RCC_GET_ADC_SOURCE();
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <HAL_RCCEx_GetPeriphCLKConfig+0x10c>)
 8001ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee8:	0f9b      	lsrs	r3, r3, #30
 8001eea:	079a      	lsls	r2, r3, #30
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	621a      	str	r2, [r3, #32]
#if defined(RCC_CCIPR_CECSEL)
  /* Get the CEC clock source -----------------------------------------------*/
  PeriphClkInit->CecClockSelection     = __HAL_RCC_GET_CEC_SOURCE();
 8001ef0:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <HAL_RCCEx_GetPeriphCLKConfig+0x10c>)
 8001ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef4:	2240      	movs	r2, #64	; 0x40
 8001ef6:	401a      	ands	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	625a      	str	r2, [r3, #36]	; 0x24
#if defined(RCC_CCIPR2_FDCANSEL)
  /* Get the FDCAN clock source -----------------------------------------------*/
  PeriphClkInit->FdcanClockSelection     = __HAL_RCC_GET_FDCAN_SOURCE();
#endif  /* RCC_CCIPR2_FDCANSEL */
  /* Get the I2S1 clock source -----------------------------------------------*/
  PeriphClkInit->I2s1ClockSelection    = __HAL_RCC_GET_I2S1_SOURCE();
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <HAL_RCCEx_GetPeriphCLKConfig+0x10c>)
 8001efe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f00:	23c0      	movs	r3, #192	; 0xc0
 8001f02:	021b      	lsls	r3, r3, #8
 8001f04:	401a      	ands	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	615a      	str	r2, [r3, #20]
#if defined(RCC_CCIPR2_I2S2SEL)
  /* Get the I2S2 clock source -----------------------------------------------*/
  PeriphClkInit->I2s2ClockSelection    = __HAL_RCC_GET_I2S2_SOURCE();
#endif /* RCC_CCIPR2_I2S2SEL */
}
 8001f0a:	46c0      	nop			; (mov r8, r8)
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	b002      	add	sp, #8
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	46c0      	nop			; (mov r8, r8)
 8001f14:	00024821 	.word	0x00024821
 8001f18:	40021000 	.word	0x40021000

08001f1c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001f1c:	b5b0      	push	{r4, r5, r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001f24:	230f      	movs	r3, #15
 8001f26:	18fb      	adds	r3, r7, r3
 8001f28:	2201      	movs	r2, #1
 8001f2a:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d100      	bne.n	8001f34 <HAL_RTC_Init+0x18>
 8001f32:	e080      	b.n	8002036 <HAL_RTC_Init+0x11a>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2229      	movs	r2, #41	; 0x29
 8001f38:	5c9b      	ldrb	r3, [r3, r2]
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d10b      	bne.n	8001f58 <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2228      	movs	r2, #40	; 0x28
 8001f44:	2100      	movs	r1, #0
 8001f46:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2288      	movs	r2, #136	; 0x88
 8001f4c:	0212      	lsls	r2, r2, #8
 8001f4e:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	0018      	movs	r0, r3
 8001f54:	f7fe fbbc 	bl	80006d0 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2229      	movs	r2, #41	; 0x29
 8001f5c:	2102      	movs	r1, #2
 8001f5e:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	22ca      	movs	r2, #202	; 0xca
 8001f66:	625a      	str	r2, [r3, #36]	; 0x24
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2253      	movs	r2, #83	; 0x53
 8001f6e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8001f70:	250f      	movs	r5, #15
 8001f72:	197c      	adds	r4, r7, r5
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	0018      	movs	r0, r3
 8001f78:	f000 fbef 	bl	800275a <RTC_EnterInitMode>
 8001f7c:	0003      	movs	r3, r0
 8001f7e:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 8001f80:	0028      	movs	r0, r5
 8001f82:	183b      	adds	r3, r7, r0
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d148      	bne.n	800201c <HAL_RTC_Init+0x100>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	699a      	ldr	r2, [r3, #24]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	492b      	ldr	r1, [pc, #172]	; (8002044 <HAL_RTC_Init+0x128>)
 8001f96:	400a      	ands	r2, r1
 8001f98:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6999      	ldr	r1, [r3, #24]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6912      	ldr	r2, [r2, #16]
 8001fc0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	6919      	ldr	r1, [r3, #16]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	041a      	lsls	r2, r3, #16
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8001fd6:	0005      	movs	r5, r0
 8001fd8:	183c      	adds	r4, r7, r0
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	0018      	movs	r0, r3
 8001fde:	f000 fbff 	bl	80027e0 <RTC_ExitInitMode>
 8001fe2:	0003      	movs	r3, r0
 8001fe4:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 8001fe6:	197b      	adds	r3, r7, r5
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d116      	bne.n	800201c <HAL_RTC_Init+0x100>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	699a      	ldr	r2, [r3, #24]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	00d2      	lsls	r2, r2, #3
 8001ffa:	08d2      	lsrs	r2, r2, #3
 8001ffc:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6999      	ldr	r1, [r3, #24]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	431a      	orrs	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	431a      	orrs	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	430a      	orrs	r2, r1
 800201a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	22ff      	movs	r2, #255	; 0xff
 8002022:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8002024:	230f      	movs	r3, #15
 8002026:	18fb      	adds	r3, r7, r3
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d103      	bne.n	8002036 <HAL_RTC_Init+0x11a>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2229      	movs	r2, #41	; 0x29
 8002032:	2101      	movs	r1, #1
 8002034:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8002036:	230f      	movs	r3, #15
 8002038:	18fb      	adds	r3, r7, r3
 800203a:	781b      	ldrb	r3, [r3, #0]
}
 800203c:	0018      	movs	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	b004      	add	sp, #16
 8002042:	bdb0      	pop	{r4, r5, r7, pc}
 8002044:	fb8fffbf 	.word	0xfb8fffbf

08002048 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002048:	b5b0      	push	{r4, r5, r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2228      	movs	r2, #40	; 0x28
 8002058:	5c9b      	ldrb	r3, [r3, r2]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d101      	bne.n	8002062 <HAL_RTC_SetTime+0x1a>
 800205e:	2302      	movs	r3, #2
 8002060:	e092      	b.n	8002188 <HAL_RTC_SetTime+0x140>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2228      	movs	r2, #40	; 0x28
 8002066:	2101      	movs	r1, #1
 8002068:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2229      	movs	r2, #41	; 0x29
 800206e:	2102      	movs	r1, #2
 8002070:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	22ca      	movs	r2, #202	; 0xca
 8002078:	625a      	str	r2, [r3, #36]	; 0x24
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2253      	movs	r2, #83	; 0x53
 8002080:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002082:	2513      	movs	r5, #19
 8002084:	197c      	adds	r4, r7, r5
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	0018      	movs	r0, r3
 800208a:	f000 fb66 	bl	800275a <RTC_EnterInitMode>
 800208e:	0003      	movs	r3, r0
 8002090:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8002092:	197b      	adds	r3, r7, r5
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d162      	bne.n	8002160 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d125      	bne.n	80020ec <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	2240      	movs	r2, #64	; 0x40
 80020a8:	4013      	ands	r3, r2
 80020aa:	d102      	bne.n	80020b2 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	2200      	movs	r2, #0
 80020b0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	0018      	movs	r0, r3
 80020b8:	f000 fbd6 	bl	8002868 <RTC_ByteToBcd2>
 80020bc:	0003      	movs	r3, r0
 80020be:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	785b      	ldrb	r3, [r3, #1]
 80020c4:	0018      	movs	r0, r3
 80020c6:	f000 fbcf 	bl	8002868 <RTC_ByteToBcd2>
 80020ca:	0003      	movs	r3, r0
 80020cc:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80020ce:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	789b      	ldrb	r3, [r3, #2]
 80020d4:	0018      	movs	r0, r3
 80020d6:	f000 fbc7 	bl	8002868 <RTC_ByteToBcd2>
 80020da:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80020dc:	0022      	movs	r2, r4
 80020de:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	78db      	ldrb	r3, [r3, #3]
 80020e4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80020e6:	4313      	orrs	r3, r2
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	e017      	b.n	800211c <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	2240      	movs	r2, #64	; 0x40
 80020f4:	4013      	ands	r3, r2
 80020f6:	d102      	bne.n	80020fe <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2200      	movs	r2, #0
 80020fc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	785b      	ldrb	r3, [r3, #1]
 8002108:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800210a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800210c:	68ba      	ldr	r2, [r7, #8]
 800210e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002110:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	78db      	ldrb	r3, [r3, #3]
 8002116:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002118:	4313      	orrs	r3, r2
 800211a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	491b      	ldr	r1, [pc, #108]	; (8002190 <HAL_RTC_SetTime+0x148>)
 8002124:	400a      	ands	r2, r1
 8002126:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	699a      	ldr	r2, [r3, #24]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4918      	ldr	r1, [pc, #96]	; (8002194 <HAL_RTC_SetTime+0x14c>)
 8002134:	400a      	ands	r2, r1
 8002136:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6999      	ldr	r1, [r3, #24]
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	68da      	ldr	r2, [r3, #12]
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	431a      	orrs	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002150:	2313      	movs	r3, #19
 8002152:	18fc      	adds	r4, r7, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	0018      	movs	r0, r3
 8002158:	f000 fb42 	bl	80027e0 <RTC_ExitInitMode>
 800215c:	0003      	movs	r3, r0
 800215e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	22ff      	movs	r2, #255	; 0xff
 8002166:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8002168:	2313      	movs	r3, #19
 800216a:	18fb      	adds	r3, r7, r3
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d103      	bne.n	800217a <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2229      	movs	r2, #41	; 0x29
 8002176:	2101      	movs	r1, #1
 8002178:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2228      	movs	r2, #40	; 0x28
 800217e:	2100      	movs	r1, #0
 8002180:	5499      	strb	r1, [r3, r2]

  return status;
 8002182:	2313      	movs	r3, #19
 8002184:	18fb      	adds	r3, r7, r3
 8002186:	781b      	ldrb	r3, [r3, #0]
}
 8002188:	0018      	movs	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	b006      	add	sp, #24
 800218e:	bdb0      	pop	{r4, r5, r7, pc}
 8002190:	007f7f7f 	.word	0x007f7f7f
 8002194:	fffbffff 	.word	0xfffbffff

08002198 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	045b      	lsls	r3, r3, #17
 80021b6:	0c5a      	lsrs	r2, r3, #17
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a22      	ldr	r2, [pc, #136]	; (800224c <HAL_RTC_GetTime+0xb4>)
 80021c4:	4013      	ands	r3, r2
 80021c6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	0c1b      	lsrs	r3, r3, #16
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	223f      	movs	r2, #63	; 0x3f
 80021d0:	4013      	ands	r3, r2
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	0a1b      	lsrs	r3, r3, #8
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	227f      	movs	r2, #127	; 0x7f
 80021e0:	4013      	ands	r3, r2
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	227f      	movs	r2, #127	; 0x7f
 80021ee:	4013      	ands	r3, r2
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	0d9b      	lsrs	r3, r3, #22
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2201      	movs	r2, #1
 80021fe:	4013      	ands	r3, r2
 8002200:	b2da      	uxtb	r2, r3
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d11a      	bne.n	8002242 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	0018      	movs	r0, r3
 8002212:	f000 fb51 	bl	80028b8 <RTC_Bcd2ToByte>
 8002216:	0003      	movs	r3, r0
 8002218:	001a      	movs	r2, r3
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	785b      	ldrb	r3, [r3, #1]
 8002222:	0018      	movs	r0, r3
 8002224:	f000 fb48 	bl	80028b8 <RTC_Bcd2ToByte>
 8002228:	0003      	movs	r3, r0
 800222a:	001a      	movs	r2, r3
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	789b      	ldrb	r3, [r3, #2]
 8002234:	0018      	movs	r0, r3
 8002236:	f000 fb3f 	bl	80028b8 <RTC_Bcd2ToByte>
 800223a:	0003      	movs	r3, r0
 800223c:	001a      	movs	r2, r3
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	0018      	movs	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	b006      	add	sp, #24
 800224a:	bd80      	pop	{r7, pc}
 800224c:	007f7f7f 	.word	0x007f7f7f

08002250 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002250:	b5b0      	push	{r4, r5, r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2228      	movs	r2, #40	; 0x28
 8002260:	5c9b      	ldrb	r3, [r3, r2]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d101      	bne.n	800226a <HAL_RTC_SetDate+0x1a>
 8002266:	2302      	movs	r3, #2
 8002268:	e07e      	b.n	8002368 <HAL_RTC_SetDate+0x118>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2228      	movs	r2, #40	; 0x28
 800226e:	2101      	movs	r1, #1
 8002270:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2229      	movs	r2, #41	; 0x29
 8002276:	2102      	movs	r1, #2
 8002278:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10e      	bne.n	800229e <HAL_RTC_SetDate+0x4e>
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	785b      	ldrb	r3, [r3, #1]
 8002284:	001a      	movs	r2, r3
 8002286:	2310      	movs	r3, #16
 8002288:	4013      	ands	r3, r2
 800228a:	d008      	beq.n	800229e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	785b      	ldrb	r3, [r3, #1]
 8002290:	2210      	movs	r2, #16
 8002292:	4393      	bics	r3, r2
 8002294:	b2db      	uxtb	r3, r3
 8002296:	330a      	adds	r3, #10
 8002298:	b2da      	uxtb	r2, r3
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d11c      	bne.n	80022de <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	78db      	ldrb	r3, [r3, #3]
 80022a8:	0018      	movs	r0, r3
 80022aa:	f000 fadd 	bl	8002868 <RTC_ByteToBcd2>
 80022ae:	0003      	movs	r3, r0
 80022b0:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	785b      	ldrb	r3, [r3, #1]
 80022b6:	0018      	movs	r0, r3
 80022b8:	f000 fad6 	bl	8002868 <RTC_ByteToBcd2>
 80022bc:	0003      	movs	r3, r0
 80022be:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80022c0:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	789b      	ldrb	r3, [r3, #2]
 80022c6:	0018      	movs	r0, r3
 80022c8:	f000 face 	bl	8002868 <RTC_ByteToBcd2>
 80022cc:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80022ce:	0022      	movs	r2, r4
 80022d0:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80022d8:	4313      	orrs	r3, r2
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	e00e      	b.n	80022fc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	78db      	ldrb	r3, [r3, #3]
 80022e2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	785b      	ldrb	r3, [r3, #1]
 80022e8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80022ea:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 80022ec:	68ba      	ldr	r2, [r7, #8]
 80022ee:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80022f0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80022f8:	4313      	orrs	r3, r2
 80022fa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	22ca      	movs	r2, #202	; 0xca
 8002302:	625a      	str	r2, [r3, #36]	; 0x24
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2253      	movs	r2, #83	; 0x53
 800230a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800230c:	2513      	movs	r5, #19
 800230e:	197c      	adds	r4, r7, r5
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	0018      	movs	r0, r3
 8002314:	f000 fa21 	bl	800275a <RTC_EnterInitMode>
 8002318:	0003      	movs	r3, r0
 800231a:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800231c:	0028      	movs	r0, r5
 800231e:	183b      	adds	r3, r7, r0
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10c      	bne.n	8002340 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	4910      	ldr	r1, [pc, #64]	; (8002370 <HAL_RTC_SetDate+0x120>)
 800232e:	400a      	ands	r2, r1
 8002330:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002332:	183c      	adds	r4, r7, r0
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	0018      	movs	r0, r3
 8002338:	f000 fa52 	bl	80027e0 <RTC_ExitInitMode>
 800233c:	0003      	movs	r3, r0
 800233e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	22ff      	movs	r2, #255	; 0xff
 8002346:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002348:	2313      	movs	r3, #19
 800234a:	18fb      	adds	r3, r7, r3
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d103      	bne.n	800235a <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2229      	movs	r2, #41	; 0x29
 8002356:	2101      	movs	r1, #1
 8002358:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2228      	movs	r2, #40	; 0x28
 800235e:	2100      	movs	r1, #0
 8002360:	5499      	strb	r1, [r3, r2]

  return status;
 8002362:	2313      	movs	r3, #19
 8002364:	18fb      	adds	r3, r7, r3
 8002366:	781b      	ldrb	r3, [r3, #0]
}
 8002368:	0018      	movs	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	b006      	add	sp, #24
 800236e:	bdb0      	pop	{r4, r5, r7, pc}
 8002370:	00ffff3f 	.word	0x00ffff3f

08002374 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	4a21      	ldr	r2, [pc, #132]	; (800240c <HAL_RTC_GetDate+0x98>)
 8002388:	4013      	ands	r3, r2
 800238a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	0c1b      	lsrs	r3, r3, #16
 8002390:	b2da      	uxtb	r2, r3
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	0a1b      	lsrs	r3, r3, #8
 800239a:	b2db      	uxtb	r3, r3
 800239c:	221f      	movs	r2, #31
 800239e:	4013      	ands	r3, r2
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	223f      	movs	r2, #63	; 0x3f
 80023ac:	4013      	ands	r3, r2
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	0b5b      	lsrs	r3, r3, #13
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2207      	movs	r2, #7
 80023bc:	4013      	ands	r3, r2
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d11a      	bne.n	8002400 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	78db      	ldrb	r3, [r3, #3]
 80023ce:	0018      	movs	r0, r3
 80023d0:	f000 fa72 	bl	80028b8 <RTC_Bcd2ToByte>
 80023d4:	0003      	movs	r3, r0
 80023d6:	001a      	movs	r2, r3
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	785b      	ldrb	r3, [r3, #1]
 80023e0:	0018      	movs	r0, r3
 80023e2:	f000 fa69 	bl	80028b8 <RTC_Bcd2ToByte>
 80023e6:	0003      	movs	r3, r0
 80023e8:	001a      	movs	r2, r3
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	789b      	ldrb	r3, [r3, #2]
 80023f2:	0018      	movs	r0, r3
 80023f4:	f000 fa60 	bl	80028b8 <RTC_Bcd2ToByte>
 80023f8:	0003      	movs	r3, r0
 80023fa:	001a      	movs	r2, r3
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	0018      	movs	r0, r3
 8002404:	46bd      	mov	sp, r7
 8002406:	b006      	add	sp, #24
 8002408:	bd80      	pop	{r7, pc}
 800240a:	46c0      	nop			; (mov r8, r8)
 800240c:	00ffff3f 	.word	0x00ffff3f

08002410 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002410:	b590      	push	{r4, r7, lr}
 8002412:	b089      	sub	sp, #36	; 0x24
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2228      	movs	r2, #40	; 0x28
 8002420:	5c9b      	ldrb	r3, [r3, r2]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d101      	bne.n	800242a <HAL_RTC_SetAlarm_IT+0x1a>
 8002426:	2302      	movs	r3, #2
 8002428:	e127      	b.n	800267a <HAL_RTC_SetAlarm_IT+0x26a>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2228      	movs	r2, #40	; 0x28
 800242e:	2101      	movs	r1, #1
 8002430:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2229      	movs	r2, #41	; 0x29
 8002436:	2102      	movs	r1, #2
 8002438:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d136      	bne.n	80024ae <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	2240      	movs	r2, #64	; 0x40
 8002448:	4013      	ands	r3, r2
 800244a:	d102      	bne.n	8002452 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2200      	movs	r2, #0
 8002450:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	0018      	movs	r0, r3
 8002458:	f000 fa06 	bl	8002868 <RTC_ByteToBcd2>
 800245c:	0003      	movs	r3, r0
 800245e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	785b      	ldrb	r3, [r3, #1]
 8002464:	0018      	movs	r0, r3
 8002466:	f000 f9ff 	bl	8002868 <RTC_ByteToBcd2>
 800246a:	0003      	movs	r3, r0
 800246c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800246e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	789b      	ldrb	r3, [r3, #2]
 8002474:	0018      	movs	r0, r3
 8002476:	f000 f9f7 	bl	8002868 <RTC_ByteToBcd2>
 800247a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800247c:	0022      	movs	r2, r4
 800247e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	78db      	ldrb	r3, [r3, #3]
 8002484:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002486:	431a      	orrs	r2, r3
 8002488:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	2220      	movs	r2, #32
 800248e:	5c9b      	ldrb	r3, [r3, r2]
 8002490:	0018      	movs	r0, r3
 8002492:	f000 f9e9 	bl	8002868 <RTC_ByteToBcd2>
 8002496:	0003      	movs	r3, r0
 8002498:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800249a:	0022      	movs	r2, r4
 800249c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80024a2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80024a8:	4313      	orrs	r3, r2
 80024aa:	61fb      	str	r3, [r7, #28]
 80024ac:	e022      	b.n	80024f4 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	2240      	movs	r2, #64	; 0x40
 80024b6:	4013      	ands	r3, r2
 80024b8:	d102      	bne.n	80024c0 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	2200      	movs	r2, #0
 80024be:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	785b      	ldrb	r3, [r3, #1]
 80024ca:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80024cc:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80024d2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	78db      	ldrb	r3, [r3, #3]
 80024d8:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80024da:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2120      	movs	r1, #32
 80024e0:	5c5b      	ldrb	r3, [r3, r1]
 80024e2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80024e4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80024ea:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80024f0:	4313      	orrs	r3, r2
 80024f2:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	22ca      	movs	r2, #202	; 0xca
 8002506:	625a      	str	r2, [r3, #36]	; 0x24
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2253      	movs	r2, #83	; 0x53
 800250e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002514:	2380      	movs	r3, #128	; 0x80
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	429a      	cmp	r2, r3
 800251a:	d14c      	bne.n	80025b6 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	699a      	ldr	r2, [r3, #24]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4957      	ldr	r1, [pc, #348]	; (8002684 <HAL_RTC_SetAlarm_IT+0x274>)
 8002528:	400a      	ands	r2, r1
 800252a:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2101      	movs	r1, #1
 8002538:	430a      	orrs	r2, r1
 800253a:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 800253c:	f7fe fb20 	bl	8000b80 <HAL_GetTick>
 8002540:	0003      	movs	r3, r0
 8002542:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002544:	e016      	b.n	8002574 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002546:	f7fe fb1b 	bl	8000b80 <HAL_GetTick>
 800254a:	0002      	movs	r2, r0
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	1ad2      	subs	r2, r2, r3
 8002550:	23fa      	movs	r3, #250	; 0xfa
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	429a      	cmp	r2, r3
 8002556:	d90d      	bls.n	8002574 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	22ff      	movs	r2, #255	; 0xff
 800255e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2229      	movs	r2, #41	; 0x29
 8002564:	2103      	movs	r1, #3
 8002566:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2228      	movs	r2, #40	; 0x28
 800256c:	2100      	movs	r1, #0
 800256e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e082      	b.n	800267a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	2201      	movs	r2, #1
 800257c:	4013      	ands	r3, r2
 800257e:	d0e2      	beq.n	8002546 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	69fa      	ldr	r2, [r7, #28]
 8002586:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	699a      	ldr	r2, [r3, #24]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2180      	movs	r1, #128	; 0x80
 800259c:	0049      	lsls	r1, r1, #1
 800259e:	430a      	orrs	r2, r1
 80025a0:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	699a      	ldr	r2, [r3, #24]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2180      	movs	r1, #128	; 0x80
 80025ae:	0149      	lsls	r1, r1, #5
 80025b0:	430a      	orrs	r2, r1
 80025b2:	619a      	str	r2, [r3, #24]
 80025b4:	e04b      	b.n	800264e <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	699a      	ldr	r2, [r3, #24]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4931      	ldr	r1, [pc, #196]	; (8002688 <HAL_RTC_SetAlarm_IT+0x278>)
 80025c2:	400a      	ands	r2, r1
 80025c4:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2102      	movs	r1, #2
 80025d2:	430a      	orrs	r2, r1
 80025d4:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 80025d6:	f7fe fad3 	bl	8000b80 <HAL_GetTick>
 80025da:	0003      	movs	r3, r0
 80025dc:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80025de:	e016      	b.n	800260e <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80025e0:	f7fe face 	bl	8000b80 <HAL_GetTick>
 80025e4:	0002      	movs	r2, r0
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	1ad2      	subs	r2, r2, r3
 80025ea:	23fa      	movs	r3, #250	; 0xfa
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d90d      	bls.n	800260e <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	22ff      	movs	r2, #255	; 0xff
 80025f8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2229      	movs	r2, #41	; 0x29
 80025fe:	2103      	movs	r1, #3
 8002600:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2228      	movs	r2, #40	; 0x28
 8002606:	2100      	movs	r1, #0
 8002608:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e035      	b.n	800267a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	2202      	movs	r2, #2
 8002616:	4013      	ands	r3, r2
 8002618:	d0e2      	beq.n	80025e0 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	69fa      	ldr	r2, [r7, #28]
 8002620:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	699a      	ldr	r2, [r3, #24]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2180      	movs	r1, #128	; 0x80
 8002636:	0089      	lsls	r1, r1, #2
 8002638:	430a      	orrs	r2, r1
 800263a:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	699a      	ldr	r2, [r3, #24]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2180      	movs	r1, #128	; 0x80
 8002648:	0189      	lsls	r1, r1, #6
 800264a:	430a      	orrs	r2, r1
 800264c:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800264e:	4a0f      	ldr	r2, [pc, #60]	; (800268c <HAL_RTC_SetAlarm_IT+0x27c>)
 8002650:	2380      	movs	r3, #128	; 0x80
 8002652:	58d3      	ldr	r3, [r2, r3]
 8002654:	490d      	ldr	r1, [pc, #52]	; (800268c <HAL_RTC_SetAlarm_IT+0x27c>)
 8002656:	2280      	movs	r2, #128	; 0x80
 8002658:	0312      	lsls	r2, r2, #12
 800265a:	4313      	orrs	r3, r2
 800265c:	2280      	movs	r2, #128	; 0x80
 800265e:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	22ff      	movs	r2, #255	; 0xff
 8002666:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2229      	movs	r2, #41	; 0x29
 800266c:	2101      	movs	r1, #1
 800266e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2228      	movs	r2, #40	; 0x28
 8002674:	2100      	movs	r1, #0
 8002676:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	0018      	movs	r0, r3
 800267c:	46bd      	mov	sp, r7
 800267e:	b009      	add	sp, #36	; 0x24
 8002680:	bd90      	pop	{r4, r7, pc}
 8002682:	46c0      	nop			; (mov r8, r8)
 8002684:	fffffeff 	.word	0xfffffeff
 8002688:	fffffdff 	.word	0xfffffdff
 800268c:	40021800 	.word	0x40021800

08002690 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	699a      	ldr	r2, [r3, #24]
 800269e:	2380      	movs	r3, #128	; 0x80
 80026a0:	015b      	lsls	r3, r3, #5
 80026a2:	4013      	ands	r3, r2
 80026a4:	d011      	beq.n	80026ca <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ac:	2201      	movs	r2, #1
 80026ae:	4013      	ands	r3, r2
 80026b0:	d00b      	beq.n	80026ca <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2101      	movs	r1, #1
 80026be:	430a      	orrs	r2, r1
 80026c0:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	0018      	movs	r0, r3
 80026c6:	f7fd ff93 	bl	80005f0 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	699a      	ldr	r2, [r3, #24]
 80026d0:	2380      	movs	r3, #128	; 0x80
 80026d2:	019b      	lsls	r3, r3, #6
 80026d4:	4013      	ands	r3, r2
 80026d6:	d011      	beq.n	80026fc <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026de:	2202      	movs	r2, #2
 80026e0:	4013      	ands	r3, r2
 80026e2:	d00b      	beq.n	80026fc <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2102      	movs	r1, #2
 80026f0:	430a      	orrs	r2, r1
 80026f2:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	0018      	movs	r0, r3
 80026f8:	f000 f8fb 	bl	80028f2 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2229      	movs	r2, #41	; 0x29
 8002700:	2101      	movs	r1, #1
 8002702:	5499      	strb	r1, [r3, r2]
}
 8002704:	46c0      	nop			; (mov r8, r8)
 8002706:	46bd      	mov	sp, r7
 8002708:	b002      	add	sp, #8
 800270a:	bd80      	pop	{r7, pc}

0800270c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68da      	ldr	r2, [r3, #12]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	21a0      	movs	r1, #160	; 0xa0
 8002720:	438a      	bics	r2, r1
 8002722:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002724:	f7fe fa2c 	bl	8000b80 <HAL_GetTick>
 8002728:	0003      	movs	r3, r0
 800272a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800272c:	e00a      	b.n	8002744 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800272e:	f7fe fa27 	bl	8000b80 <HAL_GetTick>
 8002732:	0002      	movs	r2, r0
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	1ad2      	subs	r2, r2, r3
 8002738:	23fa      	movs	r3, #250	; 0xfa
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	429a      	cmp	r2, r3
 800273e:	d901      	bls.n	8002744 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e006      	b.n	8002752 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	2220      	movs	r2, #32
 800274c:	4013      	ands	r3, r2
 800274e:	d0ee      	beq.n	800272e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	0018      	movs	r0, r3
 8002754:	46bd      	mov	sp, r7
 8002756:	b004      	add	sp, #16
 8002758:	bd80      	pop	{r7, pc}

0800275a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b084      	sub	sp, #16
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8002762:	230f      	movs	r3, #15
 8002764:	18fb      	adds	r3, r7, r3
 8002766:	2200      	movs	r2, #0
 8002768:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	2240      	movs	r2, #64	; 0x40
 8002772:	4013      	ands	r3, r2
 8002774:	d12c      	bne.n	80027d0 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68da      	ldr	r2, [r3, #12]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2180      	movs	r1, #128	; 0x80
 8002782:	430a      	orrs	r2, r1
 8002784:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002786:	f7fe f9fb 	bl	8000b80 <HAL_GetTick>
 800278a:	0003      	movs	r3, r0
 800278c:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800278e:	e014      	b.n	80027ba <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002790:	f7fe f9f6 	bl	8000b80 <HAL_GetTick>
 8002794:	0002      	movs	r2, r0
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	1ad2      	subs	r2, r2, r3
 800279a:	200f      	movs	r0, #15
 800279c:	183b      	adds	r3, r7, r0
 800279e:	1839      	adds	r1, r7, r0
 80027a0:	7809      	ldrb	r1, [r1, #0]
 80027a2:	7019      	strb	r1, [r3, #0]
 80027a4:	23fa      	movs	r3, #250	; 0xfa
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d906      	bls.n	80027ba <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 80027ac:	183b      	adds	r3, r7, r0
 80027ae:	2203      	movs	r2, #3
 80027b0:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2229      	movs	r2, #41	; 0x29
 80027b6:	2103      	movs	r1, #3
 80027b8:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	2240      	movs	r2, #64	; 0x40
 80027c2:	4013      	ands	r3, r2
 80027c4:	d104      	bne.n	80027d0 <RTC_EnterInitMode+0x76>
 80027c6:	230f      	movs	r3, #15
 80027c8:	18fb      	adds	r3, r7, r3
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2b03      	cmp	r3, #3
 80027ce:	d1df      	bne.n	8002790 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80027d0:	230f      	movs	r3, #15
 80027d2:	18fb      	adds	r3, r7, r3
 80027d4:	781b      	ldrb	r3, [r3, #0]
}
 80027d6:	0018      	movs	r0, r3
 80027d8:	46bd      	mov	sp, r7
 80027da:	b004      	add	sp, #16
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80027e0:	b590      	push	{r4, r7, lr}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027e8:	240f      	movs	r4, #15
 80027ea:	193b      	adds	r3, r7, r4
 80027ec:	2200      	movs	r2, #0
 80027ee:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80027f0:	4b1c      	ldr	r3, [pc, #112]	; (8002864 <RTC_ExitInitMode+0x84>)
 80027f2:	68da      	ldr	r2, [r3, #12]
 80027f4:	4b1b      	ldr	r3, [pc, #108]	; (8002864 <RTC_ExitInitMode+0x84>)
 80027f6:	2180      	movs	r1, #128	; 0x80
 80027f8:	438a      	bics	r2, r1
 80027fa:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80027fc:	4b19      	ldr	r3, [pc, #100]	; (8002864 <RTC_ExitInitMode+0x84>)
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	2220      	movs	r2, #32
 8002802:	4013      	ands	r3, r2
 8002804:	d10d      	bne.n	8002822 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	0018      	movs	r0, r3
 800280a:	f7ff ff7f 	bl	800270c <HAL_RTC_WaitForSynchro>
 800280e:	1e03      	subs	r3, r0, #0
 8002810:	d021      	beq.n	8002856 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2229      	movs	r2, #41	; 0x29
 8002816:	2103      	movs	r1, #3
 8002818:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800281a:	193b      	adds	r3, r7, r4
 800281c:	2203      	movs	r2, #3
 800281e:	701a      	strb	r2, [r3, #0]
 8002820:	e019      	b.n	8002856 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002822:	4b10      	ldr	r3, [pc, #64]	; (8002864 <RTC_ExitInitMode+0x84>)
 8002824:	699a      	ldr	r2, [r3, #24]
 8002826:	4b0f      	ldr	r3, [pc, #60]	; (8002864 <RTC_ExitInitMode+0x84>)
 8002828:	2120      	movs	r1, #32
 800282a:	438a      	bics	r2, r1
 800282c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	0018      	movs	r0, r3
 8002832:	f7ff ff6b 	bl	800270c <HAL_RTC_WaitForSynchro>
 8002836:	1e03      	subs	r3, r0, #0
 8002838:	d007      	beq.n	800284a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2229      	movs	r2, #41	; 0x29
 800283e:	2103      	movs	r1, #3
 8002840:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002842:	230f      	movs	r3, #15
 8002844:	18fb      	adds	r3, r7, r3
 8002846:	2203      	movs	r2, #3
 8002848:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800284a:	4b06      	ldr	r3, [pc, #24]	; (8002864 <RTC_ExitInitMode+0x84>)
 800284c:	699a      	ldr	r2, [r3, #24]
 800284e:	4b05      	ldr	r3, [pc, #20]	; (8002864 <RTC_ExitInitMode+0x84>)
 8002850:	2120      	movs	r1, #32
 8002852:	430a      	orrs	r2, r1
 8002854:	619a      	str	r2, [r3, #24]
  }

  return status;
 8002856:	230f      	movs	r3, #15
 8002858:	18fb      	adds	r3, r7, r3
 800285a:	781b      	ldrb	r3, [r3, #0]
}
 800285c:	0018      	movs	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	b005      	add	sp, #20
 8002862:	bd90      	pop	{r4, r7, pc}
 8002864:	40002800 	.word	0x40002800

08002868 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	0002      	movs	r2, r0
 8002870:	1dfb      	adds	r3, r7, #7
 8002872:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002874:	2300      	movs	r3, #0
 8002876:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8002878:	230b      	movs	r3, #11
 800287a:	18fb      	adds	r3, r7, r3
 800287c:	1dfa      	adds	r2, r7, #7
 800287e:	7812      	ldrb	r2, [r2, #0]
 8002880:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8002882:	e008      	b.n	8002896 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	3301      	adds	r3, #1
 8002888:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800288a:	220b      	movs	r2, #11
 800288c:	18bb      	adds	r3, r7, r2
 800288e:	18ba      	adds	r2, r7, r2
 8002890:	7812      	ldrb	r2, [r2, #0]
 8002892:	3a0a      	subs	r2, #10
 8002894:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8002896:	210b      	movs	r1, #11
 8002898:	187b      	adds	r3, r7, r1
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b09      	cmp	r3, #9
 800289e:	d8f1      	bhi.n	8002884 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	011b      	lsls	r3, r3, #4
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	187b      	adds	r3, r7, r1
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	b2db      	uxtb	r3, r3
}
 80028b0:	0018      	movs	r0, r3
 80028b2:	46bd      	mov	sp, r7
 80028b4:	b004      	add	sp, #16
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	0002      	movs	r2, r0
 80028c0:	1dfb      	adds	r3, r7, #7
 80028c2:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80028c4:	1dfb      	adds	r3, r7, #7
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	091b      	lsrs	r3, r3, #4
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	001a      	movs	r2, r3
 80028ce:	0013      	movs	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	189b      	adds	r3, r3, r2
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	1dfb      	adds	r3, r7, #7
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	210f      	movs	r1, #15
 80028e2:	400b      	ands	r3, r1
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	18d3      	adds	r3, r2, r3
 80028e8:	b2db      	uxtb	r3, r3
}
 80028ea:	0018      	movs	r0, r3
 80028ec:	46bd      	mov	sp, r7
 80028ee:	b004      	add	sp, #16
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	46bd      	mov	sp, r7
 80028fe:	b002      	add	sp, #8
 8002900:	bd80      	pop	{r7, pc}
	...

08002904 <__errno>:
 8002904:	4b01      	ldr	r3, [pc, #4]	; (800290c <__errno+0x8>)
 8002906:	6818      	ldr	r0, [r3, #0]
 8002908:	4770      	bx	lr
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	2000002c 	.word	0x2000002c

08002910 <__libc_init_array>:
 8002910:	b570      	push	{r4, r5, r6, lr}
 8002912:	2600      	movs	r6, #0
 8002914:	4d0c      	ldr	r5, [pc, #48]	; (8002948 <__libc_init_array+0x38>)
 8002916:	4c0d      	ldr	r4, [pc, #52]	; (800294c <__libc_init_array+0x3c>)
 8002918:	1b64      	subs	r4, r4, r5
 800291a:	10a4      	asrs	r4, r4, #2
 800291c:	42a6      	cmp	r6, r4
 800291e:	d109      	bne.n	8002934 <__libc_init_array+0x24>
 8002920:	2600      	movs	r6, #0
 8002922:	f000 fc8b 	bl	800323c <_init>
 8002926:	4d0a      	ldr	r5, [pc, #40]	; (8002950 <__libc_init_array+0x40>)
 8002928:	4c0a      	ldr	r4, [pc, #40]	; (8002954 <__libc_init_array+0x44>)
 800292a:	1b64      	subs	r4, r4, r5
 800292c:	10a4      	asrs	r4, r4, #2
 800292e:	42a6      	cmp	r6, r4
 8002930:	d105      	bne.n	800293e <__libc_init_array+0x2e>
 8002932:	bd70      	pop	{r4, r5, r6, pc}
 8002934:	00b3      	lsls	r3, r6, #2
 8002936:	58eb      	ldr	r3, [r5, r3]
 8002938:	4798      	blx	r3
 800293a:	3601      	adds	r6, #1
 800293c:	e7ee      	b.n	800291c <__libc_init_array+0xc>
 800293e:	00b3      	lsls	r3, r6, #2
 8002940:	58eb      	ldr	r3, [r5, r3]
 8002942:	4798      	blx	r3
 8002944:	3601      	adds	r6, #1
 8002946:	e7f2      	b.n	800292e <__libc_init_array+0x1e>
 8002948:	080032d8 	.word	0x080032d8
 800294c:	080032d8 	.word	0x080032d8
 8002950:	080032d8 	.word	0x080032d8
 8002954:	080032dc 	.word	0x080032dc

08002958 <memset>:
 8002958:	0003      	movs	r3, r0
 800295a:	1882      	adds	r2, r0, r2
 800295c:	4293      	cmp	r3, r2
 800295e:	d100      	bne.n	8002962 <memset+0xa>
 8002960:	4770      	bx	lr
 8002962:	7019      	strb	r1, [r3, #0]
 8002964:	3301      	adds	r3, #1
 8002966:	e7f9      	b.n	800295c <memset+0x4>

08002968 <siprintf>:
 8002968:	b40e      	push	{r1, r2, r3}
 800296a:	b500      	push	{lr}
 800296c:	490b      	ldr	r1, [pc, #44]	; (800299c <siprintf+0x34>)
 800296e:	b09c      	sub	sp, #112	; 0x70
 8002970:	ab1d      	add	r3, sp, #116	; 0x74
 8002972:	9002      	str	r0, [sp, #8]
 8002974:	9006      	str	r0, [sp, #24]
 8002976:	9107      	str	r1, [sp, #28]
 8002978:	9104      	str	r1, [sp, #16]
 800297a:	4809      	ldr	r0, [pc, #36]	; (80029a0 <siprintf+0x38>)
 800297c:	4909      	ldr	r1, [pc, #36]	; (80029a4 <siprintf+0x3c>)
 800297e:	cb04      	ldmia	r3!, {r2}
 8002980:	9105      	str	r1, [sp, #20]
 8002982:	6800      	ldr	r0, [r0, #0]
 8002984:	a902      	add	r1, sp, #8
 8002986:	9301      	str	r3, [sp, #4]
 8002988:	f000 f870 	bl	8002a6c <_svfiprintf_r>
 800298c:	2300      	movs	r3, #0
 800298e:	9a02      	ldr	r2, [sp, #8]
 8002990:	7013      	strb	r3, [r2, #0]
 8002992:	b01c      	add	sp, #112	; 0x70
 8002994:	bc08      	pop	{r3}
 8002996:	b003      	add	sp, #12
 8002998:	4718      	bx	r3
 800299a:	46c0      	nop			; (mov r8, r8)
 800299c:	7fffffff 	.word	0x7fffffff
 80029a0:	2000002c 	.word	0x2000002c
 80029a4:	ffff0208 	.word	0xffff0208

080029a8 <__ssputs_r>:
 80029a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029aa:	688e      	ldr	r6, [r1, #8]
 80029ac:	b085      	sub	sp, #20
 80029ae:	0007      	movs	r7, r0
 80029b0:	000c      	movs	r4, r1
 80029b2:	9203      	str	r2, [sp, #12]
 80029b4:	9301      	str	r3, [sp, #4]
 80029b6:	429e      	cmp	r6, r3
 80029b8:	d83c      	bhi.n	8002a34 <__ssputs_r+0x8c>
 80029ba:	2390      	movs	r3, #144	; 0x90
 80029bc:	898a      	ldrh	r2, [r1, #12]
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	421a      	tst	r2, r3
 80029c2:	d034      	beq.n	8002a2e <__ssputs_r+0x86>
 80029c4:	6909      	ldr	r1, [r1, #16]
 80029c6:	6823      	ldr	r3, [r4, #0]
 80029c8:	6960      	ldr	r0, [r4, #20]
 80029ca:	1a5b      	subs	r3, r3, r1
 80029cc:	9302      	str	r3, [sp, #8]
 80029ce:	2303      	movs	r3, #3
 80029d0:	4343      	muls	r3, r0
 80029d2:	0fdd      	lsrs	r5, r3, #31
 80029d4:	18ed      	adds	r5, r5, r3
 80029d6:	9b01      	ldr	r3, [sp, #4]
 80029d8:	9802      	ldr	r0, [sp, #8]
 80029da:	3301      	adds	r3, #1
 80029dc:	181b      	adds	r3, r3, r0
 80029de:	106d      	asrs	r5, r5, #1
 80029e0:	42ab      	cmp	r3, r5
 80029e2:	d900      	bls.n	80029e6 <__ssputs_r+0x3e>
 80029e4:	001d      	movs	r5, r3
 80029e6:	0553      	lsls	r3, r2, #21
 80029e8:	d532      	bpl.n	8002a50 <__ssputs_r+0xa8>
 80029ea:	0029      	movs	r1, r5
 80029ec:	0038      	movs	r0, r7
 80029ee:	f000 fb53 	bl	8003098 <_malloc_r>
 80029f2:	1e06      	subs	r6, r0, #0
 80029f4:	d109      	bne.n	8002a0a <__ssputs_r+0x62>
 80029f6:	230c      	movs	r3, #12
 80029f8:	603b      	str	r3, [r7, #0]
 80029fa:	2340      	movs	r3, #64	; 0x40
 80029fc:	2001      	movs	r0, #1
 80029fe:	89a2      	ldrh	r2, [r4, #12]
 8002a00:	4240      	negs	r0, r0
 8002a02:	4313      	orrs	r3, r2
 8002a04:	81a3      	strh	r3, [r4, #12]
 8002a06:	b005      	add	sp, #20
 8002a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a0a:	9a02      	ldr	r2, [sp, #8]
 8002a0c:	6921      	ldr	r1, [r4, #16]
 8002a0e:	f000 faba 	bl	8002f86 <memcpy>
 8002a12:	89a3      	ldrh	r3, [r4, #12]
 8002a14:	4a14      	ldr	r2, [pc, #80]	; (8002a68 <__ssputs_r+0xc0>)
 8002a16:	401a      	ands	r2, r3
 8002a18:	2380      	movs	r3, #128	; 0x80
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	81a3      	strh	r3, [r4, #12]
 8002a1e:	9b02      	ldr	r3, [sp, #8]
 8002a20:	6126      	str	r6, [r4, #16]
 8002a22:	18f6      	adds	r6, r6, r3
 8002a24:	6026      	str	r6, [r4, #0]
 8002a26:	6165      	str	r5, [r4, #20]
 8002a28:	9e01      	ldr	r6, [sp, #4]
 8002a2a:	1aed      	subs	r5, r5, r3
 8002a2c:	60a5      	str	r5, [r4, #8]
 8002a2e:	9b01      	ldr	r3, [sp, #4]
 8002a30:	429e      	cmp	r6, r3
 8002a32:	d900      	bls.n	8002a36 <__ssputs_r+0x8e>
 8002a34:	9e01      	ldr	r6, [sp, #4]
 8002a36:	0032      	movs	r2, r6
 8002a38:	9903      	ldr	r1, [sp, #12]
 8002a3a:	6820      	ldr	r0, [r4, #0]
 8002a3c:	f000 faac 	bl	8002f98 <memmove>
 8002a40:	68a3      	ldr	r3, [r4, #8]
 8002a42:	2000      	movs	r0, #0
 8002a44:	1b9b      	subs	r3, r3, r6
 8002a46:	60a3      	str	r3, [r4, #8]
 8002a48:	6823      	ldr	r3, [r4, #0]
 8002a4a:	199e      	adds	r6, r3, r6
 8002a4c:	6026      	str	r6, [r4, #0]
 8002a4e:	e7da      	b.n	8002a06 <__ssputs_r+0x5e>
 8002a50:	002a      	movs	r2, r5
 8002a52:	0038      	movs	r0, r7
 8002a54:	f000 fb96 	bl	8003184 <_realloc_r>
 8002a58:	1e06      	subs	r6, r0, #0
 8002a5a:	d1e0      	bne.n	8002a1e <__ssputs_r+0x76>
 8002a5c:	0038      	movs	r0, r7
 8002a5e:	6921      	ldr	r1, [r4, #16]
 8002a60:	f000 faae 	bl	8002fc0 <_free_r>
 8002a64:	e7c7      	b.n	80029f6 <__ssputs_r+0x4e>
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	fffffb7f 	.word	0xfffffb7f

08002a6c <_svfiprintf_r>:
 8002a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a6e:	b0a1      	sub	sp, #132	; 0x84
 8002a70:	9003      	str	r0, [sp, #12]
 8002a72:	001d      	movs	r5, r3
 8002a74:	898b      	ldrh	r3, [r1, #12]
 8002a76:	000f      	movs	r7, r1
 8002a78:	0016      	movs	r6, r2
 8002a7a:	061b      	lsls	r3, r3, #24
 8002a7c:	d511      	bpl.n	8002aa2 <_svfiprintf_r+0x36>
 8002a7e:	690b      	ldr	r3, [r1, #16]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10e      	bne.n	8002aa2 <_svfiprintf_r+0x36>
 8002a84:	2140      	movs	r1, #64	; 0x40
 8002a86:	f000 fb07 	bl	8003098 <_malloc_r>
 8002a8a:	6038      	str	r0, [r7, #0]
 8002a8c:	6138      	str	r0, [r7, #16]
 8002a8e:	2800      	cmp	r0, #0
 8002a90:	d105      	bne.n	8002a9e <_svfiprintf_r+0x32>
 8002a92:	230c      	movs	r3, #12
 8002a94:	9a03      	ldr	r2, [sp, #12]
 8002a96:	3801      	subs	r0, #1
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	b021      	add	sp, #132	; 0x84
 8002a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a9e:	2340      	movs	r3, #64	; 0x40
 8002aa0:	617b      	str	r3, [r7, #20]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	ac08      	add	r4, sp, #32
 8002aa6:	6163      	str	r3, [r4, #20]
 8002aa8:	3320      	adds	r3, #32
 8002aaa:	7663      	strb	r3, [r4, #25]
 8002aac:	3310      	adds	r3, #16
 8002aae:	76a3      	strb	r3, [r4, #26]
 8002ab0:	9507      	str	r5, [sp, #28]
 8002ab2:	0035      	movs	r5, r6
 8002ab4:	782b      	ldrb	r3, [r5, #0]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <_svfiprintf_r+0x52>
 8002aba:	2b25      	cmp	r3, #37	; 0x25
 8002abc:	d147      	bne.n	8002b4e <_svfiprintf_r+0xe2>
 8002abe:	1bab      	subs	r3, r5, r6
 8002ac0:	9305      	str	r3, [sp, #20]
 8002ac2:	42b5      	cmp	r5, r6
 8002ac4:	d00c      	beq.n	8002ae0 <_svfiprintf_r+0x74>
 8002ac6:	0032      	movs	r2, r6
 8002ac8:	0039      	movs	r1, r7
 8002aca:	9803      	ldr	r0, [sp, #12]
 8002acc:	f7ff ff6c 	bl	80029a8 <__ssputs_r>
 8002ad0:	1c43      	adds	r3, r0, #1
 8002ad2:	d100      	bne.n	8002ad6 <_svfiprintf_r+0x6a>
 8002ad4:	e0ae      	b.n	8002c34 <_svfiprintf_r+0x1c8>
 8002ad6:	6962      	ldr	r2, [r4, #20]
 8002ad8:	9b05      	ldr	r3, [sp, #20]
 8002ada:	4694      	mov	ip, r2
 8002adc:	4463      	add	r3, ip
 8002ade:	6163      	str	r3, [r4, #20]
 8002ae0:	782b      	ldrb	r3, [r5, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d100      	bne.n	8002ae8 <_svfiprintf_r+0x7c>
 8002ae6:	e0a5      	b.n	8002c34 <_svfiprintf_r+0x1c8>
 8002ae8:	2201      	movs	r2, #1
 8002aea:	2300      	movs	r3, #0
 8002aec:	4252      	negs	r2, r2
 8002aee:	6062      	str	r2, [r4, #4]
 8002af0:	a904      	add	r1, sp, #16
 8002af2:	3254      	adds	r2, #84	; 0x54
 8002af4:	1852      	adds	r2, r2, r1
 8002af6:	1c6e      	adds	r6, r5, #1
 8002af8:	6023      	str	r3, [r4, #0]
 8002afa:	60e3      	str	r3, [r4, #12]
 8002afc:	60a3      	str	r3, [r4, #8]
 8002afe:	7013      	strb	r3, [r2, #0]
 8002b00:	65a3      	str	r3, [r4, #88]	; 0x58
 8002b02:	2205      	movs	r2, #5
 8002b04:	7831      	ldrb	r1, [r6, #0]
 8002b06:	4854      	ldr	r0, [pc, #336]	; (8002c58 <_svfiprintf_r+0x1ec>)
 8002b08:	f000 fa32 	bl	8002f70 <memchr>
 8002b0c:	1c75      	adds	r5, r6, #1
 8002b0e:	2800      	cmp	r0, #0
 8002b10:	d11f      	bne.n	8002b52 <_svfiprintf_r+0xe6>
 8002b12:	6822      	ldr	r2, [r4, #0]
 8002b14:	06d3      	lsls	r3, r2, #27
 8002b16:	d504      	bpl.n	8002b22 <_svfiprintf_r+0xb6>
 8002b18:	2353      	movs	r3, #83	; 0x53
 8002b1a:	a904      	add	r1, sp, #16
 8002b1c:	185b      	adds	r3, r3, r1
 8002b1e:	2120      	movs	r1, #32
 8002b20:	7019      	strb	r1, [r3, #0]
 8002b22:	0713      	lsls	r3, r2, #28
 8002b24:	d504      	bpl.n	8002b30 <_svfiprintf_r+0xc4>
 8002b26:	2353      	movs	r3, #83	; 0x53
 8002b28:	a904      	add	r1, sp, #16
 8002b2a:	185b      	adds	r3, r3, r1
 8002b2c:	212b      	movs	r1, #43	; 0x2b
 8002b2e:	7019      	strb	r1, [r3, #0]
 8002b30:	7833      	ldrb	r3, [r6, #0]
 8002b32:	2b2a      	cmp	r3, #42	; 0x2a
 8002b34:	d016      	beq.n	8002b64 <_svfiprintf_r+0xf8>
 8002b36:	0035      	movs	r5, r6
 8002b38:	2100      	movs	r1, #0
 8002b3a:	200a      	movs	r0, #10
 8002b3c:	68e3      	ldr	r3, [r4, #12]
 8002b3e:	782a      	ldrb	r2, [r5, #0]
 8002b40:	1c6e      	adds	r6, r5, #1
 8002b42:	3a30      	subs	r2, #48	; 0x30
 8002b44:	2a09      	cmp	r2, #9
 8002b46:	d94e      	bls.n	8002be6 <_svfiprintf_r+0x17a>
 8002b48:	2900      	cmp	r1, #0
 8002b4a:	d111      	bne.n	8002b70 <_svfiprintf_r+0x104>
 8002b4c:	e017      	b.n	8002b7e <_svfiprintf_r+0x112>
 8002b4e:	3501      	adds	r5, #1
 8002b50:	e7b0      	b.n	8002ab4 <_svfiprintf_r+0x48>
 8002b52:	4b41      	ldr	r3, [pc, #260]	; (8002c58 <_svfiprintf_r+0x1ec>)
 8002b54:	6822      	ldr	r2, [r4, #0]
 8002b56:	1ac0      	subs	r0, r0, r3
 8002b58:	2301      	movs	r3, #1
 8002b5a:	4083      	lsls	r3, r0
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	002e      	movs	r6, r5
 8002b60:	6023      	str	r3, [r4, #0]
 8002b62:	e7ce      	b.n	8002b02 <_svfiprintf_r+0x96>
 8002b64:	9b07      	ldr	r3, [sp, #28]
 8002b66:	1d19      	adds	r1, r3, #4
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	9107      	str	r1, [sp, #28]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	db01      	blt.n	8002b74 <_svfiprintf_r+0x108>
 8002b70:	930b      	str	r3, [sp, #44]	; 0x2c
 8002b72:	e004      	b.n	8002b7e <_svfiprintf_r+0x112>
 8002b74:	425b      	negs	r3, r3
 8002b76:	60e3      	str	r3, [r4, #12]
 8002b78:	2302      	movs	r3, #2
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	6023      	str	r3, [r4, #0]
 8002b7e:	782b      	ldrb	r3, [r5, #0]
 8002b80:	2b2e      	cmp	r3, #46	; 0x2e
 8002b82:	d10a      	bne.n	8002b9a <_svfiprintf_r+0x12e>
 8002b84:	786b      	ldrb	r3, [r5, #1]
 8002b86:	2b2a      	cmp	r3, #42	; 0x2a
 8002b88:	d135      	bne.n	8002bf6 <_svfiprintf_r+0x18a>
 8002b8a:	9b07      	ldr	r3, [sp, #28]
 8002b8c:	3502      	adds	r5, #2
 8002b8e:	1d1a      	adds	r2, r3, #4
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	9207      	str	r2, [sp, #28]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	db2b      	blt.n	8002bf0 <_svfiprintf_r+0x184>
 8002b98:	9309      	str	r3, [sp, #36]	; 0x24
 8002b9a:	4e30      	ldr	r6, [pc, #192]	; (8002c5c <_svfiprintf_r+0x1f0>)
 8002b9c:	2203      	movs	r2, #3
 8002b9e:	0030      	movs	r0, r6
 8002ba0:	7829      	ldrb	r1, [r5, #0]
 8002ba2:	f000 f9e5 	bl	8002f70 <memchr>
 8002ba6:	2800      	cmp	r0, #0
 8002ba8:	d006      	beq.n	8002bb8 <_svfiprintf_r+0x14c>
 8002baa:	2340      	movs	r3, #64	; 0x40
 8002bac:	1b80      	subs	r0, r0, r6
 8002bae:	4083      	lsls	r3, r0
 8002bb0:	6822      	ldr	r2, [r4, #0]
 8002bb2:	3501      	adds	r5, #1
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	6023      	str	r3, [r4, #0]
 8002bb8:	7829      	ldrb	r1, [r5, #0]
 8002bba:	2206      	movs	r2, #6
 8002bbc:	4828      	ldr	r0, [pc, #160]	; (8002c60 <_svfiprintf_r+0x1f4>)
 8002bbe:	1c6e      	adds	r6, r5, #1
 8002bc0:	7621      	strb	r1, [r4, #24]
 8002bc2:	f000 f9d5 	bl	8002f70 <memchr>
 8002bc6:	2800      	cmp	r0, #0
 8002bc8:	d03c      	beq.n	8002c44 <_svfiprintf_r+0x1d8>
 8002bca:	4b26      	ldr	r3, [pc, #152]	; (8002c64 <_svfiprintf_r+0x1f8>)
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d125      	bne.n	8002c1c <_svfiprintf_r+0x1b0>
 8002bd0:	2207      	movs	r2, #7
 8002bd2:	9b07      	ldr	r3, [sp, #28]
 8002bd4:	3307      	adds	r3, #7
 8002bd6:	4393      	bics	r3, r2
 8002bd8:	3308      	adds	r3, #8
 8002bda:	9307      	str	r3, [sp, #28]
 8002bdc:	6963      	ldr	r3, [r4, #20]
 8002bde:	9a04      	ldr	r2, [sp, #16]
 8002be0:	189b      	adds	r3, r3, r2
 8002be2:	6163      	str	r3, [r4, #20]
 8002be4:	e765      	b.n	8002ab2 <_svfiprintf_r+0x46>
 8002be6:	4343      	muls	r3, r0
 8002be8:	0035      	movs	r5, r6
 8002bea:	2101      	movs	r1, #1
 8002bec:	189b      	adds	r3, r3, r2
 8002bee:	e7a6      	b.n	8002b3e <_svfiprintf_r+0xd2>
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	425b      	negs	r3, r3
 8002bf4:	e7d0      	b.n	8002b98 <_svfiprintf_r+0x12c>
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	200a      	movs	r0, #10
 8002bfa:	001a      	movs	r2, r3
 8002bfc:	3501      	adds	r5, #1
 8002bfe:	6063      	str	r3, [r4, #4]
 8002c00:	7829      	ldrb	r1, [r5, #0]
 8002c02:	1c6e      	adds	r6, r5, #1
 8002c04:	3930      	subs	r1, #48	; 0x30
 8002c06:	2909      	cmp	r1, #9
 8002c08:	d903      	bls.n	8002c12 <_svfiprintf_r+0x1a6>
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0c5      	beq.n	8002b9a <_svfiprintf_r+0x12e>
 8002c0e:	9209      	str	r2, [sp, #36]	; 0x24
 8002c10:	e7c3      	b.n	8002b9a <_svfiprintf_r+0x12e>
 8002c12:	4342      	muls	r2, r0
 8002c14:	0035      	movs	r5, r6
 8002c16:	2301      	movs	r3, #1
 8002c18:	1852      	adds	r2, r2, r1
 8002c1a:	e7f1      	b.n	8002c00 <_svfiprintf_r+0x194>
 8002c1c:	ab07      	add	r3, sp, #28
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	003a      	movs	r2, r7
 8002c22:	0021      	movs	r1, r4
 8002c24:	4b10      	ldr	r3, [pc, #64]	; (8002c68 <_svfiprintf_r+0x1fc>)
 8002c26:	9803      	ldr	r0, [sp, #12]
 8002c28:	e000      	b.n	8002c2c <_svfiprintf_r+0x1c0>
 8002c2a:	bf00      	nop
 8002c2c:	9004      	str	r0, [sp, #16]
 8002c2e:	9b04      	ldr	r3, [sp, #16]
 8002c30:	3301      	adds	r3, #1
 8002c32:	d1d3      	bne.n	8002bdc <_svfiprintf_r+0x170>
 8002c34:	89bb      	ldrh	r3, [r7, #12]
 8002c36:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002c38:	065b      	lsls	r3, r3, #25
 8002c3a:	d400      	bmi.n	8002c3e <_svfiprintf_r+0x1d2>
 8002c3c:	e72d      	b.n	8002a9a <_svfiprintf_r+0x2e>
 8002c3e:	2001      	movs	r0, #1
 8002c40:	4240      	negs	r0, r0
 8002c42:	e72a      	b.n	8002a9a <_svfiprintf_r+0x2e>
 8002c44:	ab07      	add	r3, sp, #28
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	003a      	movs	r2, r7
 8002c4a:	0021      	movs	r1, r4
 8002c4c:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <_svfiprintf_r+0x1fc>)
 8002c4e:	9803      	ldr	r0, [sp, #12]
 8002c50:	f000 f87c 	bl	8002d4c <_printf_i>
 8002c54:	e7ea      	b.n	8002c2c <_svfiprintf_r+0x1c0>
 8002c56:	46c0      	nop			; (mov r8, r8)
 8002c58:	080032a4 	.word	0x080032a4
 8002c5c:	080032aa 	.word	0x080032aa
 8002c60:	080032ae 	.word	0x080032ae
 8002c64:	00000000 	.word	0x00000000
 8002c68:	080029a9 	.word	0x080029a9

08002c6c <_printf_common>:
 8002c6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c6e:	0015      	movs	r5, r2
 8002c70:	9301      	str	r3, [sp, #4]
 8002c72:	688a      	ldr	r2, [r1, #8]
 8002c74:	690b      	ldr	r3, [r1, #16]
 8002c76:	000c      	movs	r4, r1
 8002c78:	9000      	str	r0, [sp, #0]
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	da00      	bge.n	8002c80 <_printf_common+0x14>
 8002c7e:	0013      	movs	r3, r2
 8002c80:	0022      	movs	r2, r4
 8002c82:	602b      	str	r3, [r5, #0]
 8002c84:	3243      	adds	r2, #67	; 0x43
 8002c86:	7812      	ldrb	r2, [r2, #0]
 8002c88:	2a00      	cmp	r2, #0
 8002c8a:	d001      	beq.n	8002c90 <_printf_common+0x24>
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	602b      	str	r3, [r5, #0]
 8002c90:	6823      	ldr	r3, [r4, #0]
 8002c92:	069b      	lsls	r3, r3, #26
 8002c94:	d502      	bpl.n	8002c9c <_printf_common+0x30>
 8002c96:	682b      	ldr	r3, [r5, #0]
 8002c98:	3302      	adds	r3, #2
 8002c9a:	602b      	str	r3, [r5, #0]
 8002c9c:	6822      	ldr	r2, [r4, #0]
 8002c9e:	2306      	movs	r3, #6
 8002ca0:	0017      	movs	r7, r2
 8002ca2:	401f      	ands	r7, r3
 8002ca4:	421a      	tst	r2, r3
 8002ca6:	d027      	beq.n	8002cf8 <_printf_common+0x8c>
 8002ca8:	0023      	movs	r3, r4
 8002caa:	3343      	adds	r3, #67	; 0x43
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	1e5a      	subs	r2, r3, #1
 8002cb0:	4193      	sbcs	r3, r2
 8002cb2:	6822      	ldr	r2, [r4, #0]
 8002cb4:	0692      	lsls	r2, r2, #26
 8002cb6:	d430      	bmi.n	8002d1a <_printf_common+0xae>
 8002cb8:	0022      	movs	r2, r4
 8002cba:	9901      	ldr	r1, [sp, #4]
 8002cbc:	9800      	ldr	r0, [sp, #0]
 8002cbe:	9e08      	ldr	r6, [sp, #32]
 8002cc0:	3243      	adds	r2, #67	; 0x43
 8002cc2:	47b0      	blx	r6
 8002cc4:	1c43      	adds	r3, r0, #1
 8002cc6:	d025      	beq.n	8002d14 <_printf_common+0xa8>
 8002cc8:	2306      	movs	r3, #6
 8002cca:	6820      	ldr	r0, [r4, #0]
 8002ccc:	682a      	ldr	r2, [r5, #0]
 8002cce:	68e1      	ldr	r1, [r4, #12]
 8002cd0:	2500      	movs	r5, #0
 8002cd2:	4003      	ands	r3, r0
 8002cd4:	2b04      	cmp	r3, #4
 8002cd6:	d103      	bne.n	8002ce0 <_printf_common+0x74>
 8002cd8:	1a8d      	subs	r5, r1, r2
 8002cda:	43eb      	mvns	r3, r5
 8002cdc:	17db      	asrs	r3, r3, #31
 8002cde:	401d      	ands	r5, r3
 8002ce0:	68a3      	ldr	r3, [r4, #8]
 8002ce2:	6922      	ldr	r2, [r4, #16]
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	dd01      	ble.n	8002cec <_printf_common+0x80>
 8002ce8:	1a9b      	subs	r3, r3, r2
 8002cea:	18ed      	adds	r5, r5, r3
 8002cec:	2700      	movs	r7, #0
 8002cee:	42bd      	cmp	r5, r7
 8002cf0:	d120      	bne.n	8002d34 <_printf_common+0xc8>
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	e010      	b.n	8002d18 <_printf_common+0xac>
 8002cf6:	3701      	adds	r7, #1
 8002cf8:	68e3      	ldr	r3, [r4, #12]
 8002cfa:	682a      	ldr	r2, [r5, #0]
 8002cfc:	1a9b      	subs	r3, r3, r2
 8002cfe:	42bb      	cmp	r3, r7
 8002d00:	ddd2      	ble.n	8002ca8 <_printf_common+0x3c>
 8002d02:	0022      	movs	r2, r4
 8002d04:	2301      	movs	r3, #1
 8002d06:	9901      	ldr	r1, [sp, #4]
 8002d08:	9800      	ldr	r0, [sp, #0]
 8002d0a:	9e08      	ldr	r6, [sp, #32]
 8002d0c:	3219      	adds	r2, #25
 8002d0e:	47b0      	blx	r6
 8002d10:	1c43      	adds	r3, r0, #1
 8002d12:	d1f0      	bne.n	8002cf6 <_printf_common+0x8a>
 8002d14:	2001      	movs	r0, #1
 8002d16:	4240      	negs	r0, r0
 8002d18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002d1a:	2030      	movs	r0, #48	; 0x30
 8002d1c:	18e1      	adds	r1, r4, r3
 8002d1e:	3143      	adds	r1, #67	; 0x43
 8002d20:	7008      	strb	r0, [r1, #0]
 8002d22:	0021      	movs	r1, r4
 8002d24:	1c5a      	adds	r2, r3, #1
 8002d26:	3145      	adds	r1, #69	; 0x45
 8002d28:	7809      	ldrb	r1, [r1, #0]
 8002d2a:	18a2      	adds	r2, r4, r2
 8002d2c:	3243      	adds	r2, #67	; 0x43
 8002d2e:	3302      	adds	r3, #2
 8002d30:	7011      	strb	r1, [r2, #0]
 8002d32:	e7c1      	b.n	8002cb8 <_printf_common+0x4c>
 8002d34:	0022      	movs	r2, r4
 8002d36:	2301      	movs	r3, #1
 8002d38:	9901      	ldr	r1, [sp, #4]
 8002d3a:	9800      	ldr	r0, [sp, #0]
 8002d3c:	9e08      	ldr	r6, [sp, #32]
 8002d3e:	321a      	adds	r2, #26
 8002d40:	47b0      	blx	r6
 8002d42:	1c43      	adds	r3, r0, #1
 8002d44:	d0e6      	beq.n	8002d14 <_printf_common+0xa8>
 8002d46:	3701      	adds	r7, #1
 8002d48:	e7d1      	b.n	8002cee <_printf_common+0x82>
	...

08002d4c <_printf_i>:
 8002d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d4e:	b08b      	sub	sp, #44	; 0x2c
 8002d50:	9206      	str	r2, [sp, #24]
 8002d52:	000a      	movs	r2, r1
 8002d54:	3243      	adds	r2, #67	; 0x43
 8002d56:	9307      	str	r3, [sp, #28]
 8002d58:	9005      	str	r0, [sp, #20]
 8002d5a:	9204      	str	r2, [sp, #16]
 8002d5c:	7e0a      	ldrb	r2, [r1, #24]
 8002d5e:	000c      	movs	r4, r1
 8002d60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002d62:	2a78      	cmp	r2, #120	; 0x78
 8002d64:	d807      	bhi.n	8002d76 <_printf_i+0x2a>
 8002d66:	2a62      	cmp	r2, #98	; 0x62
 8002d68:	d809      	bhi.n	8002d7e <_printf_i+0x32>
 8002d6a:	2a00      	cmp	r2, #0
 8002d6c:	d100      	bne.n	8002d70 <_printf_i+0x24>
 8002d6e:	e0c1      	b.n	8002ef4 <_printf_i+0x1a8>
 8002d70:	2a58      	cmp	r2, #88	; 0x58
 8002d72:	d100      	bne.n	8002d76 <_printf_i+0x2a>
 8002d74:	e08c      	b.n	8002e90 <_printf_i+0x144>
 8002d76:	0026      	movs	r6, r4
 8002d78:	3642      	adds	r6, #66	; 0x42
 8002d7a:	7032      	strb	r2, [r6, #0]
 8002d7c:	e022      	b.n	8002dc4 <_printf_i+0x78>
 8002d7e:	0010      	movs	r0, r2
 8002d80:	3863      	subs	r0, #99	; 0x63
 8002d82:	2815      	cmp	r0, #21
 8002d84:	d8f7      	bhi.n	8002d76 <_printf_i+0x2a>
 8002d86:	f7fd f9bd 	bl	8000104 <__gnu_thumb1_case_shi>
 8002d8a:	0016      	.short	0x0016
 8002d8c:	fff6001f 	.word	0xfff6001f
 8002d90:	fff6fff6 	.word	0xfff6fff6
 8002d94:	001ffff6 	.word	0x001ffff6
 8002d98:	fff6fff6 	.word	0xfff6fff6
 8002d9c:	fff6fff6 	.word	0xfff6fff6
 8002da0:	003600a8 	.word	0x003600a8
 8002da4:	fff6009a 	.word	0xfff6009a
 8002da8:	00b9fff6 	.word	0x00b9fff6
 8002dac:	0036fff6 	.word	0x0036fff6
 8002db0:	fff6fff6 	.word	0xfff6fff6
 8002db4:	009e      	.short	0x009e
 8002db6:	0026      	movs	r6, r4
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	3642      	adds	r6, #66	; 0x42
 8002dbc:	1d11      	adds	r1, r2, #4
 8002dbe:	6019      	str	r1, [r3, #0]
 8002dc0:	6813      	ldr	r3, [r2, #0]
 8002dc2:	7033      	strb	r3, [r6, #0]
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e0a7      	b.n	8002f18 <_printf_i+0x1cc>
 8002dc8:	6808      	ldr	r0, [r1, #0]
 8002dca:	6819      	ldr	r1, [r3, #0]
 8002dcc:	1d0a      	adds	r2, r1, #4
 8002dce:	0605      	lsls	r5, r0, #24
 8002dd0:	d50b      	bpl.n	8002dea <_printf_i+0x9e>
 8002dd2:	680d      	ldr	r5, [r1, #0]
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	2d00      	cmp	r5, #0
 8002dd8:	da03      	bge.n	8002de2 <_printf_i+0x96>
 8002dda:	232d      	movs	r3, #45	; 0x2d
 8002ddc:	9a04      	ldr	r2, [sp, #16]
 8002dde:	426d      	negs	r5, r5
 8002de0:	7013      	strb	r3, [r2, #0]
 8002de2:	4b61      	ldr	r3, [pc, #388]	; (8002f68 <_printf_i+0x21c>)
 8002de4:	270a      	movs	r7, #10
 8002de6:	9303      	str	r3, [sp, #12]
 8002de8:	e01b      	b.n	8002e22 <_printf_i+0xd6>
 8002dea:	680d      	ldr	r5, [r1, #0]
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	0641      	lsls	r1, r0, #25
 8002df0:	d5f1      	bpl.n	8002dd6 <_printf_i+0x8a>
 8002df2:	b22d      	sxth	r5, r5
 8002df4:	e7ef      	b.n	8002dd6 <_printf_i+0x8a>
 8002df6:	680d      	ldr	r5, [r1, #0]
 8002df8:	6819      	ldr	r1, [r3, #0]
 8002dfa:	1d08      	adds	r0, r1, #4
 8002dfc:	6018      	str	r0, [r3, #0]
 8002dfe:	062e      	lsls	r6, r5, #24
 8002e00:	d501      	bpl.n	8002e06 <_printf_i+0xba>
 8002e02:	680d      	ldr	r5, [r1, #0]
 8002e04:	e003      	b.n	8002e0e <_printf_i+0xc2>
 8002e06:	066d      	lsls	r5, r5, #25
 8002e08:	d5fb      	bpl.n	8002e02 <_printf_i+0xb6>
 8002e0a:	680d      	ldr	r5, [r1, #0]
 8002e0c:	b2ad      	uxth	r5, r5
 8002e0e:	4b56      	ldr	r3, [pc, #344]	; (8002f68 <_printf_i+0x21c>)
 8002e10:	2708      	movs	r7, #8
 8002e12:	9303      	str	r3, [sp, #12]
 8002e14:	2a6f      	cmp	r2, #111	; 0x6f
 8002e16:	d000      	beq.n	8002e1a <_printf_i+0xce>
 8002e18:	3702      	adds	r7, #2
 8002e1a:	0023      	movs	r3, r4
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	3343      	adds	r3, #67	; 0x43
 8002e20:	701a      	strb	r2, [r3, #0]
 8002e22:	6863      	ldr	r3, [r4, #4]
 8002e24:	60a3      	str	r3, [r4, #8]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	db03      	blt.n	8002e32 <_printf_i+0xe6>
 8002e2a:	2204      	movs	r2, #4
 8002e2c:	6821      	ldr	r1, [r4, #0]
 8002e2e:	4391      	bics	r1, r2
 8002e30:	6021      	str	r1, [r4, #0]
 8002e32:	2d00      	cmp	r5, #0
 8002e34:	d102      	bne.n	8002e3c <_printf_i+0xf0>
 8002e36:	9e04      	ldr	r6, [sp, #16]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00c      	beq.n	8002e56 <_printf_i+0x10a>
 8002e3c:	9e04      	ldr	r6, [sp, #16]
 8002e3e:	0028      	movs	r0, r5
 8002e40:	0039      	movs	r1, r7
 8002e42:	f7fd f9ef 	bl	8000224 <__aeabi_uidivmod>
 8002e46:	9b03      	ldr	r3, [sp, #12]
 8002e48:	3e01      	subs	r6, #1
 8002e4a:	5c5b      	ldrb	r3, [r3, r1]
 8002e4c:	7033      	strb	r3, [r6, #0]
 8002e4e:	002b      	movs	r3, r5
 8002e50:	0005      	movs	r5, r0
 8002e52:	429f      	cmp	r7, r3
 8002e54:	d9f3      	bls.n	8002e3e <_printf_i+0xf2>
 8002e56:	2f08      	cmp	r7, #8
 8002e58:	d109      	bne.n	8002e6e <_printf_i+0x122>
 8002e5a:	6823      	ldr	r3, [r4, #0]
 8002e5c:	07db      	lsls	r3, r3, #31
 8002e5e:	d506      	bpl.n	8002e6e <_printf_i+0x122>
 8002e60:	6863      	ldr	r3, [r4, #4]
 8002e62:	6922      	ldr	r2, [r4, #16]
 8002e64:	4293      	cmp	r3, r2
 8002e66:	dc02      	bgt.n	8002e6e <_printf_i+0x122>
 8002e68:	2330      	movs	r3, #48	; 0x30
 8002e6a:	3e01      	subs	r6, #1
 8002e6c:	7033      	strb	r3, [r6, #0]
 8002e6e:	9b04      	ldr	r3, [sp, #16]
 8002e70:	1b9b      	subs	r3, r3, r6
 8002e72:	6123      	str	r3, [r4, #16]
 8002e74:	9b07      	ldr	r3, [sp, #28]
 8002e76:	0021      	movs	r1, r4
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	9805      	ldr	r0, [sp, #20]
 8002e7c:	9b06      	ldr	r3, [sp, #24]
 8002e7e:	aa09      	add	r2, sp, #36	; 0x24
 8002e80:	f7ff fef4 	bl	8002c6c <_printf_common>
 8002e84:	1c43      	adds	r3, r0, #1
 8002e86:	d14c      	bne.n	8002f22 <_printf_i+0x1d6>
 8002e88:	2001      	movs	r0, #1
 8002e8a:	4240      	negs	r0, r0
 8002e8c:	b00b      	add	sp, #44	; 0x2c
 8002e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e90:	3145      	adds	r1, #69	; 0x45
 8002e92:	700a      	strb	r2, [r1, #0]
 8002e94:	4a34      	ldr	r2, [pc, #208]	; (8002f68 <_printf_i+0x21c>)
 8002e96:	9203      	str	r2, [sp, #12]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	6821      	ldr	r1, [r4, #0]
 8002e9c:	ca20      	ldmia	r2!, {r5}
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	0608      	lsls	r0, r1, #24
 8002ea2:	d516      	bpl.n	8002ed2 <_printf_i+0x186>
 8002ea4:	07cb      	lsls	r3, r1, #31
 8002ea6:	d502      	bpl.n	8002eae <_printf_i+0x162>
 8002ea8:	2320      	movs	r3, #32
 8002eaa:	4319      	orrs	r1, r3
 8002eac:	6021      	str	r1, [r4, #0]
 8002eae:	2710      	movs	r7, #16
 8002eb0:	2d00      	cmp	r5, #0
 8002eb2:	d1b2      	bne.n	8002e1a <_printf_i+0xce>
 8002eb4:	2320      	movs	r3, #32
 8002eb6:	6822      	ldr	r2, [r4, #0]
 8002eb8:	439a      	bics	r2, r3
 8002eba:	6022      	str	r2, [r4, #0]
 8002ebc:	e7ad      	b.n	8002e1a <_printf_i+0xce>
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	6809      	ldr	r1, [r1, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	6022      	str	r2, [r4, #0]
 8002ec6:	0022      	movs	r2, r4
 8002ec8:	2178      	movs	r1, #120	; 0x78
 8002eca:	3245      	adds	r2, #69	; 0x45
 8002ecc:	7011      	strb	r1, [r2, #0]
 8002ece:	4a27      	ldr	r2, [pc, #156]	; (8002f6c <_printf_i+0x220>)
 8002ed0:	e7e1      	b.n	8002e96 <_printf_i+0x14a>
 8002ed2:	0648      	lsls	r0, r1, #25
 8002ed4:	d5e6      	bpl.n	8002ea4 <_printf_i+0x158>
 8002ed6:	b2ad      	uxth	r5, r5
 8002ed8:	e7e4      	b.n	8002ea4 <_printf_i+0x158>
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	680d      	ldr	r5, [r1, #0]
 8002ede:	1d10      	adds	r0, r2, #4
 8002ee0:	6949      	ldr	r1, [r1, #20]
 8002ee2:	6018      	str	r0, [r3, #0]
 8002ee4:	6813      	ldr	r3, [r2, #0]
 8002ee6:	062e      	lsls	r6, r5, #24
 8002ee8:	d501      	bpl.n	8002eee <_printf_i+0x1a2>
 8002eea:	6019      	str	r1, [r3, #0]
 8002eec:	e002      	b.n	8002ef4 <_printf_i+0x1a8>
 8002eee:	066d      	lsls	r5, r5, #25
 8002ef0:	d5fb      	bpl.n	8002eea <_printf_i+0x19e>
 8002ef2:	8019      	strh	r1, [r3, #0]
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	9e04      	ldr	r6, [sp, #16]
 8002ef8:	6123      	str	r3, [r4, #16]
 8002efa:	e7bb      	b.n	8002e74 <_printf_i+0x128>
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	1d11      	adds	r1, r2, #4
 8002f00:	6019      	str	r1, [r3, #0]
 8002f02:	6816      	ldr	r6, [r2, #0]
 8002f04:	2100      	movs	r1, #0
 8002f06:	0030      	movs	r0, r6
 8002f08:	6862      	ldr	r2, [r4, #4]
 8002f0a:	f000 f831 	bl	8002f70 <memchr>
 8002f0e:	2800      	cmp	r0, #0
 8002f10:	d001      	beq.n	8002f16 <_printf_i+0x1ca>
 8002f12:	1b80      	subs	r0, r0, r6
 8002f14:	6060      	str	r0, [r4, #4]
 8002f16:	6863      	ldr	r3, [r4, #4]
 8002f18:	6123      	str	r3, [r4, #16]
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	9a04      	ldr	r2, [sp, #16]
 8002f1e:	7013      	strb	r3, [r2, #0]
 8002f20:	e7a8      	b.n	8002e74 <_printf_i+0x128>
 8002f22:	6923      	ldr	r3, [r4, #16]
 8002f24:	0032      	movs	r2, r6
 8002f26:	9906      	ldr	r1, [sp, #24]
 8002f28:	9805      	ldr	r0, [sp, #20]
 8002f2a:	9d07      	ldr	r5, [sp, #28]
 8002f2c:	47a8      	blx	r5
 8002f2e:	1c43      	adds	r3, r0, #1
 8002f30:	d0aa      	beq.n	8002e88 <_printf_i+0x13c>
 8002f32:	6823      	ldr	r3, [r4, #0]
 8002f34:	079b      	lsls	r3, r3, #30
 8002f36:	d415      	bmi.n	8002f64 <_printf_i+0x218>
 8002f38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f3a:	68e0      	ldr	r0, [r4, #12]
 8002f3c:	4298      	cmp	r0, r3
 8002f3e:	daa5      	bge.n	8002e8c <_printf_i+0x140>
 8002f40:	0018      	movs	r0, r3
 8002f42:	e7a3      	b.n	8002e8c <_printf_i+0x140>
 8002f44:	0022      	movs	r2, r4
 8002f46:	2301      	movs	r3, #1
 8002f48:	9906      	ldr	r1, [sp, #24]
 8002f4a:	9805      	ldr	r0, [sp, #20]
 8002f4c:	9e07      	ldr	r6, [sp, #28]
 8002f4e:	3219      	adds	r2, #25
 8002f50:	47b0      	blx	r6
 8002f52:	1c43      	adds	r3, r0, #1
 8002f54:	d098      	beq.n	8002e88 <_printf_i+0x13c>
 8002f56:	3501      	adds	r5, #1
 8002f58:	68e3      	ldr	r3, [r4, #12]
 8002f5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f5c:	1a9b      	subs	r3, r3, r2
 8002f5e:	42ab      	cmp	r3, r5
 8002f60:	dcf0      	bgt.n	8002f44 <_printf_i+0x1f8>
 8002f62:	e7e9      	b.n	8002f38 <_printf_i+0x1ec>
 8002f64:	2500      	movs	r5, #0
 8002f66:	e7f7      	b.n	8002f58 <_printf_i+0x20c>
 8002f68:	080032b5 	.word	0x080032b5
 8002f6c:	080032c6 	.word	0x080032c6

08002f70 <memchr>:
 8002f70:	b2c9      	uxtb	r1, r1
 8002f72:	1882      	adds	r2, r0, r2
 8002f74:	4290      	cmp	r0, r2
 8002f76:	d101      	bne.n	8002f7c <memchr+0xc>
 8002f78:	2000      	movs	r0, #0
 8002f7a:	4770      	bx	lr
 8002f7c:	7803      	ldrb	r3, [r0, #0]
 8002f7e:	428b      	cmp	r3, r1
 8002f80:	d0fb      	beq.n	8002f7a <memchr+0xa>
 8002f82:	3001      	adds	r0, #1
 8002f84:	e7f6      	b.n	8002f74 <memchr+0x4>

08002f86 <memcpy>:
 8002f86:	2300      	movs	r3, #0
 8002f88:	b510      	push	{r4, lr}
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d100      	bne.n	8002f90 <memcpy+0xa>
 8002f8e:	bd10      	pop	{r4, pc}
 8002f90:	5ccc      	ldrb	r4, [r1, r3]
 8002f92:	54c4      	strb	r4, [r0, r3]
 8002f94:	3301      	adds	r3, #1
 8002f96:	e7f8      	b.n	8002f8a <memcpy+0x4>

08002f98 <memmove>:
 8002f98:	b510      	push	{r4, lr}
 8002f9a:	4288      	cmp	r0, r1
 8002f9c:	d902      	bls.n	8002fa4 <memmove+0xc>
 8002f9e:	188b      	adds	r3, r1, r2
 8002fa0:	4298      	cmp	r0, r3
 8002fa2:	d303      	bcc.n	8002fac <memmove+0x14>
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	e007      	b.n	8002fb8 <memmove+0x20>
 8002fa8:	5c8b      	ldrb	r3, [r1, r2]
 8002faa:	5483      	strb	r3, [r0, r2]
 8002fac:	3a01      	subs	r2, #1
 8002fae:	d2fb      	bcs.n	8002fa8 <memmove+0x10>
 8002fb0:	bd10      	pop	{r4, pc}
 8002fb2:	5ccc      	ldrb	r4, [r1, r3]
 8002fb4:	54c4      	strb	r4, [r0, r3]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d1fa      	bne.n	8002fb2 <memmove+0x1a>
 8002fbc:	e7f8      	b.n	8002fb0 <memmove+0x18>
	...

08002fc0 <_free_r>:
 8002fc0:	b570      	push	{r4, r5, r6, lr}
 8002fc2:	0005      	movs	r5, r0
 8002fc4:	2900      	cmp	r1, #0
 8002fc6:	d010      	beq.n	8002fea <_free_r+0x2a>
 8002fc8:	1f0c      	subs	r4, r1, #4
 8002fca:	6823      	ldr	r3, [r4, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	da00      	bge.n	8002fd2 <_free_r+0x12>
 8002fd0:	18e4      	adds	r4, r4, r3
 8002fd2:	0028      	movs	r0, r5
 8002fd4:	f000 f918 	bl	8003208 <__malloc_lock>
 8002fd8:	4a1d      	ldr	r2, [pc, #116]	; (8003050 <_free_r+0x90>)
 8002fda:	6813      	ldr	r3, [r2, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d105      	bne.n	8002fec <_free_r+0x2c>
 8002fe0:	6063      	str	r3, [r4, #4]
 8002fe2:	6014      	str	r4, [r2, #0]
 8002fe4:	0028      	movs	r0, r5
 8002fe6:	f000 f917 	bl	8003218 <__malloc_unlock>
 8002fea:	bd70      	pop	{r4, r5, r6, pc}
 8002fec:	42a3      	cmp	r3, r4
 8002fee:	d908      	bls.n	8003002 <_free_r+0x42>
 8002ff0:	6821      	ldr	r1, [r4, #0]
 8002ff2:	1860      	adds	r0, r4, r1
 8002ff4:	4283      	cmp	r3, r0
 8002ff6:	d1f3      	bne.n	8002fe0 <_free_r+0x20>
 8002ff8:	6818      	ldr	r0, [r3, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	1841      	adds	r1, r0, r1
 8002ffe:	6021      	str	r1, [r4, #0]
 8003000:	e7ee      	b.n	8002fe0 <_free_r+0x20>
 8003002:	001a      	movs	r2, r3
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <_free_r+0x4e>
 800300a:	42a3      	cmp	r3, r4
 800300c:	d9f9      	bls.n	8003002 <_free_r+0x42>
 800300e:	6811      	ldr	r1, [r2, #0]
 8003010:	1850      	adds	r0, r2, r1
 8003012:	42a0      	cmp	r0, r4
 8003014:	d10b      	bne.n	800302e <_free_r+0x6e>
 8003016:	6820      	ldr	r0, [r4, #0]
 8003018:	1809      	adds	r1, r1, r0
 800301a:	1850      	adds	r0, r2, r1
 800301c:	6011      	str	r1, [r2, #0]
 800301e:	4283      	cmp	r3, r0
 8003020:	d1e0      	bne.n	8002fe4 <_free_r+0x24>
 8003022:	6818      	ldr	r0, [r3, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	1841      	adds	r1, r0, r1
 8003028:	6011      	str	r1, [r2, #0]
 800302a:	6053      	str	r3, [r2, #4]
 800302c:	e7da      	b.n	8002fe4 <_free_r+0x24>
 800302e:	42a0      	cmp	r0, r4
 8003030:	d902      	bls.n	8003038 <_free_r+0x78>
 8003032:	230c      	movs	r3, #12
 8003034:	602b      	str	r3, [r5, #0]
 8003036:	e7d5      	b.n	8002fe4 <_free_r+0x24>
 8003038:	6821      	ldr	r1, [r4, #0]
 800303a:	1860      	adds	r0, r4, r1
 800303c:	4283      	cmp	r3, r0
 800303e:	d103      	bne.n	8003048 <_free_r+0x88>
 8003040:	6818      	ldr	r0, [r3, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	1841      	adds	r1, r0, r1
 8003046:	6021      	str	r1, [r4, #0]
 8003048:	6063      	str	r3, [r4, #4]
 800304a:	6054      	str	r4, [r2, #4]
 800304c:	e7ca      	b.n	8002fe4 <_free_r+0x24>
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	2000010c 	.word	0x2000010c

08003054 <sbrk_aligned>:
 8003054:	b570      	push	{r4, r5, r6, lr}
 8003056:	4e0f      	ldr	r6, [pc, #60]	; (8003094 <sbrk_aligned+0x40>)
 8003058:	000d      	movs	r5, r1
 800305a:	6831      	ldr	r1, [r6, #0]
 800305c:	0004      	movs	r4, r0
 800305e:	2900      	cmp	r1, #0
 8003060:	d102      	bne.n	8003068 <sbrk_aligned+0x14>
 8003062:	f000 f8bf 	bl	80031e4 <_sbrk_r>
 8003066:	6030      	str	r0, [r6, #0]
 8003068:	0029      	movs	r1, r5
 800306a:	0020      	movs	r0, r4
 800306c:	f000 f8ba 	bl	80031e4 <_sbrk_r>
 8003070:	1c43      	adds	r3, r0, #1
 8003072:	d00a      	beq.n	800308a <sbrk_aligned+0x36>
 8003074:	2303      	movs	r3, #3
 8003076:	1cc5      	adds	r5, r0, #3
 8003078:	439d      	bics	r5, r3
 800307a:	42a8      	cmp	r0, r5
 800307c:	d007      	beq.n	800308e <sbrk_aligned+0x3a>
 800307e:	1a29      	subs	r1, r5, r0
 8003080:	0020      	movs	r0, r4
 8003082:	f000 f8af 	bl	80031e4 <_sbrk_r>
 8003086:	1c43      	adds	r3, r0, #1
 8003088:	d101      	bne.n	800308e <sbrk_aligned+0x3a>
 800308a:	2501      	movs	r5, #1
 800308c:	426d      	negs	r5, r5
 800308e:	0028      	movs	r0, r5
 8003090:	bd70      	pop	{r4, r5, r6, pc}
 8003092:	46c0      	nop			; (mov r8, r8)
 8003094:	20000110 	.word	0x20000110

08003098 <_malloc_r>:
 8003098:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800309a:	2203      	movs	r2, #3
 800309c:	1ccb      	adds	r3, r1, #3
 800309e:	4393      	bics	r3, r2
 80030a0:	3308      	adds	r3, #8
 80030a2:	0006      	movs	r6, r0
 80030a4:	001f      	movs	r7, r3
 80030a6:	2b0c      	cmp	r3, #12
 80030a8:	d232      	bcs.n	8003110 <_malloc_r+0x78>
 80030aa:	270c      	movs	r7, #12
 80030ac:	42b9      	cmp	r1, r7
 80030ae:	d831      	bhi.n	8003114 <_malloc_r+0x7c>
 80030b0:	0030      	movs	r0, r6
 80030b2:	f000 f8a9 	bl	8003208 <__malloc_lock>
 80030b6:	4d32      	ldr	r5, [pc, #200]	; (8003180 <_malloc_r+0xe8>)
 80030b8:	682b      	ldr	r3, [r5, #0]
 80030ba:	001c      	movs	r4, r3
 80030bc:	2c00      	cmp	r4, #0
 80030be:	d12e      	bne.n	800311e <_malloc_r+0x86>
 80030c0:	0039      	movs	r1, r7
 80030c2:	0030      	movs	r0, r6
 80030c4:	f7ff ffc6 	bl	8003054 <sbrk_aligned>
 80030c8:	0004      	movs	r4, r0
 80030ca:	1c43      	adds	r3, r0, #1
 80030cc:	d11e      	bne.n	800310c <_malloc_r+0x74>
 80030ce:	682c      	ldr	r4, [r5, #0]
 80030d0:	0025      	movs	r5, r4
 80030d2:	2d00      	cmp	r5, #0
 80030d4:	d14a      	bne.n	800316c <_malloc_r+0xd4>
 80030d6:	6823      	ldr	r3, [r4, #0]
 80030d8:	0029      	movs	r1, r5
 80030da:	18e3      	adds	r3, r4, r3
 80030dc:	0030      	movs	r0, r6
 80030de:	9301      	str	r3, [sp, #4]
 80030e0:	f000 f880 	bl	80031e4 <_sbrk_r>
 80030e4:	9b01      	ldr	r3, [sp, #4]
 80030e6:	4283      	cmp	r3, r0
 80030e8:	d143      	bne.n	8003172 <_malloc_r+0xda>
 80030ea:	6823      	ldr	r3, [r4, #0]
 80030ec:	3703      	adds	r7, #3
 80030ee:	1aff      	subs	r7, r7, r3
 80030f0:	2303      	movs	r3, #3
 80030f2:	439f      	bics	r7, r3
 80030f4:	3708      	adds	r7, #8
 80030f6:	2f0c      	cmp	r7, #12
 80030f8:	d200      	bcs.n	80030fc <_malloc_r+0x64>
 80030fa:	270c      	movs	r7, #12
 80030fc:	0039      	movs	r1, r7
 80030fe:	0030      	movs	r0, r6
 8003100:	f7ff ffa8 	bl	8003054 <sbrk_aligned>
 8003104:	1c43      	adds	r3, r0, #1
 8003106:	d034      	beq.n	8003172 <_malloc_r+0xda>
 8003108:	6823      	ldr	r3, [r4, #0]
 800310a:	19df      	adds	r7, r3, r7
 800310c:	6027      	str	r7, [r4, #0]
 800310e:	e013      	b.n	8003138 <_malloc_r+0xa0>
 8003110:	2b00      	cmp	r3, #0
 8003112:	dacb      	bge.n	80030ac <_malloc_r+0x14>
 8003114:	230c      	movs	r3, #12
 8003116:	2500      	movs	r5, #0
 8003118:	6033      	str	r3, [r6, #0]
 800311a:	0028      	movs	r0, r5
 800311c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800311e:	6822      	ldr	r2, [r4, #0]
 8003120:	1bd1      	subs	r1, r2, r7
 8003122:	d420      	bmi.n	8003166 <_malloc_r+0xce>
 8003124:	290b      	cmp	r1, #11
 8003126:	d917      	bls.n	8003158 <_malloc_r+0xc0>
 8003128:	19e2      	adds	r2, r4, r7
 800312a:	6027      	str	r7, [r4, #0]
 800312c:	42a3      	cmp	r3, r4
 800312e:	d111      	bne.n	8003154 <_malloc_r+0xbc>
 8003130:	602a      	str	r2, [r5, #0]
 8003132:	6863      	ldr	r3, [r4, #4]
 8003134:	6011      	str	r1, [r2, #0]
 8003136:	6053      	str	r3, [r2, #4]
 8003138:	0030      	movs	r0, r6
 800313a:	0025      	movs	r5, r4
 800313c:	f000 f86c 	bl	8003218 <__malloc_unlock>
 8003140:	2207      	movs	r2, #7
 8003142:	350b      	adds	r5, #11
 8003144:	1d23      	adds	r3, r4, #4
 8003146:	4395      	bics	r5, r2
 8003148:	1aea      	subs	r2, r5, r3
 800314a:	429d      	cmp	r5, r3
 800314c:	d0e5      	beq.n	800311a <_malloc_r+0x82>
 800314e:	1b5b      	subs	r3, r3, r5
 8003150:	50a3      	str	r3, [r4, r2]
 8003152:	e7e2      	b.n	800311a <_malloc_r+0x82>
 8003154:	605a      	str	r2, [r3, #4]
 8003156:	e7ec      	b.n	8003132 <_malloc_r+0x9a>
 8003158:	6862      	ldr	r2, [r4, #4]
 800315a:	42a3      	cmp	r3, r4
 800315c:	d101      	bne.n	8003162 <_malloc_r+0xca>
 800315e:	602a      	str	r2, [r5, #0]
 8003160:	e7ea      	b.n	8003138 <_malloc_r+0xa0>
 8003162:	605a      	str	r2, [r3, #4]
 8003164:	e7e8      	b.n	8003138 <_malloc_r+0xa0>
 8003166:	0023      	movs	r3, r4
 8003168:	6864      	ldr	r4, [r4, #4]
 800316a:	e7a7      	b.n	80030bc <_malloc_r+0x24>
 800316c:	002c      	movs	r4, r5
 800316e:	686d      	ldr	r5, [r5, #4]
 8003170:	e7af      	b.n	80030d2 <_malloc_r+0x3a>
 8003172:	230c      	movs	r3, #12
 8003174:	0030      	movs	r0, r6
 8003176:	6033      	str	r3, [r6, #0]
 8003178:	f000 f84e 	bl	8003218 <__malloc_unlock>
 800317c:	e7cd      	b.n	800311a <_malloc_r+0x82>
 800317e:	46c0      	nop			; (mov r8, r8)
 8003180:	2000010c 	.word	0x2000010c

08003184 <_realloc_r>:
 8003184:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003186:	0007      	movs	r7, r0
 8003188:	000e      	movs	r6, r1
 800318a:	0014      	movs	r4, r2
 800318c:	2900      	cmp	r1, #0
 800318e:	d105      	bne.n	800319c <_realloc_r+0x18>
 8003190:	0011      	movs	r1, r2
 8003192:	f7ff ff81 	bl	8003098 <_malloc_r>
 8003196:	0005      	movs	r5, r0
 8003198:	0028      	movs	r0, r5
 800319a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800319c:	2a00      	cmp	r2, #0
 800319e:	d103      	bne.n	80031a8 <_realloc_r+0x24>
 80031a0:	f7ff ff0e 	bl	8002fc0 <_free_r>
 80031a4:	0025      	movs	r5, r4
 80031a6:	e7f7      	b.n	8003198 <_realloc_r+0x14>
 80031a8:	f000 f83e 	bl	8003228 <_malloc_usable_size_r>
 80031ac:	9001      	str	r0, [sp, #4]
 80031ae:	4284      	cmp	r4, r0
 80031b0:	d803      	bhi.n	80031ba <_realloc_r+0x36>
 80031b2:	0035      	movs	r5, r6
 80031b4:	0843      	lsrs	r3, r0, #1
 80031b6:	42a3      	cmp	r3, r4
 80031b8:	d3ee      	bcc.n	8003198 <_realloc_r+0x14>
 80031ba:	0021      	movs	r1, r4
 80031bc:	0038      	movs	r0, r7
 80031be:	f7ff ff6b 	bl	8003098 <_malloc_r>
 80031c2:	1e05      	subs	r5, r0, #0
 80031c4:	d0e8      	beq.n	8003198 <_realloc_r+0x14>
 80031c6:	9b01      	ldr	r3, [sp, #4]
 80031c8:	0022      	movs	r2, r4
 80031ca:	429c      	cmp	r4, r3
 80031cc:	d900      	bls.n	80031d0 <_realloc_r+0x4c>
 80031ce:	001a      	movs	r2, r3
 80031d0:	0031      	movs	r1, r6
 80031d2:	0028      	movs	r0, r5
 80031d4:	f7ff fed7 	bl	8002f86 <memcpy>
 80031d8:	0031      	movs	r1, r6
 80031da:	0038      	movs	r0, r7
 80031dc:	f7ff fef0 	bl	8002fc0 <_free_r>
 80031e0:	e7da      	b.n	8003198 <_realloc_r+0x14>
	...

080031e4 <_sbrk_r>:
 80031e4:	2300      	movs	r3, #0
 80031e6:	b570      	push	{r4, r5, r6, lr}
 80031e8:	4d06      	ldr	r5, [pc, #24]	; (8003204 <_sbrk_r+0x20>)
 80031ea:	0004      	movs	r4, r0
 80031ec:	0008      	movs	r0, r1
 80031ee:	602b      	str	r3, [r5, #0]
 80031f0:	f7fd fb1a 	bl	8000828 <_sbrk>
 80031f4:	1c43      	adds	r3, r0, #1
 80031f6:	d103      	bne.n	8003200 <_sbrk_r+0x1c>
 80031f8:	682b      	ldr	r3, [r5, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d000      	beq.n	8003200 <_sbrk_r+0x1c>
 80031fe:	6023      	str	r3, [r4, #0]
 8003200:	bd70      	pop	{r4, r5, r6, pc}
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	20000114 	.word	0x20000114

08003208 <__malloc_lock>:
 8003208:	b510      	push	{r4, lr}
 800320a:	4802      	ldr	r0, [pc, #8]	; (8003214 <__malloc_lock+0xc>)
 800320c:	f000 f814 	bl	8003238 <__retarget_lock_acquire_recursive>
 8003210:	bd10      	pop	{r4, pc}
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	20000118 	.word	0x20000118

08003218 <__malloc_unlock>:
 8003218:	b510      	push	{r4, lr}
 800321a:	4802      	ldr	r0, [pc, #8]	; (8003224 <__malloc_unlock+0xc>)
 800321c:	f000 f80d 	bl	800323a <__retarget_lock_release_recursive>
 8003220:	bd10      	pop	{r4, pc}
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	20000118 	.word	0x20000118

08003228 <_malloc_usable_size_r>:
 8003228:	1f0b      	subs	r3, r1, #4
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	1f18      	subs	r0, r3, #4
 800322e:	2b00      	cmp	r3, #0
 8003230:	da01      	bge.n	8003236 <_malloc_usable_size_r+0xe>
 8003232:	580b      	ldr	r3, [r1, r0]
 8003234:	18c0      	adds	r0, r0, r3
 8003236:	4770      	bx	lr

08003238 <__retarget_lock_acquire_recursive>:
 8003238:	4770      	bx	lr

0800323a <__retarget_lock_release_recursive>:
 800323a:	4770      	bx	lr

0800323c <_init>:
 800323c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003242:	bc08      	pop	{r3}
 8003244:	469e      	mov	lr, r3
 8003246:	4770      	bx	lr

08003248 <_fini>:
 8003248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800324e:	bc08      	pop	{r3}
 8003250:	469e      	mov	lr, r3
 8003252:	4770      	bx	lr
