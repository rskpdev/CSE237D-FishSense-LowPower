
RTC_Alarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f78  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003034  08003034  00013034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030b8  080030b8  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  080030b8  080030b8  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030b8  080030b8  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030b8  080030b8  000130b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030bc  080030bc  000130bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080030c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  2000008c  0800314c  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  0800314c  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000aba9  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00007f03  00000000  00000000  0002ac5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c5a  00000000  00000000  00032b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007c8  00000000  00000000  000347c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00097b2b  00000000  00000000  00034f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000006d0  00000000  00000000  000ccab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000188a4  00000000  00000000  000cd188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e5a2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d64  00000000  00000000  000e5a7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000008c 	.word	0x2000008c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800301c 	.word	0x0800301c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000090 	.word	0x20000090
 8000100:	0800301c 	.word	0x0800301c

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000230:	480d      	ldr	r0, [pc, #52]	; (8000268 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000232:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000234:	f000 fb2a 	bl	800088c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000238:	480c      	ldr	r0, [pc, #48]	; (800026c <LoopForever+0x6>)
  ldr r1, =_edata
 800023a:	490d      	ldr	r1, [pc, #52]	; (8000270 <LoopForever+0xa>)
  ldr r2, =_sidata
 800023c:	4a0d      	ldr	r2, [pc, #52]	; (8000274 <LoopForever+0xe>)
  movs r3, #0
 800023e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000240:	e002      	b.n	8000248 <LoopCopyDataInit>

08000242 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000242:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000244:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000246:	3304      	adds	r3, #4

08000248 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000248:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800024a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800024c:	d3f9      	bcc.n	8000242 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800024e:	4a0a      	ldr	r2, [pc, #40]	; (8000278 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000250:	4c0a      	ldr	r4, [pc, #40]	; (800027c <LoopForever+0x16>)
  movs r3, #0
 8000252:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000254:	e001      	b.n	800025a <LoopFillZerobss>

08000256 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000256:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000258:	3204      	adds	r2, #4

0800025a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800025a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800025c:	d3fb      	bcc.n	8000256 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800025e:	f002 fa47 	bl	80026f0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000262:	f000 f847 	bl	80002f4 <main>

08000266 <LoopForever>:

LoopForever:
  b LoopForever
 8000266:	e7fe      	b.n	8000266 <LoopForever>
  ldr   r0, =_estack
 8000268:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800026c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000270:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000274:	080030c0 	.word	0x080030c0
  ldr r2, =_sbss
 8000278:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 800027c:	200000f0 	.word	0x200000f0

08000280 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000280:	e7fe      	b.n	8000280 <ADC1_COMP_IRQHandler>
	...

08000284 <BSP_GPIO_Init>:
  *         This parameter can be one of the following values:
  * @arg pin
  * @retval None
  */
void BSP_GPIO_Init(GPIO_PIN_TypeDef Pin)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b088      	sub	sp, #32
 8000288:	af00      	add	r7, sp, #0
 800028a:	0002      	movs	r2, r0
 800028c:	1dfb      	adds	r3, r7, #7
 800028e:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef  gpioinitstruct;

  /* Enable the GPIO_LED Clock */
  GPIOx_GPIO_CLK_ENABLE(Pin);
 8000290:	1dfb      	adds	r3, r7, #7
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d10b      	bne.n	80002b0 <BSP_GPIO_Init+0x2c>
 8000298:	4b14      	ldr	r3, [pc, #80]	; (80002ec <BSP_GPIO_Init+0x68>)
 800029a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800029c:	4b13      	ldr	r3, [pc, #76]	; (80002ec <BSP_GPIO_Init+0x68>)
 800029e:	2108      	movs	r1, #8
 80002a0:	430a      	orrs	r2, r1
 80002a2:	635a      	str	r2, [r3, #52]	; 0x34
 80002a4:	4b11      	ldr	r3, [pc, #68]	; (80002ec <BSP_GPIO_Init+0x68>)
 80002a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002a8:	2208      	movs	r2, #8
 80002aa:	4013      	ands	r3, r2
 80002ac:	60bb      	str	r3, [r7, #8]
 80002ae:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Pin];
 80002b0:	2380      	movs	r3, #128	; 0x80
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	001a      	movs	r2, r3
 80002b6:	210c      	movs	r1, #12
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	601a      	str	r2, [r3, #0]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002bc:	187b      	adds	r3, r7, r1
 80002be:	2201      	movs	r2, #1
 80002c0:	605a      	str	r2, [r3, #4]
  gpioinitstruct.Pull = GPIO_PULLUP;
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2201      	movs	r2, #1
 80002c6:	609a      	str	r2, [r3, #8]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	2200      	movs	r2, #0
 80002cc:	60da      	str	r2, [r3, #12]

  HAL_GPIO_Init(GPIO_PORT[Pin], &gpioinitstruct);
 80002ce:	1dfb      	adds	r3, r7, #7
 80002d0:	781a      	ldrb	r2, [r3, #0]
 80002d2:	4b07      	ldr	r3, [pc, #28]	; (80002f0 <BSP_GPIO_Init+0x6c>)
 80002d4:	0092      	lsls	r2, r2, #2
 80002d6:	58d3      	ldr	r3, [r2, r3]
 80002d8:	187a      	adds	r2, r7, r1
 80002da:	0011      	movs	r1, r2
 80002dc:	0018      	movs	r0, r3
 80002de:	f000 fc7f 	bl	8000be0 <HAL_GPIO_Init>
}
 80002e2:	46c0      	nop			; (mov r8, r8)
 80002e4:	46bd      	mov	sp, r7
 80002e6:	b008      	add	sp, #32
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	46c0      	nop			; (mov r8, r8)
 80002ec:	40021000 	.word	0x40021000
 80002f0:	20000000 	.word	0x20000000

080002f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f8:	f000 fad4 	bl	80008a4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* Configure LED4 */
  BSP_LED_Init(LED4);
 80002fc:	2000      	movs	r0, #0
 80002fe:	f000 fa63 	bl	80007c8 <BSP_LED_Init>

  /* Configure PIO */
  BSP_GPIO_Init(PIO);
 8000302:	2000      	movs	r0, #0
 8000304:	f7ff ffbe 	bl	8000284 <BSP_GPIO_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000308:	f000 f80e 	bl	8000328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RTC_Init();
 800030c:	f000 f866 	bl	80003dc <MX_RTC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  RTCStatus = 1;
 8000310:	4b03      	ldr	r3, [pc, #12]	; (8000320 <main+0x2c>)
 8000312:	2201      	movs	r2, #1
 8000314:	601a      	str	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    /* Display the updated Time */
    RTC_TimeShow(aShowTime);
 8000316:	4b03      	ldr	r3, [pc, #12]	; (8000324 <main+0x30>)
 8000318:	0018      	movs	r0, r3
 800031a:	f000 f911 	bl	8000540 <RTC_TimeShow>
 800031e:	e7fa      	b.n	8000316 <main+0x22>
 8000320:	200000d4 	.word	0x200000d4
 8000324:	20000004 	.word	0x20000004

08000328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000328:	b590      	push	{r4, r7, lr}
 800032a:	b093      	sub	sp, #76	; 0x4c
 800032c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032e:	2410      	movs	r4, #16
 8000330:	193b      	adds	r3, r7, r4
 8000332:	0018      	movs	r0, r3
 8000334:	2338      	movs	r3, #56	; 0x38
 8000336:	001a      	movs	r2, r3
 8000338:	2100      	movs	r1, #0
 800033a:	f002 f9fd 	bl	8002738 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800033e:	003b      	movs	r3, r7
 8000340:	0018      	movs	r0, r3
 8000342:	2310      	movs	r3, #16
 8000344:	001a      	movs	r2, r3
 8000346:	2100      	movs	r1, #0
 8000348:	f002 f9f6 	bl	8002738 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800034c:	193b      	adds	r3, r7, r4
 800034e:	2202      	movs	r2, #2
 8000350:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000352:	193b      	adds	r3, r7, r4
 8000354:	2280      	movs	r2, #128	; 0x80
 8000356:	0052      	lsls	r2, r2, #1
 8000358:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800035a:	0021      	movs	r1, r4
 800035c:	187b      	adds	r3, r7, r1
 800035e:	2200      	movs	r2, #0
 8000360:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000362:	187b      	adds	r3, r7, r1
 8000364:	2240      	movs	r2, #64	; 0x40
 8000366:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000368:	187b      	adds	r3, r7, r1
 800036a:	2202      	movs	r2, #2
 800036c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800036e:	187b      	adds	r3, r7, r1
 8000370:	2202      	movs	r2, #2
 8000372:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000374:	187b      	adds	r3, r7, r1
 8000376:	2230      	movs	r2, #48	; 0x30
 8000378:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 70;
 800037a:	187b      	adds	r3, r7, r1
 800037c:	2246      	movs	r2, #70	; 0x46
 800037e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV10;
 8000380:	187b      	adds	r3, r7, r1
 8000382:	2290      	movs	r2, #144	; 0x90
 8000384:	0352      	lsls	r2, r2, #13
 8000386:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV5;
 8000388:	187b      	adds	r3, r7, r1
 800038a:	2280      	movs	r2, #128	; 0x80
 800038c:	0512      	lsls	r2, r2, #20
 800038e:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV5;
 8000390:	187b      	adds	r3, r7, r1
 8000392:	2280      	movs	r2, #128	; 0x80
 8000394:	0612      	lsls	r2, r2, #24
 8000396:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000398:	187b      	adds	r3, r7, r1
 800039a:	0018      	movs	r0, r3
 800039c:	f000 fdca 	bl	8000f34 <HAL_RCC_OscConfig>
 80003a0:	1e03      	subs	r3, r0, #0
 80003a2:	d001      	beq.n	80003a8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80003a4:	f000 f8f6 	bl	8000594 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a8:	003b      	movs	r3, r7
 80003aa:	2207      	movs	r2, #7
 80003ac:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ae:	003b      	movs	r3, r7
 80003b0:	2202      	movs	r2, #2
 80003b2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b4:	003b      	movs	r3, r7
 80003b6:	2200      	movs	r2, #0
 80003b8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ba:	003b      	movs	r3, r7
 80003bc:	2200      	movs	r2, #0
 80003be:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003c0:	003b      	movs	r3, r7
 80003c2:	2102      	movs	r1, #2
 80003c4:	0018      	movs	r0, r3
 80003c6:	f001 f8cf 	bl	8001568 <HAL_RCC_ClockConfig>
 80003ca:	1e03      	subs	r3, r0, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80003ce:	f000 f8e1 	bl	8000594 <Error_Handler>
  }
}
 80003d2:	46c0      	nop			; (mov r8, r8)
 80003d4:	46bd      	mov	sp, r7
 80003d6:	b013      	add	sp, #76	; 0x4c
 80003d8:	bd90      	pop	{r4, r7, pc}
	...

080003dc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b090      	sub	sp, #64	; 0x40
 80003e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80003e2:	232c      	movs	r3, #44	; 0x2c
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	0018      	movs	r0, r3
 80003e8:	2314      	movs	r3, #20
 80003ea:	001a      	movs	r2, r3
 80003ec:	2100      	movs	r1, #0
 80003ee:	f002 f9a3 	bl	8002738 <memset>
  RTC_DateTypeDef sDate = {0};
 80003f2:	2328      	movs	r3, #40	; 0x28
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80003fa:	003b      	movs	r3, r7
 80003fc:	0018      	movs	r0, r3
 80003fe:	2328      	movs	r3, #40	; 0x28
 8000400:	001a      	movs	r2, r3
 8000402:	2100      	movs	r1, #0
 8000404:	f002 f998 	bl	8002738 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000408:	4b45      	ldr	r3, [pc, #276]	; (8000520 <MX_RTC_Init+0x144>)
 800040a:	4a46      	ldr	r2, [pc, #280]	; (8000524 <MX_RTC_Init+0x148>)
 800040c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800040e:	4b44      	ldr	r3, [pc, #272]	; (8000520 <MX_RTC_Init+0x144>)
 8000410:	2200      	movs	r2, #0
 8000412:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = RTC_ASYNCH_PREDIV;
 8000414:	4b42      	ldr	r3, [pc, #264]	; (8000520 <MX_RTC_Init+0x144>)
 8000416:	227f      	movs	r2, #127	; 0x7f
 8000418:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = RTC_SYNCH_PREDIV;
 800041a:	4b41      	ldr	r3, [pc, #260]	; (8000520 <MX_RTC_Init+0x144>)
 800041c:	22ff      	movs	r2, #255	; 0xff
 800041e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000420:	4b3f      	ldr	r3, [pc, #252]	; (8000520 <MX_RTC_Init+0x144>)
 8000422:	2200      	movs	r2, #0
 8000424:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000426:	4b3e      	ldr	r3, [pc, #248]	; (8000520 <MX_RTC_Init+0x144>)
 8000428:	2200      	movs	r2, #0
 800042a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800042c:	4b3c      	ldr	r3, [pc, #240]	; (8000520 <MX_RTC_Init+0x144>)
 800042e:	2200      	movs	r2, #0
 8000430:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000432:	4b3b      	ldr	r3, [pc, #236]	; (8000520 <MX_RTC_Init+0x144>)
 8000434:	2280      	movs	r2, #128	; 0x80
 8000436:	05d2      	lsls	r2, r2, #23
 8000438:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800043a:	4b39      	ldr	r3, [pc, #228]	; (8000520 <MX_RTC_Init+0x144>)
 800043c:	2200      	movs	r2, #0
 800043e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000440:	4b37      	ldr	r3, [pc, #220]	; (8000520 <MX_RTC_Init+0x144>)
 8000442:	0018      	movs	r0, r3
 8000444:	f001 fc5a 	bl	8001cfc <HAL_RTC_Init>
 8000448:	1e03      	subs	r3, r0, #0
 800044a:	d001      	beq.n	8000450 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 800044c:	f000 f8a2 	bl	8000594 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x2;
 8000450:	212c      	movs	r1, #44	; 0x2c
 8000452:	187b      	adds	r3, r7, r1
 8000454:	2202      	movs	r2, #2
 8000456:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x20;
 8000458:	187b      	adds	r3, r7, r1
 800045a:	2220      	movs	r2, #32
 800045c:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 800045e:	187b      	adds	r3, r7, r1
 8000460:	2200      	movs	r2, #0
 8000462:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8000464:	187b      	adds	r3, r7, r1
 8000466:	2200      	movs	r2, #0
 8000468:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800046a:	187b      	adds	r3, r7, r1
 800046c:	2200      	movs	r2, #0
 800046e:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000470:	187b      	adds	r3, r7, r1
 8000472:	2200      	movs	r2, #0
 8000474:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000476:	1879      	adds	r1, r7, r1
 8000478:	4b29      	ldr	r3, [pc, #164]	; (8000520 <MX_RTC_Init+0x144>)
 800047a:	2201      	movs	r2, #1
 800047c:	0018      	movs	r0, r3
 800047e:	f001 fcd3 	bl	8001e28 <HAL_RTC_SetTime>
 8000482:	1e03      	subs	r3, r0, #0
 8000484:	d001      	beq.n	800048a <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8000486:	f000 f885 	bl	8000594 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800048a:	2128      	movs	r1, #40	; 0x28
 800048c:	187b      	adds	r3, r7, r1
 800048e:	2201      	movs	r2, #1
 8000490:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_FEBRUARY;
 8000492:	187b      	adds	r3, r7, r1
 8000494:	2202      	movs	r2, #2
 8000496:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x18;
 8000498:	187b      	adds	r3, r7, r1
 800049a:	2218      	movs	r2, #24
 800049c:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x14;
 800049e:	187b      	adds	r3, r7, r1
 80004a0:	2214      	movs	r2, #20
 80004a2:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	4b1e      	ldr	r3, [pc, #120]	; (8000520 <MX_RTC_Init+0x144>)
 80004a8:	2201      	movs	r2, #1
 80004aa:	0018      	movs	r0, r3
 80004ac:	f001 fdc0 	bl	8002030 <HAL_RTC_SetDate>
 80004b0:	1e03      	subs	r3, r0, #0
 80004b2:	d001      	beq.n	80004b8 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 80004b4:	f000 f86e 	bl	8000594 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x2;
 80004b8:	003b      	movs	r3, r7
 80004ba:	2202      	movs	r2, #2
 80004bc:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x20;
 80004be:	003b      	movs	r3, r7
 80004c0:	2220      	movs	r2, #32
 80004c2:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x30;
 80004c4:	003b      	movs	r3, r7
 80004c6:	2230      	movs	r2, #48	; 0x30
 80004c8:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80004ca:	003b      	movs	r3, r7
 80004cc:	2200      	movs	r2, #0
 80004ce:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80004d0:	003b      	movs	r3, r7
 80004d2:	2200      	movs	r2, #0
 80004d4:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80004d6:	003b      	movs	r3, r7
 80004d8:	2200      	movs	r2, #0
 80004da:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80004dc:	003b      	movs	r3, r7
 80004de:	2200      	movs	r2, #0
 80004e0:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 80004e2:	003b      	movs	r3, r7
 80004e4:	22f0      	movs	r2, #240	; 0xf0
 80004e6:	0512      	lsls	r2, r2, #20
 80004e8:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 80004ea:	003b      	movs	r3, r7
 80004ec:	2280      	movs	r2, #128	; 0x80
 80004ee:	05d2      	lsls	r2, r2, #23
 80004f0:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = RTC_WEEKDAY_MONDAY;
 80004f2:	003b      	movs	r3, r7
 80004f4:	2220      	movs	r2, #32
 80004f6:	2101      	movs	r1, #1
 80004f8:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80004fa:	003b      	movs	r3, r7
 80004fc:	2280      	movs	r2, #128	; 0x80
 80004fe:	0052      	lsls	r2, r2, #1
 8000500:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000502:	0039      	movs	r1, r7
 8000504:	4b06      	ldr	r3, [pc, #24]	; (8000520 <MX_RTC_Init+0x144>)
 8000506:	2201      	movs	r2, #1
 8000508:	0018      	movs	r0, r3
 800050a:	f001 fe71 	bl	80021f0 <HAL_RTC_SetAlarm_IT>
 800050e:	1e03      	subs	r3, r0, #0
 8000510:	d001      	beq.n	8000516 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8000512:	f000 f83f 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000516:	46c0      	nop			; (mov r8, r8)
 8000518:	46bd      	mov	sp, r7
 800051a:	b010      	add	sp, #64	; 0x40
 800051c:	bd80      	pop	{r7, pc}
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	200000a8 	.word	0x200000a8
 8000524:	40002800 	.word	0x40002800

08000528 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm callback
  * @param  hrtc : RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]

  /* Turn LED4 on: Alarm generation */
  BSP_LED_On(LED4);
 8000530:	2000      	movs	r0, #0
 8000532:	f000 f97f 	bl	8000834 <BSP_LED_On>


}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	b002      	add	sp, #8
 800053c:	bd80      	pop	{r7, pc}
	...

08000540 <RTC_TimeShow>:
  * @brief  Display the current time.
  * @param  showtime : pointer to buffer
  * @retval None
  */
static void RTC_TimeShow(uint8_t *showtime)
{
 8000540:	b590      	push	{r4, r7, lr}
 8000542:	b08b      	sub	sp, #44	; 0x2c
 8000544:	af02      	add	r7, sp, #8
 8000546:	6078      	str	r0, [r7, #4]
  RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;

  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 8000548:	2408      	movs	r4, #8
 800054a:	1939      	adds	r1, r7, r4
 800054c:	4b0f      	ldr	r3, [pc, #60]	; (800058c <RTC_TimeShow+0x4c>)
 800054e:	2200      	movs	r2, #0
 8000550:	0018      	movs	r0, r3
 8000552:	f001 fd11 	bl	8001f78 <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 8000556:	231c      	movs	r3, #28
 8000558:	18f9      	adds	r1, r7, r3
 800055a:	4b0c      	ldr	r3, [pc, #48]	; (800058c <RTC_TimeShow+0x4c>)
 800055c:	2200      	movs	r2, #0
 800055e:	0018      	movs	r0, r3
 8000560:	f001 fdf8 	bl	8002154 <HAL_RTC_GetDate>
  /* Display time Format : hh:mm:ss */
  sprintf((char *)showtime, "%02d:%02d:%02d", stimestructureget.Hours, stimestructureget.Minutes, stimestructureget.Seconds);
 8000564:	0021      	movs	r1, r4
 8000566:	187b      	adds	r3, r7, r1
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	001a      	movs	r2, r3
 800056c:	187b      	adds	r3, r7, r1
 800056e:	785b      	ldrb	r3, [r3, #1]
 8000570:	001c      	movs	r4, r3
 8000572:	187b      	adds	r3, r7, r1
 8000574:	789b      	ldrb	r3, [r3, #2]
 8000576:	4906      	ldr	r1, [pc, #24]	; (8000590 <RTC_TimeShow+0x50>)
 8000578:	6878      	ldr	r0, [r7, #4]
 800057a:	9300      	str	r3, [sp, #0]
 800057c:	0023      	movs	r3, r4
 800057e:	f002 f8e3 	bl	8002748 <siprintf>
}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	46bd      	mov	sp, r7
 8000586:	b009      	add	sp, #36	; 0x24
 8000588:	bd90      	pop	{r4, r7, pc}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	200000a8 	.word	0x200000a8
 8000590:	08003034 	.word	0x08003034

08000594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  RTCStatus = 0xE;
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <Error_Handler+0x1c>)
 800059a:	220e      	movs	r2, #14
 800059c:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* Toggle LED4 with a period of one second */
    BSP_LED_Toggle(LED4);
 800059e:	2000      	movs	r0, #0
 80005a0:	f000 f95e 	bl	8000860 <BSP_LED_Toggle>
    HAL_Delay(1000);
 80005a4:	23fa      	movs	r3, #250	; 0xfa
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	0018      	movs	r0, r3
 80005aa:	f000 fa01 	bl	80009b0 <HAL_Delay>
    BSP_LED_Toggle(LED4);
 80005ae:	e7f6      	b.n	800059e <Error_Handler+0xa>
 80005b0:	200000d4 	.word	0x200000d4

080005b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ba:	4b11      	ldr	r3, [pc, #68]	; (8000600 <HAL_MspInit+0x4c>)
 80005bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005be:	4b10      	ldr	r3, [pc, #64]	; (8000600 <HAL_MspInit+0x4c>)
 80005c0:	2101      	movs	r1, #1
 80005c2:	430a      	orrs	r2, r1
 80005c4:	641a      	str	r2, [r3, #64]	; 0x40
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <HAL_MspInit+0x4c>)
 80005c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ca:	2201      	movs	r2, #1
 80005cc:	4013      	ands	r3, r2
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <HAL_MspInit+0x4c>)
 80005d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005d6:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <HAL_MspInit+0x4c>)
 80005d8:	2180      	movs	r1, #128	; 0x80
 80005da:	0549      	lsls	r1, r1, #21
 80005dc:	430a      	orrs	r2, r1
 80005de:	63da      	str	r2, [r3, #60]	; 0x3c
 80005e0:	4b07      	ldr	r3, [pc, #28]	; (8000600 <HAL_MspInit+0x4c>)
 80005e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005e4:	2380      	movs	r3, #128	; 0x80
 80005e6:	055b      	lsls	r3, r3, #21
 80005e8:	4013      	ands	r3, r2
 80005ea:	603b      	str	r3, [r7, #0]
 80005ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80005ee:	23c0      	movs	r3, #192	; 0xc0
 80005f0:	00db      	lsls	r3, r3, #3
 80005f2:	0018      	movs	r0, r3
 80005f4:	f000 fa00 	bl	80009f8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005f8:	46c0      	nop			; (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	b002      	add	sp, #8
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40021000 	.word	0x40021000

08000604 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000604:	b590      	push	{r4, r7, lr}
 8000606:	b0a1      	sub	sp, #132	; 0x84
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a41      	ldr	r2, [pc, #260]	; (8000718 <HAL_RTC_MspInit+0x114>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d000      	beq.n	8000618 <HAL_RTC_MspInit+0x14>
 8000616:	e07b      	b.n	8000710 <HAL_RTC_MspInit+0x10c>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
    RCC_OscInitTypeDef        RCC_OscInitStruct = {0};
 8000618:	2340      	movs	r3, #64	; 0x40
 800061a:	18fb      	adds	r3, r7, r3
 800061c:	0018      	movs	r0, r3
 800061e:	2338      	movs	r3, #56	; 0x38
 8000620:	001a      	movs	r2, r3
 8000622:	2100      	movs	r1, #0
 8000624:	f002 f888 	bl	8002738 <memset>
    RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct = {0};
 8000628:	240c      	movs	r4, #12
 800062a:	193b      	adds	r3, r7, r4
 800062c:	0018      	movs	r0, r3
 800062e:	2334      	movs	r3, #52	; 0x34
 8000630:	001a      	movs	r2, r3
 8000632:	2100      	movs	r1, #0
 8000634:	f002 f880 	bl	8002738 <memset>

    /* Enables the PWR Clock and Enables access to the backup domain */
    /* To enable access on RTC registers */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000638:	4b38      	ldr	r3, [pc, #224]	; (800071c <HAL_RTC_MspInit+0x118>)
 800063a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800063c:	4b37      	ldr	r3, [pc, #220]	; (800071c <HAL_RTC_MspInit+0x118>)
 800063e:	2180      	movs	r1, #128	; 0x80
 8000640:	0549      	lsls	r1, r1, #21
 8000642:	430a      	orrs	r2, r1
 8000644:	63da      	str	r2, [r3, #60]	; 0x3c
 8000646:	4b35      	ldr	r3, [pc, #212]	; (800071c <HAL_RTC_MspInit+0x118>)
 8000648:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800064a:	2380      	movs	r3, #128	; 0x80
 800064c:	055b      	lsls	r3, r3, #21
 800064e:	4013      	ands	r3, r2
 8000650:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000652:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    HAL_PWR_EnableBkUpAccess();
 8000654:	f000 fc60 	bl	8000f18 <HAL_PWR_EnableBkUpAccess>

    /* Get RTC clock configuration */
    HAL_RCCEx_GetPeriphCLKConfig(&PeriphClkInitStruct);
 8000658:	193b      	adds	r3, r7, r4
 800065a:	0018      	movs	r0, r3
 800065c:	f001 fac6 	bl	8001bec <HAL_RCCEx_GetPeriphCLKConfig>

    /*In case of RTC clock already enable, make sure it's the good one */
    if (PeriphClkInitStruct.RTCClockSelection == RtcClockSource)
 8000660:	193b      	adds	r3, r7, r4
 8000662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000664:	4b2e      	ldr	r3, [pc, #184]	; (8000720 <HAL_RTC_MspInit+0x11c>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	429a      	cmp	r2, r3
 800066a:	d034      	beq.n	80006d6 <HAL_RTC_MspInit+0xd2>
    {
      /* Do nothing */
    }
    else
    {
      PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800066c:	193b      	adds	r3, r7, r4
 800066e:	2280      	movs	r2, #128	; 0x80
 8000670:	0292      	lsls	r2, r2, #10
 8000672:	601a      	str	r2, [r3, #0]

      /* If selected source was previously the opposite source clock, first select none*/
      if (PeriphClkInitStruct.RTCClockSelection != RCC_RTCCLKSOURCE_NONE)
 8000674:	193b      	adds	r3, r7, r4
 8000676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000678:	2b00      	cmp	r3, #0
 800067a:	d00a      	beq.n	8000692 <HAL_RTC_MspInit+0x8e>
      {
        PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_NONE;
 800067c:	193b      	adds	r3, r7, r4
 800067e:	2200      	movs	r2, #0
 8000680:	631a      	str	r2, [r3, #48]	; 0x30
        if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000682:	193b      	adds	r3, r7, r4
 8000684:	0018      	movs	r0, r3
 8000686:	f001 f8f9 	bl	800187c <HAL_RCCEx_PeriphCLKConfig>
 800068a:	1e03      	subs	r3, r0, #0
 800068c:	d001      	beq.n	8000692 <HAL_RTC_MspInit+0x8e>
        {
          Error_Handler();
 800068e:	f7ff ff81 	bl	8000594 <Error_Handler>
        }
      }

      /* Configure LSE/LSI as RTC clock source */
#ifdef RTC_CLOCK_SOURCE_LSE
      RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_LSE;
 8000692:	2140      	movs	r1, #64	; 0x40
 8000694:	187b      	adds	r3, r7, r1
 8000696:	220c      	movs	r2, #12
 8000698:	601a      	str	r2, [r3, #0]
      RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800069a:	187b      	adds	r3, r7, r1
 800069c:	2200      	movs	r2, #0
 800069e:	61da      	str	r2, [r3, #28]
      RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	2201      	movs	r2, #1
 80006a4:	609a      	str	r2, [r3, #8]
      RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
      RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
#else
#error Please select the RTC Clock source inside the main.h file
#endif /*RTC_CLOCK_SOURCE_LSE*/

      if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	0018      	movs	r0, r3
 80006b0:	f000 fc40 	bl	8000f34 <HAL_RCC_OscConfig>
 80006b4:	1e03      	subs	r3, r0, #0
 80006b6:	d001      	beq.n	80006bc <HAL_RTC_MspInit+0xb8>
      {
        Error_Handler();
 80006b8:	f7ff ff6c 	bl	8000594 <Error_Handler>
      }

      PeriphClkInitStruct.RTCClockSelection = RtcClockSource;
 80006bc:	4b18      	ldr	r3, [pc, #96]	; (8000720 <HAL_RTC_MspInit+0x11c>)
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	210c      	movs	r1, #12
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	0018      	movs	r0, r3
 80006ca:	f001 f8d7 	bl	800187c <HAL_RCCEx_PeriphCLKConfig>
 80006ce:	1e03      	subs	r3, r0, #0
 80006d0:	d001      	beq.n	80006d6 <HAL_RTC_MspInit+0xd2>
      {
        Error_Handler();
 80006d2:	f7ff ff5f 	bl	8000594 <Error_Handler>
      }
    }

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <HAL_RTC_MspInit+0x118>)
 80006d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <HAL_RTC_MspInit+0x118>)
 80006dc:	2180      	movs	r1, #128	; 0x80
 80006de:	0209      	lsls	r1, r1, #8
 80006e0:	430a      	orrs	r2, r1
 80006e2:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80006e4:	4b0d      	ldr	r3, [pc, #52]	; (800071c <HAL_RTC_MspInit+0x118>)
 80006e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <HAL_RTC_MspInit+0x118>)
 80006ea:	2180      	movs	r1, #128	; 0x80
 80006ec:	00c9      	lsls	r1, r1, #3
 80006ee:	430a      	orrs	r2, r1
 80006f0:	63da      	str	r2, [r3, #60]	; 0x3c
 80006f2:	4b0a      	ldr	r3, [pc, #40]	; (800071c <HAL_RTC_MspInit+0x118>)
 80006f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006f6:	2380      	movs	r3, #128	; 0x80
 80006f8:	00db      	lsls	r3, r3, #3
 80006fa:	4013      	ands	r3, r2
 80006fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80006fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8000700:	2200      	movs	r2, #0
 8000702:	2100      	movs	r1, #0
 8000704:	2002      	movs	r0, #2
 8000706:	f000 fa39 	bl	8000b7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 800070a:	2002      	movs	r0, #2
 800070c:	f000 fa4b 	bl	8000ba6 <HAL_NVIC_EnableIRQ>


  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000710:	46c0      	nop			; (mov r8, r8)
 8000712:	46bd      	mov	sp, r7
 8000714:	b021      	add	sp, #132	; 0x84
 8000716:	bd90      	pop	{r4, r7, pc}
 8000718:	40002800 	.word	0x40002800
 800071c:	40021000 	.word	0x40021000
 8000720:	20000014 	.word	0x20000014

08000724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000728:	46c0      	nop			; (mov r8, r8)
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000732:	e7fe      	b.n	8000732 <HardFault_Handler+0x4>

08000734 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000738:	f000 f91e 	bl	8000978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800073c:	46c0      	nop			; (mov r8, r8)
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
	...

08000744 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000748:	4b03      	ldr	r3, [pc, #12]	; (8000758 <RTC_TAMP_IRQHandler+0x14>)
 800074a:	0018      	movs	r0, r3
 800074c:	f001 fe90 	bl	8002470 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	200000a8 	.word	0x200000a8

0800075c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000764:	4a14      	ldr	r2, [pc, #80]	; (80007b8 <_sbrk+0x5c>)
 8000766:	4b15      	ldr	r3, [pc, #84]	; (80007bc <_sbrk+0x60>)
 8000768:	1ad3      	subs	r3, r2, r3
 800076a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000770:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <_sbrk+0x64>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d102      	bne.n	800077e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <_sbrk+0x64>)
 800077a:	4a12      	ldr	r2, [pc, #72]	; (80007c4 <_sbrk+0x68>)
 800077c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800077e:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <_sbrk+0x64>)
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	18d3      	adds	r3, r2, r3
 8000786:	693a      	ldr	r2, [r7, #16]
 8000788:	429a      	cmp	r2, r3
 800078a:	d207      	bcs.n	800079c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800078c:	f001 ffaa 	bl	80026e4 <__errno>
 8000790:	0003      	movs	r3, r0
 8000792:	220c      	movs	r2, #12
 8000794:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000796:	2301      	movs	r3, #1
 8000798:	425b      	negs	r3, r3
 800079a:	e009      	b.n	80007b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800079c:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <_sbrk+0x64>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007a2:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <_sbrk+0x64>)
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	18d2      	adds	r2, r2, r3
 80007aa:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <_sbrk+0x64>)
 80007ac:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80007ae:	68fb      	ldr	r3, [r7, #12]
}
 80007b0:	0018      	movs	r0, r3
 80007b2:	46bd      	mov	sp, r7
 80007b4:	b006      	add	sp, #24
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20009000 	.word	0x20009000
 80007bc:	00000400 	.word	0x00000400
 80007c0:	200000d8 	.word	0x200000d8
 80007c4:	200000f0 	.word	0x200000f0

080007c8 <BSP_LED_Init>:
  *         This parameter can be one of the following values:
  * @arg LED4
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	0002      	movs	r2, r0
 80007d0:	1dfb      	adds	r3, r7, #7
 80007d2:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef  gpioinitstruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80007d4:	1dfb      	adds	r3, r7, #7
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d10b      	bne.n	80007f4 <BSP_LED_Init+0x2c>
 80007dc:	4b13      	ldr	r3, [pc, #76]	; (800082c <BSP_LED_Init+0x64>)
 80007de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <BSP_LED_Init+0x64>)
 80007e2:	2101      	movs	r1, #1
 80007e4:	430a      	orrs	r2, r1
 80007e6:	635a      	str	r2, [r3, #52]	; 0x34
 80007e8:	4b10      	ldr	r3, [pc, #64]	; (800082c <BSP_LED_Init+0x64>)
 80007ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ec:	2201      	movs	r2, #1
 80007ee:	4013      	ands	r3, r2
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = LED_PIN[Led];
 80007f4:	2320      	movs	r3, #32
 80007f6:	001a      	movs	r2, r3
 80007f8:	210c      	movs	r1, #12
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	601a      	str	r2, [r3, #0]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	2201      	movs	r2, #1
 8000802:	605a      	str	r2, [r3, #4]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8000804:	187b      	adds	r3, r7, r1
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080a:	187b      	adds	r3, r7, r1
 800080c:	2203      	movs	r2, #3
 800080e:	60da      	str	r2, [r3, #12]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpioinitstruct);
 8000810:	1dfb      	adds	r3, r7, #7
 8000812:	781a      	ldrb	r2, [r3, #0]
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <BSP_LED_Init+0x68>)
 8000816:	0092      	lsls	r2, r2, #2
 8000818:	58d3      	ldr	r3, [r2, r3]
 800081a:	187a      	adds	r2, r7, r1
 800081c:	0011      	movs	r1, r2
 800081e:	0018      	movs	r0, r3
 8000820:	f000 f9de 	bl	8000be0 <HAL_GPIO_Init>
}
 8000824:	46c0      	nop			; (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	b008      	add	sp, #32
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40021000 	.word	0x40021000
 8000830:	20000018 	.word	0x20000018

08000834 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED4
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	0002      	movs	r2, r0
 800083c:	1dfb      	adds	r3, r7, #7
 800083e:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 8000840:	1dfb      	adds	r3, r7, #7
 8000842:	781a      	ldrb	r2, [r3, #0]
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <BSP_LED_On+0x28>)
 8000846:	0092      	lsls	r2, r2, #2
 8000848:	58d3      	ldr	r3, [r2, r3]
 800084a:	2120      	movs	r1, #32
 800084c:	2201      	movs	r2, #1
 800084e:	0018      	movs	r0, r3
 8000850:	f000 fb2a 	bl	8000ea8 <HAL_GPIO_WritePin>
}
 8000854:	46c0      	nop			; (mov r8, r8)
 8000856:	46bd      	mov	sp, r7
 8000858:	b002      	add	sp, #8
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000018 	.word	0x20000018

08000860 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *     @arg LED4
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	0002      	movs	r2, r0
 8000868:	1dfb      	adds	r3, r7, #7
 800086a:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800086c:	1dfb      	adds	r3, r7, #7
 800086e:	781a      	ldrb	r2, [r3, #0]
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <BSP_LED_Toggle+0x28>)
 8000872:	0092      	lsls	r2, r2, #2
 8000874:	58d3      	ldr	r3, [r2, r3]
 8000876:	2220      	movs	r2, #32
 8000878:	0011      	movs	r1, r2
 800087a:	0018      	movs	r0, r3
 800087c:	f000 fb31 	bl	8000ee2 <HAL_GPIO_TogglePin>
}
 8000880:	46c0      	nop			; (mov r8, r8)
 8000882:	46bd      	mov	sp, r7
 8000884:	b002      	add	sp, #8
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000018 	.word	0x20000018

0800088c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000890:	4b03      	ldr	r3, [pc, #12]	; (80008a0 <SystemInit+0x14>)
 8000892:	2280      	movs	r2, #128	; 0x80
 8000894:	0512      	lsls	r2, r2, #20
 8000896:	609a      	str	r2, [r3, #8]
#endif
}
 8000898:	46c0      	nop			; (mov r8, r8)
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	e000ed00 	.word	0xe000ed00

080008a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008aa:	1dfb      	adds	r3, r7, #7
 80008ac:	2200      	movs	r2, #0
 80008ae:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008b0:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <HAL_Init+0x3c>)
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <HAL_Init+0x3c>)
 80008b6:	2180      	movs	r1, #128	; 0x80
 80008b8:	0049      	lsls	r1, r1, #1
 80008ba:	430a      	orrs	r2, r1
 80008bc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008be:	2000      	movs	r0, #0
 80008c0:	f000 f810 	bl	80008e4 <HAL_InitTick>
 80008c4:	1e03      	subs	r3, r0, #0
 80008c6:	d003      	beq.n	80008d0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80008c8:	1dfb      	adds	r3, r7, #7
 80008ca:	2201      	movs	r2, #1
 80008cc:	701a      	strb	r2, [r3, #0]
 80008ce:	e001      	b.n	80008d4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80008d0:	f7ff fe70 	bl	80005b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008d4:	1dfb      	adds	r3, r7, #7
 80008d6:	781b      	ldrb	r3, [r3, #0]
}
 80008d8:	0018      	movs	r0, r3
 80008da:	46bd      	mov	sp, r7
 80008dc:	b002      	add	sp, #8
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40022000 	.word	0x40022000

080008e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e4:	b590      	push	{r4, r7, lr}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008ec:	230f      	movs	r3, #15
 80008ee:	18fb      	adds	r3, r7, r3
 80008f0:	2200      	movs	r2, #0
 80008f2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80008f4:	4b1d      	ldr	r3, [pc, #116]	; (800096c <HAL_InitTick+0x88>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d02b      	beq.n	8000954 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80008fc:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <HAL_InitTick+0x8c>)
 80008fe:	681c      	ldr	r4, [r3, #0]
 8000900:	4b1a      	ldr	r3, [pc, #104]	; (800096c <HAL_InitTick+0x88>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	0019      	movs	r1, r3
 8000906:	23fa      	movs	r3, #250	; 0xfa
 8000908:	0098      	lsls	r0, r3, #2
 800090a:	f7ff fc05 	bl	8000118 <__udivsi3>
 800090e:	0003      	movs	r3, r0
 8000910:	0019      	movs	r1, r3
 8000912:	0020      	movs	r0, r4
 8000914:	f7ff fc00 	bl	8000118 <__udivsi3>
 8000918:	0003      	movs	r3, r0
 800091a:	0018      	movs	r0, r3
 800091c:	f000 f953 	bl	8000bc6 <HAL_SYSTICK_Config>
 8000920:	1e03      	subs	r3, r0, #0
 8000922:	d112      	bne.n	800094a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2b03      	cmp	r3, #3
 8000928:	d80a      	bhi.n	8000940 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800092a:	6879      	ldr	r1, [r7, #4]
 800092c:	2301      	movs	r3, #1
 800092e:	425b      	negs	r3, r3
 8000930:	2200      	movs	r2, #0
 8000932:	0018      	movs	r0, r3
 8000934:	f000 f922 	bl	8000b7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000938:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <HAL_InitTick+0x90>)
 800093a:	687a      	ldr	r2, [r7, #4]
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	e00d      	b.n	800095c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000940:	230f      	movs	r3, #15
 8000942:	18fb      	adds	r3, r7, r3
 8000944:	2201      	movs	r2, #1
 8000946:	701a      	strb	r2, [r3, #0]
 8000948:	e008      	b.n	800095c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800094a:	230f      	movs	r3, #15
 800094c:	18fb      	adds	r3, r7, r3
 800094e:	2201      	movs	r2, #1
 8000950:	701a      	strb	r2, [r3, #0]
 8000952:	e003      	b.n	800095c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000954:	230f      	movs	r3, #15
 8000956:	18fb      	adds	r3, r7, r3
 8000958:	2201      	movs	r2, #1
 800095a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800095c:	230f      	movs	r3, #15
 800095e:	18fb      	adds	r3, r7, r3
 8000960:	781b      	ldrb	r3, [r3, #0]
}
 8000962:	0018      	movs	r0, r3
 8000964:	46bd      	mov	sp, r7
 8000966:	b005      	add	sp, #20
 8000968:	bd90      	pop	{r4, r7, pc}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	20000024 	.word	0x20000024
 8000970:	2000001c 	.word	0x2000001c
 8000974:	20000020 	.word	0x20000020

08000978 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <HAL_IncTick+0x1c>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	001a      	movs	r2, r3
 8000982:	4b05      	ldr	r3, [pc, #20]	; (8000998 <HAL_IncTick+0x20>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	18d2      	adds	r2, r2, r3
 8000988:	4b03      	ldr	r3, [pc, #12]	; (8000998 <HAL_IncTick+0x20>)
 800098a:	601a      	str	r2, [r3, #0]
}
 800098c:	46c0      	nop			; (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	20000024 	.word	0x20000024
 8000998:	200000dc 	.word	0x200000dc

0800099c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  return uwTick;
 80009a0:	4b02      	ldr	r3, [pc, #8]	; (80009ac <HAL_GetTick+0x10>)
 80009a2:	681b      	ldr	r3, [r3, #0]
}
 80009a4:	0018      	movs	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	200000dc 	.word	0x200000dc

080009b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009b8:	f7ff fff0 	bl	800099c <HAL_GetTick>
 80009bc:	0003      	movs	r3, r0
 80009be:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	3301      	adds	r3, #1
 80009c8:	d005      	beq.n	80009d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ca:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <HAL_Delay+0x44>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	001a      	movs	r2, r3
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	189b      	adds	r3, r3, r2
 80009d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	f7ff ffe0 	bl	800099c <HAL_GetTick>
 80009dc:	0002      	movs	r2, r0
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	68fa      	ldr	r2, [r7, #12]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d8f7      	bhi.n	80009d8 <HAL_Delay+0x28>
  {
  }
}
 80009e8:	46c0      	nop			; (mov r8, r8)
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	b004      	add	sp, #16
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	20000024 	.word	0x20000024

080009f8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a06      	ldr	r2, [pc, #24]	; (8000a20 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000a06:	4013      	ands	r3, r2
 8000a08:	0019      	movs	r1, r3
 8000a0a:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000a0c:	687a      	ldr	r2, [r7, #4]
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	601a      	str	r2, [r3, #0]
}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	46bd      	mov	sp, r7
 8000a16:	b002      	add	sp, #8
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	40010000 	.word	0x40010000
 8000a20:	fffff9ff 	.word	0xfffff9ff

08000a24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	0002      	movs	r2, r0
 8000a2c:	1dfb      	adds	r3, r7, #7
 8000a2e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a30:	1dfb      	adds	r3, r7, #7
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b7f      	cmp	r3, #127	; 0x7f
 8000a36:	d809      	bhi.n	8000a4c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a38:	1dfb      	adds	r3, r7, #7
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	001a      	movs	r2, r3
 8000a3e:	231f      	movs	r3, #31
 8000a40:	401a      	ands	r2, r3
 8000a42:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <__NVIC_EnableIRQ+0x30>)
 8000a44:	2101      	movs	r1, #1
 8000a46:	4091      	lsls	r1, r2
 8000a48:	000a      	movs	r2, r1
 8000a4a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000a4c:	46c0      	nop			; (mov r8, r8)
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	b002      	add	sp, #8
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	e000e100 	.word	0xe000e100

08000a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a58:	b590      	push	{r4, r7, lr}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	0002      	movs	r2, r0
 8000a60:	6039      	str	r1, [r7, #0]
 8000a62:	1dfb      	adds	r3, r7, #7
 8000a64:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a66:	1dfb      	adds	r3, r7, #7
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b7f      	cmp	r3, #127	; 0x7f
 8000a6c:	d828      	bhi.n	8000ac0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a6e:	4a2f      	ldr	r2, [pc, #188]	; (8000b2c <__NVIC_SetPriority+0xd4>)
 8000a70:	1dfb      	adds	r3, r7, #7
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	b25b      	sxtb	r3, r3
 8000a76:	089b      	lsrs	r3, r3, #2
 8000a78:	33c0      	adds	r3, #192	; 0xc0
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	589b      	ldr	r3, [r3, r2]
 8000a7e:	1dfa      	adds	r2, r7, #7
 8000a80:	7812      	ldrb	r2, [r2, #0]
 8000a82:	0011      	movs	r1, r2
 8000a84:	2203      	movs	r2, #3
 8000a86:	400a      	ands	r2, r1
 8000a88:	00d2      	lsls	r2, r2, #3
 8000a8a:	21ff      	movs	r1, #255	; 0xff
 8000a8c:	4091      	lsls	r1, r2
 8000a8e:	000a      	movs	r2, r1
 8000a90:	43d2      	mvns	r2, r2
 8000a92:	401a      	ands	r2, r3
 8000a94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	019b      	lsls	r3, r3, #6
 8000a9a:	22ff      	movs	r2, #255	; 0xff
 8000a9c:	401a      	ands	r2, r3
 8000a9e:	1dfb      	adds	r3, r7, #7
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	4003      	ands	r3, r0
 8000aa8:	00db      	lsls	r3, r3, #3
 8000aaa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aac:	481f      	ldr	r0, [pc, #124]	; (8000b2c <__NVIC_SetPriority+0xd4>)
 8000aae:	1dfb      	adds	r3, r7, #7
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	b25b      	sxtb	r3, r3
 8000ab4:	089b      	lsrs	r3, r3, #2
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	33c0      	adds	r3, #192	; 0xc0
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000abe:	e031      	b.n	8000b24 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ac0:	4a1b      	ldr	r2, [pc, #108]	; (8000b30 <__NVIC_SetPriority+0xd8>)
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	0019      	movs	r1, r3
 8000ac8:	230f      	movs	r3, #15
 8000aca:	400b      	ands	r3, r1
 8000acc:	3b08      	subs	r3, #8
 8000ace:	089b      	lsrs	r3, r3, #2
 8000ad0:	3306      	adds	r3, #6
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	18d3      	adds	r3, r2, r3
 8000ad6:	3304      	adds	r3, #4
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	1dfa      	adds	r2, r7, #7
 8000adc:	7812      	ldrb	r2, [r2, #0]
 8000ade:	0011      	movs	r1, r2
 8000ae0:	2203      	movs	r2, #3
 8000ae2:	400a      	ands	r2, r1
 8000ae4:	00d2      	lsls	r2, r2, #3
 8000ae6:	21ff      	movs	r1, #255	; 0xff
 8000ae8:	4091      	lsls	r1, r2
 8000aea:	000a      	movs	r2, r1
 8000aec:	43d2      	mvns	r2, r2
 8000aee:	401a      	ands	r2, r3
 8000af0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	019b      	lsls	r3, r3, #6
 8000af6:	22ff      	movs	r2, #255	; 0xff
 8000af8:	401a      	ands	r2, r3
 8000afa:	1dfb      	adds	r3, r7, #7
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	0018      	movs	r0, r3
 8000b00:	2303      	movs	r3, #3
 8000b02:	4003      	ands	r3, r0
 8000b04:	00db      	lsls	r3, r3, #3
 8000b06:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b08:	4809      	ldr	r0, [pc, #36]	; (8000b30 <__NVIC_SetPriority+0xd8>)
 8000b0a:	1dfb      	adds	r3, r7, #7
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	001c      	movs	r4, r3
 8000b10:	230f      	movs	r3, #15
 8000b12:	4023      	ands	r3, r4
 8000b14:	3b08      	subs	r3, #8
 8000b16:	089b      	lsrs	r3, r3, #2
 8000b18:	430a      	orrs	r2, r1
 8000b1a:	3306      	adds	r3, #6
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	18c3      	adds	r3, r0, r3
 8000b20:	3304      	adds	r3, #4
 8000b22:	601a      	str	r2, [r3, #0]
}
 8000b24:	46c0      	nop			; (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	b003      	add	sp, #12
 8000b2a:	bd90      	pop	{r4, r7, pc}
 8000b2c:	e000e100 	.word	0xe000e100
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	1e5a      	subs	r2, r3, #1
 8000b40:	2380      	movs	r3, #128	; 0x80
 8000b42:	045b      	lsls	r3, r3, #17
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d301      	bcc.n	8000b4c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e010      	b.n	8000b6e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <SysTick_Config+0x44>)
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	3a01      	subs	r2, #1
 8000b52:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b54:	2301      	movs	r3, #1
 8000b56:	425b      	negs	r3, r3
 8000b58:	2103      	movs	r1, #3
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f7ff ff7c 	bl	8000a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b60:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <SysTick_Config+0x44>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b66:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <SysTick_Config+0x44>)
 8000b68:	2207      	movs	r2, #7
 8000b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	0018      	movs	r0, r3
 8000b70:	46bd      	mov	sp, r7
 8000b72:	b002      	add	sp, #8
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	e000e010 	.word	0xe000e010

08000b7c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60b9      	str	r1, [r7, #8]
 8000b84:	607a      	str	r2, [r7, #4]
 8000b86:	210f      	movs	r1, #15
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	1c02      	adds	r2, r0, #0
 8000b8c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	b25b      	sxtb	r3, r3
 8000b96:	0011      	movs	r1, r2
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f7ff ff5d 	bl	8000a58 <__NVIC_SetPriority>
}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b004      	add	sp, #16
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b082      	sub	sp, #8
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	0002      	movs	r2, r0
 8000bae:	1dfb      	adds	r3, r7, #7
 8000bb0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bb2:	1dfb      	adds	r3, r7, #7
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	b25b      	sxtb	r3, r3
 8000bb8:	0018      	movs	r0, r3
 8000bba:	f7ff ff33 	bl	8000a24 <__NVIC_EnableIRQ>
}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	b002      	add	sp, #8
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f7ff ffaf 	bl	8000b34 <SysTick_Config>
 8000bd6:	0003      	movs	r3, r0
}
 8000bd8:	0018      	movs	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	b002      	add	sp, #8
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bee:	e147      	b.n	8000e80 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	697a      	ldr	r2, [r7, #20]
 8000bf8:	4091      	lsls	r1, r2
 8000bfa:	000a      	movs	r2, r1
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d100      	bne.n	8000c08 <HAL_GPIO_Init+0x28>
 8000c06:	e138      	b.n	8000e7a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	4013      	ands	r3, r2
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d005      	beq.n	8000c20 <HAL_GPIO_Init+0x40>
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	2203      	movs	r2, #3
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	d130      	bne.n	8000c82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	2203      	movs	r2, #3
 8000c2c:	409a      	lsls	r2, r3
 8000c2e:	0013      	movs	r3, r2
 8000c30:	43da      	mvns	r2, r3
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	4013      	ands	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	68da      	ldr	r2, [r3, #12]
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	409a      	lsls	r2, r3
 8000c42:	0013      	movs	r3, r2
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c56:	2201      	movs	r2, #1
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	409a      	lsls	r2, r3
 8000c5c:	0013      	movs	r3, r2
 8000c5e:	43da      	mvns	r2, r3
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	4013      	ands	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	091b      	lsrs	r3, r3, #4
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	401a      	ands	r2, r3
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	409a      	lsls	r2, r3
 8000c74:	0013      	movs	r3, r2
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	2203      	movs	r2, #3
 8000c88:	4013      	ands	r3, r2
 8000c8a:	2b03      	cmp	r3, #3
 8000c8c:	d017      	beq.n	8000cbe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	68db      	ldr	r3, [r3, #12]
 8000c92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	2203      	movs	r2, #3
 8000c9a:	409a      	lsls	r2, r3
 8000c9c:	0013      	movs	r3, r2
 8000c9e:	43da      	mvns	r2, r3
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	689a      	ldr	r2, [r3, #8]
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	409a      	lsls	r2, r3
 8000cb0:	0013      	movs	r3, r2
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	2203      	movs	r2, #3
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d123      	bne.n	8000d12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	08da      	lsrs	r2, r3, #3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	3208      	adds	r2, #8
 8000cd2:	0092      	lsls	r2, r2, #2
 8000cd4:	58d3      	ldr	r3, [r2, r3]
 8000cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	2207      	movs	r2, #7
 8000cdc:	4013      	ands	r3, r2
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	220f      	movs	r2, #15
 8000ce2:	409a      	lsls	r2, r3
 8000ce4:	0013      	movs	r3, r2
 8000ce6:	43da      	mvns	r2, r3
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	4013      	ands	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	691a      	ldr	r2, [r3, #16]
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	2107      	movs	r1, #7
 8000cf6:	400b      	ands	r3, r1
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	409a      	lsls	r2, r3
 8000cfc:	0013      	movs	r3, r2
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	08da      	lsrs	r2, r3, #3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3208      	adds	r2, #8
 8000d0c:	0092      	lsls	r2, r2, #2
 8000d0e:	6939      	ldr	r1, [r7, #16]
 8000d10:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	409a      	lsls	r2, r3
 8000d20:	0013      	movs	r3, r2
 8000d22:	43da      	mvns	r2, r3
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	4013      	ands	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	2203      	movs	r2, #3
 8000d30:	401a      	ands	r2, r3
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	409a      	lsls	r2, r3
 8000d38:	0013      	movs	r3, r2
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685a      	ldr	r2, [r3, #4]
 8000d4a:	23c0      	movs	r3, #192	; 0xc0
 8000d4c:	029b      	lsls	r3, r3, #10
 8000d4e:	4013      	ands	r3, r2
 8000d50:	d100      	bne.n	8000d54 <HAL_GPIO_Init+0x174>
 8000d52:	e092      	b.n	8000e7a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000d54:	4a50      	ldr	r2, [pc, #320]	; (8000e98 <HAL_GPIO_Init+0x2b8>)
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	089b      	lsrs	r3, r3, #2
 8000d5a:	3318      	adds	r3, #24
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	589b      	ldr	r3, [r3, r2]
 8000d60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	2203      	movs	r2, #3
 8000d66:	4013      	ands	r3, r2
 8000d68:	00db      	lsls	r3, r3, #3
 8000d6a:	220f      	movs	r2, #15
 8000d6c:	409a      	lsls	r2, r3
 8000d6e:	0013      	movs	r3, r2
 8000d70:	43da      	mvns	r2, r3
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	4013      	ands	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	23a0      	movs	r3, #160	; 0xa0
 8000d7c:	05db      	lsls	r3, r3, #23
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d013      	beq.n	8000daa <HAL_GPIO_Init+0x1ca>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a45      	ldr	r2, [pc, #276]	; (8000e9c <HAL_GPIO_Init+0x2bc>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d00d      	beq.n	8000da6 <HAL_GPIO_Init+0x1c6>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a44      	ldr	r2, [pc, #272]	; (8000ea0 <HAL_GPIO_Init+0x2c0>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d007      	beq.n	8000da2 <HAL_GPIO_Init+0x1c2>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a43      	ldr	r2, [pc, #268]	; (8000ea4 <HAL_GPIO_Init+0x2c4>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d101      	bne.n	8000d9e <HAL_GPIO_Init+0x1be>
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	e006      	b.n	8000dac <HAL_GPIO_Init+0x1cc>
 8000d9e:	2305      	movs	r3, #5
 8000da0:	e004      	b.n	8000dac <HAL_GPIO_Init+0x1cc>
 8000da2:	2302      	movs	r3, #2
 8000da4:	e002      	b.n	8000dac <HAL_GPIO_Init+0x1cc>
 8000da6:	2301      	movs	r3, #1
 8000da8:	e000      	b.n	8000dac <HAL_GPIO_Init+0x1cc>
 8000daa:	2300      	movs	r3, #0
 8000dac:	697a      	ldr	r2, [r7, #20]
 8000dae:	2103      	movs	r1, #3
 8000db0:	400a      	ands	r2, r1
 8000db2:	00d2      	lsls	r2, r2, #3
 8000db4:	4093      	lsls	r3, r2
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000dbc:	4936      	ldr	r1, [pc, #216]	; (8000e98 <HAL_GPIO_Init+0x2b8>)
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	089b      	lsrs	r3, r3, #2
 8000dc2:	3318      	adds	r3, #24
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000dca:	4b33      	ldr	r3, [pc, #204]	; (8000e98 <HAL_GPIO_Init+0x2b8>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	43da      	mvns	r2, r3
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685a      	ldr	r2, [r3, #4]
 8000dde:	2380      	movs	r3, #128	; 0x80
 8000de0:	035b      	lsls	r3, r3, #13
 8000de2:	4013      	ands	r3, r2
 8000de4:	d003      	beq.n	8000dee <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000dee:	4b2a      	ldr	r3, [pc, #168]	; (8000e98 <HAL_GPIO_Init+0x2b8>)
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000df4:	4b28      	ldr	r3, [pc, #160]	; (8000e98 <HAL_GPIO_Init+0x2b8>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	43da      	mvns	r2, r3
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	4013      	ands	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685a      	ldr	r2, [r3, #4]
 8000e08:	2380      	movs	r3, #128	; 0x80
 8000e0a:	039b      	lsls	r3, r3, #14
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	d003      	beq.n	8000e18 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e18:	4b1f      	ldr	r3, [pc, #124]	; (8000e98 <HAL_GPIO_Init+0x2b8>)
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e1e:	4a1e      	ldr	r2, [pc, #120]	; (8000e98 <HAL_GPIO_Init+0x2b8>)
 8000e20:	2384      	movs	r3, #132	; 0x84
 8000e22:	58d3      	ldr	r3, [r2, r3]
 8000e24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	43da      	mvns	r2, r3
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685a      	ldr	r2, [r3, #4]
 8000e34:	2380      	movs	r3, #128	; 0x80
 8000e36:	029b      	lsls	r3, r3, #10
 8000e38:	4013      	ands	r3, r2
 8000e3a:	d003      	beq.n	8000e44 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e44:	4914      	ldr	r1, [pc, #80]	; (8000e98 <HAL_GPIO_Init+0x2b8>)
 8000e46:	2284      	movs	r2, #132	; 0x84
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000e4c:	4a12      	ldr	r2, [pc, #72]	; (8000e98 <HAL_GPIO_Init+0x2b8>)
 8000e4e:	2380      	movs	r3, #128	; 0x80
 8000e50:	58d3      	ldr	r3, [r2, r3]
 8000e52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	43da      	mvns	r2, r3
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685a      	ldr	r2, [r3, #4]
 8000e62:	2380      	movs	r3, #128	; 0x80
 8000e64:	025b      	lsls	r3, r3, #9
 8000e66:	4013      	ands	r3, r2
 8000e68:	d003      	beq.n	8000e72 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e72:	4909      	ldr	r1, [pc, #36]	; (8000e98 <HAL_GPIO_Init+0x2b8>)
 8000e74:	2280      	movs	r2, #128	; 0x80
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	40da      	lsrs	r2, r3
 8000e88:	1e13      	subs	r3, r2, #0
 8000e8a:	d000      	beq.n	8000e8e <HAL_GPIO_Init+0x2ae>
 8000e8c:	e6b0      	b.n	8000bf0 <HAL_GPIO_Init+0x10>
  }
}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	46c0      	nop			; (mov r8, r8)
 8000e92:	46bd      	mov	sp, r7
 8000e94:	b006      	add	sp, #24
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40021800 	.word	0x40021800
 8000e9c:	50000400 	.word	0x50000400
 8000ea0:	50000800 	.word	0x50000800
 8000ea4:	50000c00 	.word	0x50000c00

08000ea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	0008      	movs	r0, r1
 8000eb2:	0011      	movs	r1, r2
 8000eb4:	1cbb      	adds	r3, r7, #2
 8000eb6:	1c02      	adds	r2, r0, #0
 8000eb8:	801a      	strh	r2, [r3, #0]
 8000eba:	1c7b      	adds	r3, r7, #1
 8000ebc:	1c0a      	adds	r2, r1, #0
 8000ebe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ec0:	1c7b      	adds	r3, r7, #1
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d004      	beq.n	8000ed2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ec8:	1cbb      	adds	r3, r7, #2
 8000eca:	881a      	ldrh	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ed0:	e003      	b.n	8000eda <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ed2:	1cbb      	adds	r3, r7, #2
 8000ed4:	881a      	ldrh	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	46bd      	mov	sp, r7
 8000ede:	b002      	add	sp, #8
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b084      	sub	sp, #16
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
 8000eea:	000a      	movs	r2, r1
 8000eec:	1cbb      	adds	r3, r7, #2
 8000eee:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	695b      	ldr	r3, [r3, #20]
 8000ef4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ef6:	1cbb      	adds	r3, r7, #2
 8000ef8:	881b      	ldrh	r3, [r3, #0]
 8000efa:	68fa      	ldr	r2, [r7, #12]
 8000efc:	4013      	ands	r3, r2
 8000efe:	041a      	lsls	r2, r3, #16
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	43db      	mvns	r3, r3
 8000f04:	1cb9      	adds	r1, r7, #2
 8000f06:	8809      	ldrh	r1, [r1, #0]
 8000f08:	400b      	ands	r3, r1
 8000f0a:	431a      	orrs	r2, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	619a      	str	r2, [r3, #24]
}
 8000f10:	46c0      	nop			; (mov r8, r8)
 8000f12:	46bd      	mov	sp, r7
 8000f14:	b004      	add	sp, #16
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000f1c:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <HAL_PWR_EnableBkUpAccess+0x18>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	4b03      	ldr	r3, [pc, #12]	; (8000f30 <HAL_PWR_EnableBkUpAccess+0x18>)
 8000f22:	2180      	movs	r1, #128	; 0x80
 8000f24:	0049      	lsls	r1, r1, #1
 8000f26:	430a      	orrs	r2, r1
 8000f28:	601a      	str	r2, [r3, #0]
}
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40007000 	.word	0x40007000

08000f34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b088      	sub	sp, #32
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d101      	bne.n	8000f46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e2fe      	b.n	8001544 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	d100      	bne.n	8000f52 <HAL_RCC_OscConfig+0x1e>
 8000f50:	e07c      	b.n	800104c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f52:	4bc3      	ldr	r3, [pc, #780]	; (8001260 <HAL_RCC_OscConfig+0x32c>)
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	2238      	movs	r2, #56	; 0x38
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f5c:	4bc0      	ldr	r3, [pc, #768]	; (8001260 <HAL_RCC_OscConfig+0x32c>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	2203      	movs	r2, #3
 8000f62:	4013      	ands	r3, r2
 8000f64:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	2b10      	cmp	r3, #16
 8000f6a:	d102      	bne.n	8000f72 <HAL_RCC_OscConfig+0x3e>
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	2b03      	cmp	r3, #3
 8000f70:	d002      	beq.n	8000f78 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	2b08      	cmp	r3, #8
 8000f76:	d10b      	bne.n	8000f90 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f78:	4bb9      	ldr	r3, [pc, #740]	; (8001260 <HAL_RCC_OscConfig+0x32c>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	2380      	movs	r3, #128	; 0x80
 8000f7e:	029b      	lsls	r3, r3, #10
 8000f80:	4013      	ands	r3, r2
 8000f82:	d062      	beq.n	800104a <HAL_RCC_OscConfig+0x116>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d15e      	bne.n	800104a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e2d9      	b.n	8001544 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	685a      	ldr	r2, [r3, #4]
 8000f94:	2380      	movs	r3, #128	; 0x80
 8000f96:	025b      	lsls	r3, r3, #9
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d107      	bne.n	8000fac <HAL_RCC_OscConfig+0x78>
 8000f9c:	4bb0      	ldr	r3, [pc, #704]	; (8001260 <HAL_RCC_OscConfig+0x32c>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4baf      	ldr	r3, [pc, #700]	; (8001260 <HAL_RCC_OscConfig+0x32c>)
 8000fa2:	2180      	movs	r1, #128	; 0x80
 8000fa4:	0249      	lsls	r1, r1, #9
 8000fa6:	430a      	orrs	r2, r1
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	e020      	b.n	8000fee <HAL_RCC_OscConfig+0xba>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685a      	ldr	r2, [r3, #4]
 8000fb0:	23a0      	movs	r3, #160	; 0xa0
 8000fb2:	02db      	lsls	r3, r3, #11
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d10e      	bne.n	8000fd6 <HAL_RCC_OscConfig+0xa2>
 8000fb8:	4ba9      	ldr	r3, [pc, #676]	; (8001260 <HAL_RCC_OscConfig+0x32c>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4ba8      	ldr	r3, [pc, #672]	; (8001260 <HAL_RCC_OscConfig+0x32c>)
 8000fbe:	2180      	movs	r1, #128	; 0x80
 8000fc0:	02c9      	lsls	r1, r1, #11
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	4ba6      	ldr	r3, [pc, #664]	; (8001260 <HAL_RCC_OscConfig+0x32c>)
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	4ba5      	ldr	r3, [pc, #660]	; (8001260 <HAL_RCC_OscConfig+0x32c>)
 8000fcc:	2180      	movs	r1, #128	; 0x80
 8000fce:	0249      	lsls	r1, r1, #9
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	e00b      	b.n	8000fee <HAL_RCC_OscConfig+0xba>
 8000fd6:	4ba2      	ldr	r3, [pc, #648]	; (8001260 <HAL_RCC_OscConfig+0x32c>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	4ba1      	ldr	r3, [pc, #644]	; (8001260 <HAL_RCC_OscConfig+0x32c>)
 8000fdc:	49a1      	ldr	r1, [pc, #644]	; (8001264 <HAL_RCC_OscConfig+0x330>)
 8000fde:	400a      	ands	r2, r1
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	4b9f      	ldr	r3, [pc, #636]	; (8001260 <HAL_RCC_OscConfig+0x32c>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	4b9e      	ldr	r3, [pc, #632]	; (8001260 <HAL_RCC_OscConfig+0x32c>)
 8000fe8:	499f      	ldr	r1, [pc, #636]	; (8001268 <HAL_RCC_OscConfig+0x334>)
 8000fea:	400a      	ands	r2, r1
 8000fec:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d014      	beq.n	8001020 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ff6:	f7ff fcd1 	bl	800099c <HAL_GetTick>
 8000ffa:	0003      	movs	r3, r0
 8000ffc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ffe:	e008      	b.n	8001012 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001000:	f7ff fccc 	bl	800099c <HAL_GetTick>
 8001004:	0002      	movs	r2, r0
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b64      	cmp	r3, #100	; 0x64
 800100c:	d901      	bls.n	8001012 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e298      	b.n	8001544 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001012:	4b93      	ldr	r3, [pc, #588]	; (8001260 <HAL_RCC_OscConfig+0x32c>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	2380      	movs	r3, #128	; 0x80
 8001018:	029b      	lsls	r3, r3, #10
 800101a:	4013      	ands	r3, r2
 800101c:	d0f0      	beq.n	8001000 <HAL_RCC_OscConfig+0xcc>
 800101e:	e015      	b.n	800104c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001020:	f7ff fcbc 	bl	800099c <HAL_GetTick>
 8001024:	0003      	movs	r3, r0
 8001026:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001028:	e008      	b.n	800103c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800102a:	f7ff fcb7 	bl	800099c <HAL_GetTick>
 800102e:	0002      	movs	r2, r0
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	2b64      	cmp	r3, #100	; 0x64
 8001036:	d901      	bls.n	800103c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	e283      	b.n	8001544 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800103c:	4b88      	ldr	r3, [pc, #544]	; (8001260 <HAL_RCC_OscConfig+0x32c>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	2380      	movs	r3, #128	; 0x80
 8001042:	029b      	lsls	r3, r3, #10
 8001044:	4013      	ands	r3, r2
 8001046:	d1f0      	bne.n	800102a <HAL_RCC_OscConfig+0xf6>
 8001048:	e000      	b.n	800104c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800104a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2202      	movs	r2, #2
 8001052:	4013      	ands	r3, r2
 8001054:	d100      	bne.n	8001058 <HAL_RCC_OscConfig+0x124>
 8001056:	e099      	b.n	800118c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001058:	4b81      	ldr	r3, [pc, #516]	; (8001260 <HAL_RCC_OscConfig+0x32c>)
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	2238      	movs	r2, #56	; 0x38
 800105e:	4013      	ands	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001062:	4b7f      	ldr	r3, [pc, #508]	; (8001260 <HAL_RCC_OscConfig+0x32c>)
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	2203      	movs	r2, #3
 8001068:	4013      	ands	r3, r2
 800106a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	2b10      	cmp	r3, #16
 8001070:	d102      	bne.n	8001078 <HAL_RCC_OscConfig+0x144>
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	2b02      	cmp	r3, #2
 8001076:	d002      	beq.n	800107e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d135      	bne.n	80010ea <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800107e:	4b78      	ldr	r3, [pc, #480]	; (8001260 <HAL_RCC_OscConfig+0x32c>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	2380      	movs	r3, #128	; 0x80
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	4013      	ands	r3, r2
 8001088:	d005      	beq.n	8001096 <HAL_RCC_OscConfig+0x162>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d101      	bne.n	8001096 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e256      	b.n	8001544 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001096:	4b72      	ldr	r3, [pc, #456]	; (8001260 <HAL_RCC_OscConfig+0x32c>)
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	4a74      	ldr	r2, [pc, #464]	; (800126c <HAL_RCC_OscConfig+0x338>)
 800109c:	4013      	ands	r3, r2
 800109e:	0019      	movs	r1, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	695b      	ldr	r3, [r3, #20]
 80010a4:	021a      	lsls	r2, r3, #8
 80010a6:	4b6e      	ldr	r3, [pc, #440]	; (8001260 <HAL_RCC_OscConfig+0x32c>)
 80010a8:	430a      	orrs	r2, r1
 80010aa:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d112      	bne.n	80010d8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80010b2:	4b6b      	ldr	r3, [pc, #428]	; (8001260 <HAL_RCC_OscConfig+0x32c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a6e      	ldr	r2, [pc, #440]	; (8001270 <HAL_RCC_OscConfig+0x33c>)
 80010b8:	4013      	ands	r3, r2
 80010ba:	0019      	movs	r1, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	691a      	ldr	r2, [r3, #16]
 80010c0:	4b67      	ldr	r3, [pc, #412]	; (8001260 <HAL_RCC_OscConfig+0x32c>)
 80010c2:	430a      	orrs	r2, r1
 80010c4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80010c6:	4b66      	ldr	r3, [pc, #408]	; (8001260 <HAL_RCC_OscConfig+0x32c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	0adb      	lsrs	r3, r3, #11
 80010cc:	2207      	movs	r2, #7
 80010ce:	4013      	ands	r3, r2
 80010d0:	4a68      	ldr	r2, [pc, #416]	; (8001274 <HAL_RCC_OscConfig+0x340>)
 80010d2:	40da      	lsrs	r2, r3
 80010d4:	4b68      	ldr	r3, [pc, #416]	; (8001278 <HAL_RCC_OscConfig+0x344>)
 80010d6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80010d8:	4b68      	ldr	r3, [pc, #416]	; (800127c <HAL_RCC_OscConfig+0x348>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	0018      	movs	r0, r3
 80010de:	f7ff fc01 	bl	80008e4 <HAL_InitTick>
 80010e2:	1e03      	subs	r3, r0, #0
 80010e4:	d051      	beq.n	800118a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e22c      	b.n	8001544 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d030      	beq.n	8001154 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80010f2:	4b5b      	ldr	r3, [pc, #364]	; (8001260 <HAL_RCC_OscConfig+0x32c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a5e      	ldr	r2, [pc, #376]	; (8001270 <HAL_RCC_OscConfig+0x33c>)
 80010f8:	4013      	ands	r3, r2
 80010fa:	0019      	movs	r1, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	691a      	ldr	r2, [r3, #16]
 8001100:	4b57      	ldr	r3, [pc, #348]	; (8001260 <HAL_RCC_OscConfig+0x32c>)
 8001102:	430a      	orrs	r2, r1
 8001104:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001106:	4b56      	ldr	r3, [pc, #344]	; (8001260 <HAL_RCC_OscConfig+0x32c>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	4b55      	ldr	r3, [pc, #340]	; (8001260 <HAL_RCC_OscConfig+0x32c>)
 800110c:	2180      	movs	r1, #128	; 0x80
 800110e:	0049      	lsls	r1, r1, #1
 8001110:	430a      	orrs	r2, r1
 8001112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001114:	f7ff fc42 	bl	800099c <HAL_GetTick>
 8001118:	0003      	movs	r3, r0
 800111a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800111c:	e008      	b.n	8001130 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800111e:	f7ff fc3d 	bl	800099c <HAL_GetTick>
 8001122:	0002      	movs	r2, r0
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d901      	bls.n	8001130 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800112c:	2303      	movs	r3, #3
 800112e:	e209      	b.n	8001544 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001130:	4b4b      	ldr	r3, [pc, #300]	; (8001260 <HAL_RCC_OscConfig+0x32c>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	2380      	movs	r3, #128	; 0x80
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	4013      	ands	r3, r2
 800113a:	d0f0      	beq.n	800111e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800113c:	4b48      	ldr	r3, [pc, #288]	; (8001260 <HAL_RCC_OscConfig+0x32c>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	4a4a      	ldr	r2, [pc, #296]	; (800126c <HAL_RCC_OscConfig+0x338>)
 8001142:	4013      	ands	r3, r2
 8001144:	0019      	movs	r1, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	021a      	lsls	r2, r3, #8
 800114c:	4b44      	ldr	r3, [pc, #272]	; (8001260 <HAL_RCC_OscConfig+0x32c>)
 800114e:	430a      	orrs	r2, r1
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	e01b      	b.n	800118c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001154:	4b42      	ldr	r3, [pc, #264]	; (8001260 <HAL_RCC_OscConfig+0x32c>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4b41      	ldr	r3, [pc, #260]	; (8001260 <HAL_RCC_OscConfig+0x32c>)
 800115a:	4949      	ldr	r1, [pc, #292]	; (8001280 <HAL_RCC_OscConfig+0x34c>)
 800115c:	400a      	ands	r2, r1
 800115e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001160:	f7ff fc1c 	bl	800099c <HAL_GetTick>
 8001164:	0003      	movs	r3, r0
 8001166:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001168:	e008      	b.n	800117c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800116a:	f7ff fc17 	bl	800099c <HAL_GetTick>
 800116e:	0002      	movs	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e1e3      	b.n	8001544 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800117c:	4b38      	ldr	r3, [pc, #224]	; (8001260 <HAL_RCC_OscConfig+0x32c>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	2380      	movs	r3, #128	; 0x80
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	4013      	ands	r3, r2
 8001186:	d1f0      	bne.n	800116a <HAL_RCC_OscConfig+0x236>
 8001188:	e000      	b.n	800118c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800118a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2208      	movs	r2, #8
 8001192:	4013      	ands	r3, r2
 8001194:	d047      	beq.n	8001226 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001196:	4b32      	ldr	r3, [pc, #200]	; (8001260 <HAL_RCC_OscConfig+0x32c>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	2238      	movs	r2, #56	; 0x38
 800119c:	4013      	ands	r3, r2
 800119e:	2b18      	cmp	r3, #24
 80011a0:	d10a      	bne.n	80011b8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80011a2:	4b2f      	ldr	r3, [pc, #188]	; (8001260 <HAL_RCC_OscConfig+0x32c>)
 80011a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011a6:	2202      	movs	r2, #2
 80011a8:	4013      	ands	r3, r2
 80011aa:	d03c      	beq.n	8001226 <HAL_RCC_OscConfig+0x2f2>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d138      	bne.n	8001226 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e1c5      	b.n	8001544 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d019      	beq.n	80011f4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80011c0:	4b27      	ldr	r3, [pc, #156]	; (8001260 <HAL_RCC_OscConfig+0x32c>)
 80011c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011c4:	4b26      	ldr	r3, [pc, #152]	; (8001260 <HAL_RCC_OscConfig+0x32c>)
 80011c6:	2101      	movs	r1, #1
 80011c8:	430a      	orrs	r2, r1
 80011ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011cc:	f7ff fbe6 	bl	800099c <HAL_GetTick>
 80011d0:	0003      	movs	r3, r0
 80011d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011d4:	e008      	b.n	80011e8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011d6:	f7ff fbe1 	bl	800099c <HAL_GetTick>
 80011da:	0002      	movs	r2, r0
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d901      	bls.n	80011e8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80011e4:	2303      	movs	r3, #3
 80011e6:	e1ad      	b.n	8001544 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011e8:	4b1d      	ldr	r3, [pc, #116]	; (8001260 <HAL_RCC_OscConfig+0x32c>)
 80011ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ec:	2202      	movs	r2, #2
 80011ee:	4013      	ands	r3, r2
 80011f0:	d0f1      	beq.n	80011d6 <HAL_RCC_OscConfig+0x2a2>
 80011f2:	e018      	b.n	8001226 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80011f4:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <HAL_RCC_OscConfig+0x32c>)
 80011f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011f8:	4b19      	ldr	r3, [pc, #100]	; (8001260 <HAL_RCC_OscConfig+0x32c>)
 80011fa:	2101      	movs	r1, #1
 80011fc:	438a      	bics	r2, r1
 80011fe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001200:	f7ff fbcc 	bl	800099c <HAL_GetTick>
 8001204:	0003      	movs	r3, r0
 8001206:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001208:	e008      	b.n	800121c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800120a:	f7ff fbc7 	bl	800099c <HAL_GetTick>
 800120e:	0002      	movs	r2, r0
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d901      	bls.n	800121c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e193      	b.n	8001544 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800121c:	4b10      	ldr	r3, [pc, #64]	; (8001260 <HAL_RCC_OscConfig+0x32c>)
 800121e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001220:	2202      	movs	r2, #2
 8001222:	4013      	ands	r3, r2
 8001224:	d1f1      	bne.n	800120a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2204      	movs	r2, #4
 800122c:	4013      	ands	r3, r2
 800122e:	d100      	bne.n	8001232 <HAL_RCC_OscConfig+0x2fe>
 8001230:	e0c6      	b.n	80013c0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001232:	231f      	movs	r3, #31
 8001234:	18fb      	adds	r3, r7, r3
 8001236:	2200      	movs	r2, #0
 8001238:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <HAL_RCC_OscConfig+0x32c>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	2238      	movs	r2, #56	; 0x38
 8001240:	4013      	ands	r3, r2
 8001242:	2b20      	cmp	r3, #32
 8001244:	d11e      	bne.n	8001284 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001246:	4b06      	ldr	r3, [pc, #24]	; (8001260 <HAL_RCC_OscConfig+0x32c>)
 8001248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800124a:	2202      	movs	r2, #2
 800124c:	4013      	ands	r3, r2
 800124e:	d100      	bne.n	8001252 <HAL_RCC_OscConfig+0x31e>
 8001250:	e0b6      	b.n	80013c0 <HAL_RCC_OscConfig+0x48c>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d000      	beq.n	800125c <HAL_RCC_OscConfig+0x328>
 800125a:	e0b1      	b.n	80013c0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e171      	b.n	8001544 <HAL_RCC_OscConfig+0x610>
 8001260:	40021000 	.word	0x40021000
 8001264:	fffeffff 	.word	0xfffeffff
 8001268:	fffbffff 	.word	0xfffbffff
 800126c:	ffff80ff 	.word	0xffff80ff
 8001270:	ffffc7ff 	.word	0xffffc7ff
 8001274:	00f42400 	.word	0x00f42400
 8001278:	2000001c 	.word	0x2000001c
 800127c:	20000020 	.word	0x20000020
 8001280:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001284:	4bb1      	ldr	r3, [pc, #708]	; (800154c <HAL_RCC_OscConfig+0x618>)
 8001286:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001288:	2380      	movs	r3, #128	; 0x80
 800128a:	055b      	lsls	r3, r3, #21
 800128c:	4013      	ands	r3, r2
 800128e:	d101      	bne.n	8001294 <HAL_RCC_OscConfig+0x360>
 8001290:	2301      	movs	r3, #1
 8001292:	e000      	b.n	8001296 <HAL_RCC_OscConfig+0x362>
 8001294:	2300      	movs	r3, #0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d011      	beq.n	80012be <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800129a:	4bac      	ldr	r3, [pc, #688]	; (800154c <HAL_RCC_OscConfig+0x618>)
 800129c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800129e:	4bab      	ldr	r3, [pc, #684]	; (800154c <HAL_RCC_OscConfig+0x618>)
 80012a0:	2180      	movs	r1, #128	; 0x80
 80012a2:	0549      	lsls	r1, r1, #21
 80012a4:	430a      	orrs	r2, r1
 80012a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80012a8:	4ba8      	ldr	r3, [pc, #672]	; (800154c <HAL_RCC_OscConfig+0x618>)
 80012aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012ac:	2380      	movs	r3, #128	; 0x80
 80012ae:	055b      	lsls	r3, r3, #21
 80012b0:	4013      	ands	r3, r2
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80012b6:	231f      	movs	r3, #31
 80012b8:	18fb      	adds	r3, r7, r3
 80012ba:	2201      	movs	r2, #1
 80012bc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012be:	4ba4      	ldr	r3, [pc, #656]	; (8001550 <HAL_RCC_OscConfig+0x61c>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	2380      	movs	r3, #128	; 0x80
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	4013      	ands	r3, r2
 80012c8:	d11a      	bne.n	8001300 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012ca:	4ba1      	ldr	r3, [pc, #644]	; (8001550 <HAL_RCC_OscConfig+0x61c>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	4ba0      	ldr	r3, [pc, #640]	; (8001550 <HAL_RCC_OscConfig+0x61c>)
 80012d0:	2180      	movs	r1, #128	; 0x80
 80012d2:	0049      	lsls	r1, r1, #1
 80012d4:	430a      	orrs	r2, r1
 80012d6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80012d8:	f7ff fb60 	bl	800099c <HAL_GetTick>
 80012dc:	0003      	movs	r3, r0
 80012de:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012e0:	e008      	b.n	80012f4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012e2:	f7ff fb5b 	bl	800099c <HAL_GetTick>
 80012e6:	0002      	movs	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e127      	b.n	8001544 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012f4:	4b96      	ldr	r3, [pc, #600]	; (8001550 <HAL_RCC_OscConfig+0x61c>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	4013      	ands	r3, r2
 80012fe:	d0f0      	beq.n	80012e2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d106      	bne.n	8001316 <HAL_RCC_OscConfig+0x3e2>
 8001308:	4b90      	ldr	r3, [pc, #576]	; (800154c <HAL_RCC_OscConfig+0x618>)
 800130a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800130c:	4b8f      	ldr	r3, [pc, #572]	; (800154c <HAL_RCC_OscConfig+0x618>)
 800130e:	2101      	movs	r1, #1
 8001310:	430a      	orrs	r2, r1
 8001312:	65da      	str	r2, [r3, #92]	; 0x5c
 8001314:	e01c      	b.n	8001350 <HAL_RCC_OscConfig+0x41c>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	2b05      	cmp	r3, #5
 800131c:	d10c      	bne.n	8001338 <HAL_RCC_OscConfig+0x404>
 800131e:	4b8b      	ldr	r3, [pc, #556]	; (800154c <HAL_RCC_OscConfig+0x618>)
 8001320:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001322:	4b8a      	ldr	r3, [pc, #552]	; (800154c <HAL_RCC_OscConfig+0x618>)
 8001324:	2104      	movs	r1, #4
 8001326:	430a      	orrs	r2, r1
 8001328:	65da      	str	r2, [r3, #92]	; 0x5c
 800132a:	4b88      	ldr	r3, [pc, #544]	; (800154c <HAL_RCC_OscConfig+0x618>)
 800132c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800132e:	4b87      	ldr	r3, [pc, #540]	; (800154c <HAL_RCC_OscConfig+0x618>)
 8001330:	2101      	movs	r1, #1
 8001332:	430a      	orrs	r2, r1
 8001334:	65da      	str	r2, [r3, #92]	; 0x5c
 8001336:	e00b      	b.n	8001350 <HAL_RCC_OscConfig+0x41c>
 8001338:	4b84      	ldr	r3, [pc, #528]	; (800154c <HAL_RCC_OscConfig+0x618>)
 800133a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800133c:	4b83      	ldr	r3, [pc, #524]	; (800154c <HAL_RCC_OscConfig+0x618>)
 800133e:	2101      	movs	r1, #1
 8001340:	438a      	bics	r2, r1
 8001342:	65da      	str	r2, [r3, #92]	; 0x5c
 8001344:	4b81      	ldr	r3, [pc, #516]	; (800154c <HAL_RCC_OscConfig+0x618>)
 8001346:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001348:	4b80      	ldr	r3, [pc, #512]	; (800154c <HAL_RCC_OscConfig+0x618>)
 800134a:	2104      	movs	r1, #4
 800134c:	438a      	bics	r2, r1
 800134e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d014      	beq.n	8001382 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001358:	f7ff fb20 	bl	800099c <HAL_GetTick>
 800135c:	0003      	movs	r3, r0
 800135e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001360:	e009      	b.n	8001376 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001362:	f7ff fb1b 	bl	800099c <HAL_GetTick>
 8001366:	0002      	movs	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	4a79      	ldr	r2, [pc, #484]	; (8001554 <HAL_RCC_OscConfig+0x620>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e0e6      	b.n	8001544 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001376:	4b75      	ldr	r3, [pc, #468]	; (800154c <HAL_RCC_OscConfig+0x618>)
 8001378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800137a:	2202      	movs	r2, #2
 800137c:	4013      	ands	r3, r2
 800137e:	d0f0      	beq.n	8001362 <HAL_RCC_OscConfig+0x42e>
 8001380:	e013      	b.n	80013aa <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001382:	f7ff fb0b 	bl	800099c <HAL_GetTick>
 8001386:	0003      	movs	r3, r0
 8001388:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800138a:	e009      	b.n	80013a0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800138c:	f7ff fb06 	bl	800099c <HAL_GetTick>
 8001390:	0002      	movs	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	4a6f      	ldr	r2, [pc, #444]	; (8001554 <HAL_RCC_OscConfig+0x620>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e0d1      	b.n	8001544 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013a0:	4b6a      	ldr	r3, [pc, #424]	; (800154c <HAL_RCC_OscConfig+0x618>)
 80013a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013a4:	2202      	movs	r2, #2
 80013a6:	4013      	ands	r3, r2
 80013a8:	d1f0      	bne.n	800138c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80013aa:	231f      	movs	r3, #31
 80013ac:	18fb      	adds	r3, r7, r3
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d105      	bne.n	80013c0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80013b4:	4b65      	ldr	r3, [pc, #404]	; (800154c <HAL_RCC_OscConfig+0x618>)
 80013b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013b8:	4b64      	ldr	r3, [pc, #400]	; (800154c <HAL_RCC_OscConfig+0x618>)
 80013ba:	4967      	ldr	r1, [pc, #412]	; (8001558 <HAL_RCC_OscConfig+0x624>)
 80013bc:	400a      	ands	r2, r1
 80013be:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	69db      	ldr	r3, [r3, #28]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d100      	bne.n	80013ca <HAL_RCC_OscConfig+0x496>
 80013c8:	e0bb      	b.n	8001542 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013ca:	4b60      	ldr	r3, [pc, #384]	; (800154c <HAL_RCC_OscConfig+0x618>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	2238      	movs	r2, #56	; 0x38
 80013d0:	4013      	ands	r3, r2
 80013d2:	2b10      	cmp	r3, #16
 80013d4:	d100      	bne.n	80013d8 <HAL_RCC_OscConfig+0x4a4>
 80013d6:	e07b      	b.n	80014d0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	69db      	ldr	r3, [r3, #28]
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d156      	bne.n	800148e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013e0:	4b5a      	ldr	r3, [pc, #360]	; (800154c <HAL_RCC_OscConfig+0x618>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b59      	ldr	r3, [pc, #356]	; (800154c <HAL_RCC_OscConfig+0x618>)
 80013e6:	495d      	ldr	r1, [pc, #372]	; (800155c <HAL_RCC_OscConfig+0x628>)
 80013e8:	400a      	ands	r2, r1
 80013ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ec:	f7ff fad6 	bl	800099c <HAL_GetTick>
 80013f0:	0003      	movs	r3, r0
 80013f2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013f4:	e008      	b.n	8001408 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013f6:	f7ff fad1 	bl	800099c <HAL_GetTick>
 80013fa:	0002      	movs	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e09d      	b.n	8001544 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001408:	4b50      	ldr	r3, [pc, #320]	; (800154c <HAL_RCC_OscConfig+0x618>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	2380      	movs	r3, #128	; 0x80
 800140e:	049b      	lsls	r3, r3, #18
 8001410:	4013      	ands	r3, r2
 8001412:	d1f0      	bne.n	80013f6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001414:	4b4d      	ldr	r3, [pc, #308]	; (800154c <HAL_RCC_OscConfig+0x618>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	4a51      	ldr	r2, [pc, #324]	; (8001560 <HAL_RCC_OscConfig+0x62c>)
 800141a:	4013      	ands	r3, r2
 800141c:	0019      	movs	r1, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a1a      	ldr	r2, [r3, #32]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001426:	431a      	orrs	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142c:	021b      	lsls	r3, r3, #8
 800142e:	431a      	orrs	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001434:	431a      	orrs	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	431a      	orrs	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001440:	431a      	orrs	r2, r3
 8001442:	4b42      	ldr	r3, [pc, #264]	; (800154c <HAL_RCC_OscConfig+0x618>)
 8001444:	430a      	orrs	r2, r1
 8001446:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001448:	4b40      	ldr	r3, [pc, #256]	; (800154c <HAL_RCC_OscConfig+0x618>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4b3f      	ldr	r3, [pc, #252]	; (800154c <HAL_RCC_OscConfig+0x618>)
 800144e:	2180      	movs	r1, #128	; 0x80
 8001450:	0449      	lsls	r1, r1, #17
 8001452:	430a      	orrs	r2, r1
 8001454:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001456:	4b3d      	ldr	r3, [pc, #244]	; (800154c <HAL_RCC_OscConfig+0x618>)
 8001458:	68da      	ldr	r2, [r3, #12]
 800145a:	4b3c      	ldr	r3, [pc, #240]	; (800154c <HAL_RCC_OscConfig+0x618>)
 800145c:	2180      	movs	r1, #128	; 0x80
 800145e:	0549      	lsls	r1, r1, #21
 8001460:	430a      	orrs	r2, r1
 8001462:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001464:	f7ff fa9a 	bl	800099c <HAL_GetTick>
 8001468:	0003      	movs	r3, r0
 800146a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800146e:	f7ff fa95 	bl	800099c <HAL_GetTick>
 8001472:	0002      	movs	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e061      	b.n	8001544 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001480:	4b32      	ldr	r3, [pc, #200]	; (800154c <HAL_RCC_OscConfig+0x618>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	049b      	lsls	r3, r3, #18
 8001488:	4013      	ands	r3, r2
 800148a:	d0f0      	beq.n	800146e <HAL_RCC_OscConfig+0x53a>
 800148c:	e059      	b.n	8001542 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800148e:	4b2f      	ldr	r3, [pc, #188]	; (800154c <HAL_RCC_OscConfig+0x618>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	4b2e      	ldr	r3, [pc, #184]	; (800154c <HAL_RCC_OscConfig+0x618>)
 8001494:	4931      	ldr	r1, [pc, #196]	; (800155c <HAL_RCC_OscConfig+0x628>)
 8001496:	400a      	ands	r2, r1
 8001498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800149a:	f7ff fa7f 	bl	800099c <HAL_GetTick>
 800149e:	0003      	movs	r3, r0
 80014a0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a4:	f7ff fa7a 	bl	800099c <HAL_GetTick>
 80014a8:	0002      	movs	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e046      	b.n	8001544 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014b6:	4b25      	ldr	r3, [pc, #148]	; (800154c <HAL_RCC_OscConfig+0x618>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	2380      	movs	r3, #128	; 0x80
 80014bc:	049b      	lsls	r3, r3, #18
 80014be:	4013      	ands	r3, r2
 80014c0:	d1f0      	bne.n	80014a4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80014c2:	4b22      	ldr	r3, [pc, #136]	; (800154c <HAL_RCC_OscConfig+0x618>)
 80014c4:	68da      	ldr	r2, [r3, #12]
 80014c6:	4b21      	ldr	r3, [pc, #132]	; (800154c <HAL_RCC_OscConfig+0x618>)
 80014c8:	4926      	ldr	r1, [pc, #152]	; (8001564 <HAL_RCC_OscConfig+0x630>)
 80014ca:	400a      	ands	r2, r1
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	e038      	b.n	8001542 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	69db      	ldr	r3, [r3, #28]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d101      	bne.n	80014dc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e033      	b.n	8001544 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80014dc:	4b1b      	ldr	r3, [pc, #108]	; (800154c <HAL_RCC_OscConfig+0x618>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	2203      	movs	r2, #3
 80014e6:	401a      	ands	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a1b      	ldr	r3, [r3, #32]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d126      	bne.n	800153e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	2270      	movs	r2, #112	; 0x70
 80014f4:	401a      	ands	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d11f      	bne.n	800153e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014fe:	697a      	ldr	r2, [r7, #20]
 8001500:	23fe      	movs	r3, #254	; 0xfe
 8001502:	01db      	lsls	r3, r3, #7
 8001504:	401a      	ands	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800150c:	429a      	cmp	r2, r3
 800150e:	d116      	bne.n	800153e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001510:	697a      	ldr	r2, [r7, #20]
 8001512:	23f8      	movs	r3, #248	; 0xf8
 8001514:	039b      	lsls	r3, r3, #14
 8001516:	401a      	ands	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800151c:	429a      	cmp	r2, r3
 800151e:	d10e      	bne.n	800153e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001520:	697a      	ldr	r2, [r7, #20]
 8001522:	23e0      	movs	r3, #224	; 0xe0
 8001524:	051b      	lsls	r3, r3, #20
 8001526:	401a      	ands	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800152c:	429a      	cmp	r2, r3
 800152e:	d106      	bne.n	800153e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	0f5b      	lsrs	r3, r3, #29
 8001534:	075a      	lsls	r2, r3, #29
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800153a:	429a      	cmp	r2, r3
 800153c:	d001      	beq.n	8001542 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e000      	b.n	8001544 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001542:	2300      	movs	r3, #0
}
 8001544:	0018      	movs	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	b008      	add	sp, #32
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40021000 	.word	0x40021000
 8001550:	40007000 	.word	0x40007000
 8001554:	00001388 	.word	0x00001388
 8001558:	efffffff 	.word	0xefffffff
 800155c:	feffffff 	.word	0xfeffffff
 8001560:	11c1808c 	.word	0x11c1808c
 8001564:	eefefffc 	.word	0xeefefffc

08001568 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d101      	bne.n	800157c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e0e9      	b.n	8001750 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800157c:	4b76      	ldr	r3, [pc, #472]	; (8001758 <HAL_RCC_ClockConfig+0x1f0>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2207      	movs	r2, #7
 8001582:	4013      	ands	r3, r2
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	429a      	cmp	r2, r3
 8001588:	d91e      	bls.n	80015c8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800158a:	4b73      	ldr	r3, [pc, #460]	; (8001758 <HAL_RCC_ClockConfig+0x1f0>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2207      	movs	r2, #7
 8001590:	4393      	bics	r3, r2
 8001592:	0019      	movs	r1, r3
 8001594:	4b70      	ldr	r3, [pc, #448]	; (8001758 <HAL_RCC_ClockConfig+0x1f0>)
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	430a      	orrs	r2, r1
 800159a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800159c:	f7ff f9fe 	bl	800099c <HAL_GetTick>
 80015a0:	0003      	movs	r3, r0
 80015a2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015a4:	e009      	b.n	80015ba <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015a6:	f7ff f9f9 	bl	800099c <HAL_GetTick>
 80015aa:	0002      	movs	r2, r0
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	4a6a      	ldr	r2, [pc, #424]	; (800175c <HAL_RCC_ClockConfig+0x1f4>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e0ca      	b.n	8001750 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015ba:	4b67      	ldr	r3, [pc, #412]	; (8001758 <HAL_RCC_ClockConfig+0x1f0>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2207      	movs	r2, #7
 80015c0:	4013      	ands	r3, r2
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d1ee      	bne.n	80015a6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2202      	movs	r2, #2
 80015ce:	4013      	ands	r3, r2
 80015d0:	d015      	beq.n	80015fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2204      	movs	r2, #4
 80015d8:	4013      	ands	r3, r2
 80015da:	d006      	beq.n	80015ea <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80015dc:	4b60      	ldr	r3, [pc, #384]	; (8001760 <HAL_RCC_ClockConfig+0x1f8>)
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	4b5f      	ldr	r3, [pc, #380]	; (8001760 <HAL_RCC_ClockConfig+0x1f8>)
 80015e2:	21e0      	movs	r1, #224	; 0xe0
 80015e4:	01c9      	lsls	r1, r1, #7
 80015e6:	430a      	orrs	r2, r1
 80015e8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015ea:	4b5d      	ldr	r3, [pc, #372]	; (8001760 <HAL_RCC_ClockConfig+0x1f8>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	4a5d      	ldr	r2, [pc, #372]	; (8001764 <HAL_RCC_ClockConfig+0x1fc>)
 80015f0:	4013      	ands	r3, r2
 80015f2:	0019      	movs	r1, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689a      	ldr	r2, [r3, #8]
 80015f8:	4b59      	ldr	r3, [pc, #356]	; (8001760 <HAL_RCC_ClockConfig+0x1f8>)
 80015fa:	430a      	orrs	r2, r1
 80015fc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2201      	movs	r2, #1
 8001604:	4013      	ands	r3, r2
 8001606:	d057      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d107      	bne.n	8001620 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001610:	4b53      	ldr	r3, [pc, #332]	; (8001760 <HAL_RCC_ClockConfig+0x1f8>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	2380      	movs	r3, #128	; 0x80
 8001616:	029b      	lsls	r3, r3, #10
 8001618:	4013      	ands	r3, r2
 800161a:	d12b      	bne.n	8001674 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e097      	b.n	8001750 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	2b02      	cmp	r3, #2
 8001626:	d107      	bne.n	8001638 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001628:	4b4d      	ldr	r3, [pc, #308]	; (8001760 <HAL_RCC_ClockConfig+0x1f8>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	049b      	lsls	r3, r3, #18
 8001630:	4013      	ands	r3, r2
 8001632:	d11f      	bne.n	8001674 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e08b      	b.n	8001750 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d107      	bne.n	8001650 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001640:	4b47      	ldr	r3, [pc, #284]	; (8001760 <HAL_RCC_ClockConfig+0x1f8>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	2380      	movs	r3, #128	; 0x80
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	4013      	ands	r3, r2
 800164a:	d113      	bne.n	8001674 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e07f      	b.n	8001750 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	2b03      	cmp	r3, #3
 8001656:	d106      	bne.n	8001666 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001658:	4b41      	ldr	r3, [pc, #260]	; (8001760 <HAL_RCC_ClockConfig+0x1f8>)
 800165a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800165c:	2202      	movs	r2, #2
 800165e:	4013      	ands	r3, r2
 8001660:	d108      	bne.n	8001674 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e074      	b.n	8001750 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001666:	4b3e      	ldr	r3, [pc, #248]	; (8001760 <HAL_RCC_ClockConfig+0x1f8>)
 8001668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800166a:	2202      	movs	r2, #2
 800166c:	4013      	ands	r3, r2
 800166e:	d101      	bne.n	8001674 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e06d      	b.n	8001750 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001674:	4b3a      	ldr	r3, [pc, #232]	; (8001760 <HAL_RCC_ClockConfig+0x1f8>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	2207      	movs	r2, #7
 800167a:	4393      	bics	r3, r2
 800167c:	0019      	movs	r1, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	4b37      	ldr	r3, [pc, #220]	; (8001760 <HAL_RCC_ClockConfig+0x1f8>)
 8001684:	430a      	orrs	r2, r1
 8001686:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001688:	f7ff f988 	bl	800099c <HAL_GetTick>
 800168c:	0003      	movs	r3, r0
 800168e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001690:	e009      	b.n	80016a6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001692:	f7ff f983 	bl	800099c <HAL_GetTick>
 8001696:	0002      	movs	r2, r0
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	4a2f      	ldr	r2, [pc, #188]	; (800175c <HAL_RCC_ClockConfig+0x1f4>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e054      	b.n	8001750 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a6:	4b2e      	ldr	r3, [pc, #184]	; (8001760 <HAL_RCC_ClockConfig+0x1f8>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	2238      	movs	r2, #56	; 0x38
 80016ac:	401a      	ands	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d1ec      	bne.n	8001692 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016b8:	4b27      	ldr	r3, [pc, #156]	; (8001758 <HAL_RCC_ClockConfig+0x1f0>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2207      	movs	r2, #7
 80016be:	4013      	ands	r3, r2
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d21e      	bcs.n	8001704 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c6:	4b24      	ldr	r3, [pc, #144]	; (8001758 <HAL_RCC_ClockConfig+0x1f0>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2207      	movs	r2, #7
 80016cc:	4393      	bics	r3, r2
 80016ce:	0019      	movs	r1, r3
 80016d0:	4b21      	ldr	r3, [pc, #132]	; (8001758 <HAL_RCC_ClockConfig+0x1f0>)
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80016d8:	f7ff f960 	bl	800099c <HAL_GetTick>
 80016dc:	0003      	movs	r3, r0
 80016de:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016e0:	e009      	b.n	80016f6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e2:	f7ff f95b 	bl	800099c <HAL_GetTick>
 80016e6:	0002      	movs	r2, r0
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	4a1b      	ldr	r2, [pc, #108]	; (800175c <HAL_RCC_ClockConfig+0x1f4>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e02c      	b.n	8001750 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016f6:	4b18      	ldr	r3, [pc, #96]	; (8001758 <HAL_RCC_ClockConfig+0x1f0>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2207      	movs	r2, #7
 80016fc:	4013      	ands	r3, r2
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	429a      	cmp	r2, r3
 8001702:	d1ee      	bne.n	80016e2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2204      	movs	r2, #4
 800170a:	4013      	ands	r3, r2
 800170c:	d009      	beq.n	8001722 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800170e:	4b14      	ldr	r3, [pc, #80]	; (8001760 <HAL_RCC_ClockConfig+0x1f8>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	4a15      	ldr	r2, [pc, #84]	; (8001768 <HAL_RCC_ClockConfig+0x200>)
 8001714:	4013      	ands	r3, r2
 8001716:	0019      	movs	r1, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68da      	ldr	r2, [r3, #12]
 800171c:	4b10      	ldr	r3, [pc, #64]	; (8001760 <HAL_RCC_ClockConfig+0x1f8>)
 800171e:	430a      	orrs	r2, r1
 8001720:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001722:	f000 f829 	bl	8001778 <HAL_RCC_GetSysClockFreq>
 8001726:	0001      	movs	r1, r0
 8001728:	4b0d      	ldr	r3, [pc, #52]	; (8001760 <HAL_RCC_ClockConfig+0x1f8>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	0a1b      	lsrs	r3, r3, #8
 800172e:	220f      	movs	r2, #15
 8001730:	401a      	ands	r2, r3
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <HAL_RCC_ClockConfig+0x204>)
 8001734:	0092      	lsls	r2, r2, #2
 8001736:	58d3      	ldr	r3, [r2, r3]
 8001738:	221f      	movs	r2, #31
 800173a:	4013      	ands	r3, r2
 800173c:	000a      	movs	r2, r1
 800173e:	40da      	lsrs	r2, r3
 8001740:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <HAL_RCC_ClockConfig+0x208>)
 8001742:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001744:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <HAL_RCC_ClockConfig+0x20c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	0018      	movs	r0, r3
 800174a:	f7ff f8cb 	bl	80008e4 <HAL_InitTick>
 800174e:	0003      	movs	r3, r0
}
 8001750:	0018      	movs	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	b004      	add	sp, #16
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40022000 	.word	0x40022000
 800175c:	00001388 	.word	0x00001388
 8001760:	40021000 	.word	0x40021000
 8001764:	fffff0ff 	.word	0xfffff0ff
 8001768:	ffff8fff 	.word	0xffff8fff
 800176c:	08003044 	.word	0x08003044
 8001770:	2000001c 	.word	0x2000001c
 8001774:	20000020 	.word	0x20000020

08001778 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800177e:	4b3c      	ldr	r3, [pc, #240]	; (8001870 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	2238      	movs	r2, #56	; 0x38
 8001784:	4013      	ands	r3, r2
 8001786:	d10f      	bne.n	80017a8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001788:	4b39      	ldr	r3, [pc, #228]	; (8001870 <HAL_RCC_GetSysClockFreq+0xf8>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	0adb      	lsrs	r3, r3, #11
 800178e:	2207      	movs	r2, #7
 8001790:	4013      	ands	r3, r2
 8001792:	2201      	movs	r2, #1
 8001794:	409a      	lsls	r2, r3
 8001796:	0013      	movs	r3, r2
 8001798:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800179a:	6839      	ldr	r1, [r7, #0]
 800179c:	4835      	ldr	r0, [pc, #212]	; (8001874 <HAL_RCC_GetSysClockFreq+0xfc>)
 800179e:	f7fe fcbb 	bl	8000118 <__udivsi3>
 80017a2:	0003      	movs	r3, r0
 80017a4:	613b      	str	r3, [r7, #16]
 80017a6:	e05d      	b.n	8001864 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017a8:	4b31      	ldr	r3, [pc, #196]	; (8001870 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	2238      	movs	r2, #56	; 0x38
 80017ae:	4013      	ands	r3, r2
 80017b0:	2b08      	cmp	r3, #8
 80017b2:	d102      	bne.n	80017ba <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017b4:	4b30      	ldr	r3, [pc, #192]	; (8001878 <HAL_RCC_GetSysClockFreq+0x100>)
 80017b6:	613b      	str	r3, [r7, #16]
 80017b8:	e054      	b.n	8001864 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017ba:	4b2d      	ldr	r3, [pc, #180]	; (8001870 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2238      	movs	r2, #56	; 0x38
 80017c0:	4013      	ands	r3, r2
 80017c2:	2b10      	cmp	r3, #16
 80017c4:	d138      	bne.n	8001838 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80017c6:	4b2a      	ldr	r3, [pc, #168]	; (8001870 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	2203      	movs	r2, #3
 80017cc:	4013      	ands	r3, r2
 80017ce:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017d0:	4b27      	ldr	r3, [pc, #156]	; (8001870 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	091b      	lsrs	r3, r3, #4
 80017d6:	2207      	movs	r2, #7
 80017d8:	4013      	ands	r3, r2
 80017da:	3301      	adds	r3, #1
 80017dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2b03      	cmp	r3, #3
 80017e2:	d10d      	bne.n	8001800 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017e4:	68b9      	ldr	r1, [r7, #8]
 80017e6:	4824      	ldr	r0, [pc, #144]	; (8001878 <HAL_RCC_GetSysClockFreq+0x100>)
 80017e8:	f7fe fc96 	bl	8000118 <__udivsi3>
 80017ec:	0003      	movs	r3, r0
 80017ee:	0019      	movs	r1, r3
 80017f0:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	0a1b      	lsrs	r3, r3, #8
 80017f6:	227f      	movs	r2, #127	; 0x7f
 80017f8:	4013      	ands	r3, r2
 80017fa:	434b      	muls	r3, r1
 80017fc:	617b      	str	r3, [r7, #20]
        break;
 80017fe:	e00d      	b.n	800181c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001800:	68b9      	ldr	r1, [r7, #8]
 8001802:	481c      	ldr	r0, [pc, #112]	; (8001874 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001804:	f7fe fc88 	bl	8000118 <__udivsi3>
 8001808:	0003      	movs	r3, r0
 800180a:	0019      	movs	r1, r3
 800180c:	4b18      	ldr	r3, [pc, #96]	; (8001870 <HAL_RCC_GetSysClockFreq+0xf8>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	0a1b      	lsrs	r3, r3, #8
 8001812:	227f      	movs	r2, #127	; 0x7f
 8001814:	4013      	ands	r3, r2
 8001816:	434b      	muls	r3, r1
 8001818:	617b      	str	r3, [r7, #20]
        break;
 800181a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800181c:	4b14      	ldr	r3, [pc, #80]	; (8001870 <HAL_RCC_GetSysClockFreq+0xf8>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	0f5b      	lsrs	r3, r3, #29
 8001822:	2207      	movs	r2, #7
 8001824:	4013      	ands	r3, r2
 8001826:	3301      	adds	r3, #1
 8001828:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	6978      	ldr	r0, [r7, #20]
 800182e:	f7fe fc73 	bl	8000118 <__udivsi3>
 8001832:	0003      	movs	r3, r0
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	e015      	b.n	8001864 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001838:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <HAL_RCC_GetSysClockFreq+0xf8>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	2238      	movs	r2, #56	; 0x38
 800183e:	4013      	ands	r3, r2
 8001840:	2b20      	cmp	r3, #32
 8001842:	d103      	bne.n	800184c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001844:	2380      	movs	r3, #128	; 0x80
 8001846:	021b      	lsls	r3, r3, #8
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	e00b      	b.n	8001864 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800184c:	4b08      	ldr	r3, [pc, #32]	; (8001870 <HAL_RCC_GetSysClockFreq+0xf8>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	2238      	movs	r2, #56	; 0x38
 8001852:	4013      	ands	r3, r2
 8001854:	2b18      	cmp	r3, #24
 8001856:	d103      	bne.n	8001860 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001858:	23fa      	movs	r3, #250	; 0xfa
 800185a:	01db      	lsls	r3, r3, #7
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	e001      	b.n	8001864 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001860:	2300      	movs	r3, #0
 8001862:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001864:	693b      	ldr	r3, [r7, #16]
}
 8001866:	0018      	movs	r0, r3
 8001868:	46bd      	mov	sp, r7
 800186a:	b006      	add	sp, #24
 800186c:	bd80      	pop	{r7, pc}
 800186e:	46c0      	nop			; (mov r8, r8)
 8001870:	40021000 	.word	0x40021000
 8001874:	00f42400 	.word	0x00f42400
 8001878:	007a1200 	.word	0x007a1200

0800187c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001884:	2313      	movs	r3, #19
 8001886:	18fb      	adds	r3, r7, r3
 8001888:	2200      	movs	r2, #0
 800188a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800188c:	2312      	movs	r3, #18
 800188e:	18fb      	adds	r3, r7, r3
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	2380      	movs	r3, #128	; 0x80
 800189a:	029b      	lsls	r3, r3, #10
 800189c:	4013      	ands	r3, r2
 800189e:	d100      	bne.n	80018a2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80018a0:	e0a3      	b.n	80019ea <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018a2:	2011      	movs	r0, #17
 80018a4:	183b      	adds	r3, r7, r0
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018aa:	4bc3      	ldr	r3, [pc, #780]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80018ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018ae:	2380      	movs	r3, #128	; 0x80
 80018b0:	055b      	lsls	r3, r3, #21
 80018b2:	4013      	ands	r3, r2
 80018b4:	d110      	bne.n	80018d8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018b6:	4bc0      	ldr	r3, [pc, #768]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80018b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018ba:	4bbf      	ldr	r3, [pc, #764]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80018bc:	2180      	movs	r1, #128	; 0x80
 80018be:	0549      	lsls	r1, r1, #21
 80018c0:	430a      	orrs	r2, r1
 80018c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80018c4:	4bbc      	ldr	r3, [pc, #752]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80018c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018c8:	2380      	movs	r3, #128	; 0x80
 80018ca:	055b      	lsls	r3, r3, #21
 80018cc:	4013      	ands	r3, r2
 80018ce:	60bb      	str	r3, [r7, #8]
 80018d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018d2:	183b      	adds	r3, r7, r0
 80018d4:	2201      	movs	r2, #1
 80018d6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018d8:	4bb8      	ldr	r3, [pc, #736]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	4bb7      	ldr	r3, [pc, #732]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80018de:	2180      	movs	r1, #128	; 0x80
 80018e0:	0049      	lsls	r1, r1, #1
 80018e2:	430a      	orrs	r2, r1
 80018e4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80018e6:	f7ff f859 	bl	800099c <HAL_GetTick>
 80018ea:	0003      	movs	r3, r0
 80018ec:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80018ee:	e00b      	b.n	8001908 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018f0:	f7ff f854 	bl	800099c <HAL_GetTick>
 80018f4:	0002      	movs	r2, r0
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d904      	bls.n	8001908 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80018fe:	2313      	movs	r3, #19
 8001900:	18fb      	adds	r3, r7, r3
 8001902:	2203      	movs	r2, #3
 8001904:	701a      	strb	r2, [r3, #0]
        break;
 8001906:	e005      	b.n	8001914 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001908:	4bac      	ldr	r3, [pc, #688]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	2380      	movs	r3, #128	; 0x80
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	4013      	ands	r3, r2
 8001912:	d0ed      	beq.n	80018f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001914:	2313      	movs	r3, #19
 8001916:	18fb      	adds	r3, r7, r3
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d154      	bne.n	80019c8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800191e:	4ba6      	ldr	r3, [pc, #664]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001920:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001922:	23c0      	movs	r3, #192	; 0xc0
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4013      	ands	r3, r2
 8001928:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d019      	beq.n	8001964 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	429a      	cmp	r2, r3
 8001938:	d014      	beq.n	8001964 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800193a:	4b9f      	ldr	r3, [pc, #636]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800193c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193e:	4aa0      	ldr	r2, [pc, #640]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001940:	4013      	ands	r3, r2
 8001942:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001944:	4b9c      	ldr	r3, [pc, #624]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001946:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001948:	4b9b      	ldr	r3, [pc, #620]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800194a:	2180      	movs	r1, #128	; 0x80
 800194c:	0249      	lsls	r1, r1, #9
 800194e:	430a      	orrs	r2, r1
 8001950:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001952:	4b99      	ldr	r3, [pc, #612]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001954:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001956:	4b98      	ldr	r3, [pc, #608]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001958:	499a      	ldr	r1, [pc, #616]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800195a:	400a      	ands	r2, r1
 800195c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800195e:	4b96      	ldr	r3, [pc, #600]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001960:	697a      	ldr	r2, [r7, #20]
 8001962:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	2201      	movs	r2, #1
 8001968:	4013      	ands	r3, r2
 800196a:	d016      	beq.n	800199a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196c:	f7ff f816 	bl	800099c <HAL_GetTick>
 8001970:	0003      	movs	r3, r0
 8001972:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001974:	e00c      	b.n	8001990 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001976:	f7ff f811 	bl	800099c <HAL_GetTick>
 800197a:	0002      	movs	r2, r0
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	4a91      	ldr	r2, [pc, #580]	; (8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d904      	bls.n	8001990 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001986:	2313      	movs	r3, #19
 8001988:	18fb      	adds	r3, r7, r3
 800198a:	2203      	movs	r2, #3
 800198c:	701a      	strb	r2, [r3, #0]
            break;
 800198e:	e004      	b.n	800199a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001990:	4b89      	ldr	r3, [pc, #548]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001994:	2202      	movs	r2, #2
 8001996:	4013      	ands	r3, r2
 8001998:	d0ed      	beq.n	8001976 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800199a:	2313      	movs	r3, #19
 800199c:	18fb      	adds	r3, r7, r3
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d10a      	bne.n	80019ba <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80019a4:	4b84      	ldr	r3, [pc, #528]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80019a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a8:	4a85      	ldr	r2, [pc, #532]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80019aa:	4013      	ands	r3, r2
 80019ac:	0019      	movs	r1, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019b2:	4b81      	ldr	r3, [pc, #516]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80019b4:	430a      	orrs	r2, r1
 80019b6:	65da      	str	r2, [r3, #92]	; 0x5c
 80019b8:	e00c      	b.n	80019d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80019ba:	2312      	movs	r3, #18
 80019bc:	18fb      	adds	r3, r7, r3
 80019be:	2213      	movs	r2, #19
 80019c0:	18ba      	adds	r2, r7, r2
 80019c2:	7812      	ldrb	r2, [r2, #0]
 80019c4:	701a      	strb	r2, [r3, #0]
 80019c6:	e005      	b.n	80019d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80019c8:	2312      	movs	r3, #18
 80019ca:	18fb      	adds	r3, r7, r3
 80019cc:	2213      	movs	r2, #19
 80019ce:	18ba      	adds	r2, r7, r2
 80019d0:	7812      	ldrb	r2, [r2, #0]
 80019d2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019d4:	2311      	movs	r3, #17
 80019d6:	18fb      	adds	r3, r7, r3
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d105      	bne.n	80019ea <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019de:	4b76      	ldr	r3, [pc, #472]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80019e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019e2:	4b75      	ldr	r3, [pc, #468]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80019e4:	4979      	ldr	r1, [pc, #484]	; (8001bcc <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80019e6:	400a      	ands	r2, r1
 80019e8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2201      	movs	r2, #1
 80019f0:	4013      	ands	r3, r2
 80019f2:	d009      	beq.n	8001a08 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80019f4:	4b70      	ldr	r3, [pc, #448]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80019f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f8:	2203      	movs	r2, #3
 80019fa:	4393      	bics	r3, r2
 80019fc:	0019      	movs	r1, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	4b6d      	ldr	r3, [pc, #436]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a04:	430a      	orrs	r2, r1
 8001a06:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	4013      	ands	r3, r2
 8001a10:	d009      	beq.n	8001a26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001a12:	4b69      	ldr	r3, [pc, #420]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a16:	220c      	movs	r2, #12
 8001a18:	4393      	bics	r3, r2
 8001a1a:	0019      	movs	r1, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	4b65      	ldr	r3, [pc, #404]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a22:	430a      	orrs	r2, r1
 8001a24:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2210      	movs	r2, #16
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d009      	beq.n	8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001a30:	4b61      	ldr	r3, [pc, #388]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a34:	4a66      	ldr	r2, [pc, #408]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8001a36:	4013      	ands	r3, r2
 8001a38:	0019      	movs	r1, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	68da      	ldr	r2, [r3, #12]
 8001a3e:	4b5e      	ldr	r3, [pc, #376]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a40:	430a      	orrs	r2, r1
 8001a42:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	2380      	movs	r3, #128	; 0x80
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d009      	beq.n	8001a64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001a50:	4b59      	ldr	r3, [pc, #356]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a54:	4a5f      	ldr	r2, [pc, #380]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8001a56:	4013      	ands	r3, r2
 8001a58:	0019      	movs	r1, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	699a      	ldr	r2, [r3, #24]
 8001a5e:	4b56      	ldr	r3, [pc, #344]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a60:	430a      	orrs	r2, r1
 8001a62:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	2380      	movs	r3, #128	; 0x80
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d009      	beq.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001a70:	4b51      	ldr	r3, [pc, #324]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a74:	4a58      	ldr	r2, [pc, #352]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001a76:	4013      	ands	r3, r2
 8001a78:	0019      	movs	r1, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	69da      	ldr	r2, [r3, #28]
 8001a7e:	4b4e      	ldr	r3, [pc, #312]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a80:	430a      	orrs	r2, r1
 8001a82:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2220      	movs	r2, #32
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	d009      	beq.n	8001aa2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001a8e:	4b4a      	ldr	r3, [pc, #296]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a92:	4a52      	ldr	r2, [pc, #328]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8001a94:	4013      	ands	r3, r2
 8001a96:	0019      	movs	r1, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	691a      	ldr	r2, [r3, #16]
 8001a9c:	4b46      	ldr	r3, [pc, #280]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	2380      	movs	r3, #128	; 0x80
 8001aa8:	01db      	lsls	r3, r3, #7
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d015      	beq.n	8001ada <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001aae:	4b42      	ldr	r3, [pc, #264]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	0899      	lsrs	r1, r3, #2
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a1a      	ldr	r2, [r3, #32]
 8001aba:	4b3f      	ldr	r3, [pc, #252]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001abc:	430a      	orrs	r2, r1
 8001abe:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a1a      	ldr	r2, [r3, #32]
 8001ac4:	2380      	movs	r3, #128	; 0x80
 8001ac6:	05db      	lsls	r3, r3, #23
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d106      	bne.n	8001ada <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001acc:	4b3a      	ldr	r3, [pc, #232]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ace:	68da      	ldr	r2, [r3, #12]
 8001ad0:	4b39      	ldr	r3, [pc, #228]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ad2:	2180      	movs	r1, #128	; 0x80
 8001ad4:	0249      	lsls	r1, r1, #9
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	2380      	movs	r3, #128	; 0x80
 8001ae0:	031b      	lsls	r3, r3, #12
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d009      	beq.n	8001afa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001ae6:	4b34      	ldr	r3, [pc, #208]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aea:	2240      	movs	r2, #64	; 0x40
 8001aec:	4393      	bics	r3, r2
 8001aee:	0019      	movs	r1, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001af4:	4b30      	ldr	r3, [pc, #192]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001af6:	430a      	orrs	r2, r1
 8001af8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	2380      	movs	r3, #128	; 0x80
 8001b00:	039b      	lsls	r3, r3, #14
 8001b02:	4013      	ands	r3, r2
 8001b04:	d016      	beq.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001b06:	4b2c      	ldr	r3, [pc, #176]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b0a:	4a35      	ldr	r2, [pc, #212]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	0019      	movs	r1, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b14:	4b28      	ldr	r3, [pc, #160]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b16:	430a      	orrs	r2, r1
 8001b18:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b1e:	2380      	movs	r3, #128	; 0x80
 8001b20:	03db      	lsls	r3, r3, #15
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d106      	bne.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001b26:	4b24      	ldr	r3, [pc, #144]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b28:	68da      	ldr	r2, [r3, #12]
 8001b2a:	4b23      	ldr	r3, [pc, #140]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b2c:	2180      	movs	r1, #128	; 0x80
 8001b2e:	0449      	lsls	r1, r1, #17
 8001b30:	430a      	orrs	r2, r1
 8001b32:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	2380      	movs	r3, #128	; 0x80
 8001b3a:	03db      	lsls	r3, r3, #15
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d016      	beq.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001b40:	4b1d      	ldr	r3, [pc, #116]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b44:	4a27      	ldr	r2, [pc, #156]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8001b46:	4013      	ands	r3, r2
 8001b48:	0019      	movs	r1, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b4e:	4b1a      	ldr	r3, [pc, #104]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b50:	430a      	orrs	r2, r1
 8001b52:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b58:	2380      	movs	r3, #128	; 0x80
 8001b5a:	045b      	lsls	r3, r3, #17
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d106      	bne.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001b60:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b62:	68da      	ldr	r2, [r3, #12]
 8001b64:	4b14      	ldr	r3, [pc, #80]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b66:	2180      	movs	r1, #128	; 0x80
 8001b68:	0449      	lsls	r1, r1, #17
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	2380      	movs	r3, #128	; 0x80
 8001b74:	011b      	lsls	r3, r3, #4
 8001b76:	4013      	ands	r3, r2
 8001b78:	d016      	beq.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001b7a:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7e:	4a1a      	ldr	r2, [pc, #104]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8001b80:	4013      	ands	r3, r2
 8001b82:	0019      	movs	r1, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	695a      	ldr	r2, [r3, #20]
 8001b88:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	695a      	ldr	r2, [r3, #20]
 8001b92:	2380      	movs	r3, #128	; 0x80
 8001b94:	01db      	lsls	r3, r3, #7
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d106      	bne.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001b9a:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b9c:	68da      	ldr	r2, [r3, #12]
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ba0:	2180      	movs	r1, #128	; 0x80
 8001ba2:	0249      	lsls	r1, r1, #9
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001ba8:	2312      	movs	r3, #18
 8001baa:	18fb      	adds	r3, r7, r3
 8001bac:	781b      	ldrb	r3, [r3, #0]
}
 8001bae:	0018      	movs	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	b006      	add	sp, #24
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	46c0      	nop			; (mov r8, r8)
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40007000 	.word	0x40007000
 8001bc0:	fffffcff 	.word	0xfffffcff
 8001bc4:	fffeffff 	.word	0xfffeffff
 8001bc8:	00001388 	.word	0x00001388
 8001bcc:	efffffff 	.word	0xefffffff
 8001bd0:	fffff3ff 	.word	0xfffff3ff
 8001bd4:	fff3ffff 	.word	0xfff3ffff
 8001bd8:	ffcfffff 	.word	0xffcfffff
 8001bdc:	ffffcfff 	.word	0xffffcfff
 8001be0:	ffbfffff 	.word	0xffbfffff
 8001be4:	feffffff 	.word	0xfeffffff
 8001be8:	ffff3fff 	.word	0xffff3fff

08001bec <HAL_RCCEx_GetPeriphCLKConfig>:
  * @note (1) Peripheral is not available on all devices
  * @note (2) Peripheral clock selection is not available on all devices
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_I2S1 | \
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a3f      	ldr	r2, [pc, #252]	; (8001cf4 <HAL_RCCEx_GetPeriphCLKConfig+0x108>)
 8001bf8:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_ADC     | RCC_PERIPHCLK_RTC ;

#if defined(RCC_CCIPR_LPTIM1SEL) && defined(RCC_CCIPR_LPTIM2SEL)
  PeriphClkInit->PeriphClockSelection |=  RCC_PERIPHCLK_LPTIM2  | RCC_PERIPHCLK_LPTIM1;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	22c0      	movs	r2, #192	; 0xc0
 8001c00:	00d2      	lsls	r2, r2, #3
 8001c02:	431a      	orrs	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	601a      	str	r2, [r3, #0]
#endif /* RCC_CCIPR_LPTIM1SEL && RCC_CCIPR_LPTIM2SEL */
#if defined(RCC_CCIPR_RNGSEL)
  PeriphClkInit->PeriphClockSelection |=  RCC_PERIPHCLK_RNG;
#endif /* RCC_CCIPR_RNGSEL */
#if defined(RCC_CCIPR_LPUART1SEL)
  PeriphClkInit->PeriphClockSelection |=  RCC_PERIPHCLK_LPUART1;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2210      	movs	r2, #16
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	601a      	str	r2, [r3, #0]
#endif /* RCC_CCIPR_LPUART1SEL */
#if defined(RCC_CCIPR_LPUART2SEL)
  PeriphClkInit->PeriphClockSelection |=  RCC_PERIPHCLK_LPUART2;
#endif /* RCC_CCIPR_LPUART2SEL */
#if defined(RCC_CCIPR_CECSEL)
  PeriphClkInit->PeriphClockSelection |=  RCC_PERIPHCLK_CEC;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2280      	movs	r2, #128	; 0x80
 8001c1a:	0312      	lsls	r2, r2, #12
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	601a      	str	r2, [r3, #0]
#endif /* RCC_CCIPR_CECSEL */
#if defined(RCC_CCIPR_TIM1SEL)
  PeriphClkInit->PeriphClockSelection |=  RCC_PERIPHCLK_TIM1;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2280      	movs	r2, #128	; 0x80
 8001c28:	0392      	lsls	r2, r2, #14
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	601a      	str	r2, [r3, #0]
#endif /* RCC_CCIPR_TIM1SEL */
#if defined(RCC_CCIPR_TIM15SEL)
  PeriphClkInit->PeriphClockSelection |=  RCC_PERIPHCLK_TIM15;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2280      	movs	r2, #128	; 0x80
 8001c36:	03d2      	lsls	r2, r2, #15
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	601a      	str	r2, [r3, #0]
#endif /* RCC_CCIPR_TIM15SEL */
#if defined(RCC_CCIPR_USART2SEL)
  PeriphClkInit->PeriphClockSelection |=  RCC_PERIPHCLK_USART2;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2202      	movs	r2, #2
 8001c44:	431a      	orrs	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	601a      	str	r2, [r3, #0]
#endif /* RCC_CCIPR2_USBSEL */
#if defined(RCC_CCIPR2_FDCANSEL)
  PeriphClkInit->PeriphClockSelection |=  RCC_PERIPHCLK_FDCAN;
#endif /* RCC_CCIPR_FDCANSEL */
  /* Get the USART1 clock source ---------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection  = __HAL_RCC_GET_USART1_SOURCE();
 8001c4a:	4b2b      	ldr	r3, [pc, #172]	; (8001cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x10c>)
 8001c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c4e:	2203      	movs	r2, #3
 8001c50:	401a      	ands	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	605a      	str	r2, [r3, #4]
#if defined(RCC_CCIPR_USART2SEL)
  /* Get the USART2 clock source ---------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection  = __HAL_RCC_GET_USART2_SOURCE();
 8001c56:	4b28      	ldr	r3, [pc, #160]	; (8001cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x10c>)
 8001c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c5a:	220c      	movs	r2, #12
 8001c5c:	401a      	ands	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	609a      	str	r2, [r3, #8]
  /* Get the USART3 clock source ---------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection  = __HAL_RCC_GET_USART3_SOURCE();
#endif /* RCC_CCIPR_USART3SEL */
#if defined(RCC_CCIPR_LPUART1SEL)
  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection = __HAL_RCC_GET_LPUART1_SOURCE();
 8001c62:	4b25      	ldr	r3, [pc, #148]	; (8001cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x10c>)
 8001c64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c66:	23c0      	movs	r3, #192	; 0xc0
 8001c68:	011b      	lsls	r3, r3, #4
 8001c6a:	401a      	ands	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	60da      	str	r2, [r3, #12]
#if defined(RCC_CCIPR_LPUART2SEL)
  /* Get the LPUART2 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart2ClockSelection = __HAL_RCC_GET_LPUART2_SOURCE();
#endif /* RCC_CCIPR_LPUART2SEL */
  /* Get the I2C1 clock source -----------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection    = __HAL_RCC_GET_I2C1_SOURCE();
 8001c70:	4b21      	ldr	r3, [pc, #132]	; (8001cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x10c>)
 8001c72:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c74:	23c0      	movs	r3, #192	; 0xc0
 8001c76:	019b      	lsls	r3, r3, #6
 8001c78:	401a      	ands	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	611a      	str	r2, [r3, #16]
  /* Get the I2C2 clock source -----------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection    = __HAL_RCC_GET_I2C2_SOURCE();
#endif /* RCC_CCIPR_I2C2SEL */
#if defined(RCC_CCIPR_LPTIM1SEL)
  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection  = __HAL_RCC_GET_LPTIM1_SOURCE();
 8001c7e:	4b1e      	ldr	r3, [pc, #120]	; (8001cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x10c>)
 8001c80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c82:	23c0      	movs	r3, #192	; 0xc0
 8001c84:	031b      	lsls	r3, r3, #12
 8001c86:	401a      	ands	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	619a      	str	r2, [r3, #24]
#endif /* RCC_CCIPR_LPTIM1SEL */
#if defined(RCC_CCIPR_LPTIM2SEL)
  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection  = __HAL_RCC_GET_LPTIM2_SOURCE();
 8001c8c:	4b1a      	ldr	r3, [pc, #104]	; (8001cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x10c>)
 8001c8e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c90:	23c0      	movs	r3, #192	; 0xc0
 8001c92:	039b      	lsls	r3, r3, #14
 8001c94:	401a      	ands	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	61da      	str	r2, [r3, #28]
#endif /* RCC_CCIPR_LPTIM2SEL */
#if defined(RCC_CCIPR_TIM1SEL)
  /* Get the TIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Tim1ClockSelection  = __HAL_RCC_GET_TIM1_SOURCE();
 8001c9a:	4b17      	ldr	r3, [pc, #92]	; (8001cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x10c>)
 8001c9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c9e:	2380      	movs	r3, #128	; 0x80
 8001ca0:	03db      	lsls	r3, r3, #15
 8001ca2:	401a      	ands	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* RCC_CCIPR_TIM1SEL */
#if defined(RCC_CCIPR_TIM15SEL)
  /* Get the TIM15 clock source ---------------------------------------------*/
  PeriphClkInit->Tim15ClockSelection  = __HAL_RCC_GET_TIM15_SOURCE();
 8001ca8:	4b13      	ldr	r3, [pc, #76]	; (8001cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x10c>)
 8001caa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001cac:	2380      	movs	r3, #128	; 0x80
 8001cae:	045b      	lsls	r3, r3, #17
 8001cb0:	401a      	ands	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* RCC_CCIPR_TIM15SEL */
  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection     = __HAL_RCC_GET_RTC_SOURCE();
 8001cb6:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x10c>)
 8001cb8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cba:	23c0      	movs	r3, #192	; 0xc0
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	401a      	ands	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(RCC_CCIPR_RNGSEL)
  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection     = __HAL_RCC_GET_RNG_SOURCE();
#endif  /* RCC_CCIPR_RNGSEL */
  /* Get the ADC clock source -----------------------------------------------*/
  PeriphClkInit->AdcClockSelection     = __HAL_RCC_GET_ADC_SOURCE();
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x10c>)
 8001cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc8:	0f9b      	lsrs	r3, r3, #30
 8001cca:	079a      	lsls	r2, r3, #30
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	621a      	str	r2, [r3, #32]
#if defined(RCC_CCIPR_CECSEL)
  /* Get the CEC clock source -----------------------------------------------*/
  PeriphClkInit->CecClockSelection     = __HAL_RCC_GET_CEC_SOURCE();
 8001cd0:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x10c>)
 8001cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd4:	2240      	movs	r2, #64	; 0x40
 8001cd6:	401a      	ands	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	625a      	str	r2, [r3, #36]	; 0x24
#if defined(RCC_CCIPR2_FDCANSEL)
  /* Get the FDCAN clock source -----------------------------------------------*/
  PeriphClkInit->FdcanClockSelection     = __HAL_RCC_GET_FDCAN_SOURCE();
#endif  /* RCC_CCIPR2_FDCANSEL */
  /* Get the I2S1 clock source -----------------------------------------------*/
  PeriphClkInit->I2s1ClockSelection    = __HAL_RCC_GET_I2S1_SOURCE();
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x10c>)
 8001cde:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001ce0:	23c0      	movs	r3, #192	; 0xc0
 8001ce2:	021b      	lsls	r3, r3, #8
 8001ce4:	401a      	ands	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	615a      	str	r2, [r3, #20]
#if defined(RCC_CCIPR2_I2S2SEL)
  /* Get the I2S2 clock source -----------------------------------------------*/
  PeriphClkInit->I2s2ClockSelection    = __HAL_RCC_GET_I2S2_SOURCE();
#endif /* RCC_CCIPR2_I2S2SEL */
}
 8001cea:	46c0      	nop			; (mov r8, r8)
 8001cec:	46bd      	mov	sp, r7
 8001cee:	b002      	add	sp, #8
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	00024821 	.word	0x00024821
 8001cf8:	40021000 	.word	0x40021000

08001cfc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001cfc:	b5b0      	push	{r4, r5, r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d04:	230f      	movs	r3, #15
 8001d06:	18fb      	adds	r3, r7, r3
 8001d08:	2201      	movs	r2, #1
 8001d0a:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d100      	bne.n	8001d14 <HAL_RTC_Init+0x18>
 8001d12:	e080      	b.n	8001e16 <HAL_RTC_Init+0x11a>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2229      	movs	r2, #41	; 0x29
 8001d18:	5c9b      	ldrb	r3, [r3, r2]
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d10b      	bne.n	8001d38 <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2228      	movs	r2, #40	; 0x28
 8001d24:	2100      	movs	r1, #0
 8001d26:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2288      	movs	r2, #136	; 0x88
 8001d2c:	0212      	lsls	r2, r2, #8
 8001d2e:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	0018      	movs	r0, r3
 8001d34:	f7fe fc66 	bl	8000604 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2229      	movs	r2, #41	; 0x29
 8001d3c:	2102      	movs	r1, #2
 8001d3e:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	22ca      	movs	r2, #202	; 0xca
 8001d46:	625a      	str	r2, [r3, #36]	; 0x24
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2253      	movs	r2, #83	; 0x53
 8001d4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8001d50:	250f      	movs	r5, #15
 8001d52:	197c      	adds	r4, r7, r5
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	0018      	movs	r0, r3
 8001d58:	f000 fbef 	bl	800253a <RTC_EnterInitMode>
 8001d5c:	0003      	movs	r3, r0
 8001d5e:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 8001d60:	0028      	movs	r0, r5
 8001d62:	183b      	adds	r3, r7, r0
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d148      	bne.n	8001dfc <HAL_RTC_Init+0x100>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	699a      	ldr	r2, [r3, #24]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	492b      	ldr	r1, [pc, #172]	; (8001e24 <HAL_RTC_Init+0x128>)
 8001d76:	400a      	ands	r2, r1
 8001d78:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6999      	ldr	r1, [r3, #24]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	6912      	ldr	r2, [r2, #16]
 8001da0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6919      	ldr	r1, [r3, #16]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	041a      	lsls	r2, r3, #16
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8001db6:	0005      	movs	r5, r0
 8001db8:	183c      	adds	r4, r7, r0
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	f000 fbff 	bl	80025c0 <RTC_ExitInitMode>
 8001dc2:	0003      	movs	r3, r0
 8001dc4:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 8001dc6:	197b      	adds	r3, r7, r5
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d116      	bne.n	8001dfc <HAL_RTC_Init+0x100>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	699a      	ldr	r2, [r3, #24]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	00d2      	lsls	r2, r2, #3
 8001dda:	08d2      	lsrs	r2, r2, #3
 8001ddc:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6999      	ldr	r1, [r3, #24]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a1b      	ldr	r3, [r3, #32]
 8001dec:	431a      	orrs	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	431a      	orrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	22ff      	movs	r2, #255	; 0xff
 8001e02:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8001e04:	230f      	movs	r3, #15
 8001e06:	18fb      	adds	r3, r7, r3
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d103      	bne.n	8001e16 <HAL_RTC_Init+0x11a>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2229      	movs	r2, #41	; 0x29
 8001e12:	2101      	movs	r1, #1
 8001e14:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8001e16:	230f      	movs	r3, #15
 8001e18:	18fb      	adds	r3, r7, r3
 8001e1a:	781b      	ldrb	r3, [r3, #0]
}
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	b004      	add	sp, #16
 8001e22:	bdb0      	pop	{r4, r5, r7, pc}
 8001e24:	fb8fffbf 	.word	0xfb8fffbf

08001e28 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001e28:	b5b0      	push	{r4, r5, r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2228      	movs	r2, #40	; 0x28
 8001e38:	5c9b      	ldrb	r3, [r3, r2]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d101      	bne.n	8001e42 <HAL_RTC_SetTime+0x1a>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	e092      	b.n	8001f68 <HAL_RTC_SetTime+0x140>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2228      	movs	r2, #40	; 0x28
 8001e46:	2101      	movs	r1, #1
 8001e48:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2229      	movs	r2, #41	; 0x29
 8001e4e:	2102      	movs	r1, #2
 8001e50:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	22ca      	movs	r2, #202	; 0xca
 8001e58:	625a      	str	r2, [r3, #36]	; 0x24
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2253      	movs	r2, #83	; 0x53
 8001e60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001e62:	2513      	movs	r5, #19
 8001e64:	197c      	adds	r4, r7, r5
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	0018      	movs	r0, r3
 8001e6a:	f000 fb66 	bl	800253a <RTC_EnterInitMode>
 8001e6e:	0003      	movs	r3, r0
 8001e70:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8001e72:	197b      	adds	r3, r7, r5
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d162      	bne.n	8001f40 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d125      	bne.n	8001ecc <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	2240      	movs	r2, #64	; 0x40
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d102      	bne.n	8001e92 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	0018      	movs	r0, r3
 8001e98:	f000 fbd6 	bl	8002648 <RTC_ByteToBcd2>
 8001e9c:	0003      	movs	r3, r0
 8001e9e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	785b      	ldrb	r3, [r3, #1]
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	f000 fbcf 	bl	8002648 <RTC_ByteToBcd2>
 8001eaa:	0003      	movs	r3, r0
 8001eac:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001eae:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	789b      	ldrb	r3, [r3, #2]
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f000 fbc7 	bl	8002648 <RTC_ByteToBcd2>
 8001eba:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001ebc:	0022      	movs	r2, r4
 8001ebe:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	78db      	ldrb	r3, [r3, #3]
 8001ec4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	e017      	b.n	8001efc <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	2240      	movs	r2, #64	; 0x40
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d102      	bne.n	8001ede <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	2200      	movs	r2, #0
 8001edc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	785b      	ldrb	r3, [r3, #1]
 8001ee8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001eea:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8001eec:	68ba      	ldr	r2, [r7, #8]
 8001eee:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001ef0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	78db      	ldrb	r3, [r3, #3]
 8001ef6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	491b      	ldr	r1, [pc, #108]	; (8001f70 <HAL_RTC_SetTime+0x148>)
 8001f04:	400a      	ands	r2, r1
 8001f06:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	699a      	ldr	r2, [r3, #24]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4918      	ldr	r1, [pc, #96]	; (8001f74 <HAL_RTC_SetTime+0x14c>)
 8001f14:	400a      	ands	r2, r1
 8001f16:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6999      	ldr	r1, [r3, #24]
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	431a      	orrs	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001f30:	2313      	movs	r3, #19
 8001f32:	18fc      	adds	r4, r7, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	0018      	movs	r0, r3
 8001f38:	f000 fb42 	bl	80025c0 <RTC_ExitInitMode>
 8001f3c:	0003      	movs	r3, r0
 8001f3e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	22ff      	movs	r2, #255	; 0xff
 8001f46:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8001f48:	2313      	movs	r3, #19
 8001f4a:	18fb      	adds	r3, r7, r3
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d103      	bne.n	8001f5a <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2229      	movs	r2, #41	; 0x29
 8001f56:	2101      	movs	r1, #1
 8001f58:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2228      	movs	r2, #40	; 0x28
 8001f5e:	2100      	movs	r1, #0
 8001f60:	5499      	strb	r1, [r3, r2]

  return status;
 8001f62:	2313      	movs	r3, #19
 8001f64:	18fb      	adds	r3, r7, r3
 8001f66:	781b      	ldrb	r3, [r3, #0]
}
 8001f68:	0018      	movs	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	b006      	add	sp, #24
 8001f6e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f70:	007f7f7f 	.word	0x007f7f7f
 8001f74:	fffbffff 	.word	0xfffbffff

08001f78 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	689a      	ldr	r2, [r3, #8]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	045b      	lsls	r3, r3, #17
 8001f96:	0c5a      	lsrs	r2, r3, #17
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a22      	ldr	r2, [pc, #136]	; (800202c <HAL_RTC_GetTime+0xb4>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	0c1b      	lsrs	r3, r3, #16
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	223f      	movs	r2, #63	; 0x3f
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	0a1b      	lsrs	r3, r3, #8
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	227f      	movs	r2, #127	; 0x7f
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	227f      	movs	r2, #127	; 0x7f
 8001fce:	4013      	ands	r3, r2
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	0d9b      	lsrs	r3, r3, #22
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2201      	movs	r2, #1
 8001fde:	4013      	ands	r3, r2
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d11a      	bne.n	8002022 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	f000 fb51 	bl	8002698 <RTC_Bcd2ToByte>
 8001ff6:	0003      	movs	r3, r0
 8001ff8:	001a      	movs	r2, r3
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	785b      	ldrb	r3, [r3, #1]
 8002002:	0018      	movs	r0, r3
 8002004:	f000 fb48 	bl	8002698 <RTC_Bcd2ToByte>
 8002008:	0003      	movs	r3, r0
 800200a:	001a      	movs	r2, r3
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	789b      	ldrb	r3, [r3, #2]
 8002014:	0018      	movs	r0, r3
 8002016:	f000 fb3f 	bl	8002698 <RTC_Bcd2ToByte>
 800201a:	0003      	movs	r3, r0
 800201c:	001a      	movs	r2, r3
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	0018      	movs	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	b006      	add	sp, #24
 800202a:	bd80      	pop	{r7, pc}
 800202c:	007f7f7f 	.word	0x007f7f7f

08002030 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002030:	b5b0      	push	{r4, r5, r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2228      	movs	r2, #40	; 0x28
 8002040:	5c9b      	ldrb	r3, [r3, r2]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d101      	bne.n	800204a <HAL_RTC_SetDate+0x1a>
 8002046:	2302      	movs	r3, #2
 8002048:	e07e      	b.n	8002148 <HAL_RTC_SetDate+0x118>
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2228      	movs	r2, #40	; 0x28
 800204e:	2101      	movs	r1, #1
 8002050:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2229      	movs	r2, #41	; 0x29
 8002056:	2102      	movs	r1, #2
 8002058:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d10e      	bne.n	800207e <HAL_RTC_SetDate+0x4e>
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	785b      	ldrb	r3, [r3, #1]
 8002064:	001a      	movs	r2, r3
 8002066:	2310      	movs	r3, #16
 8002068:	4013      	ands	r3, r2
 800206a:	d008      	beq.n	800207e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	785b      	ldrb	r3, [r3, #1]
 8002070:	2210      	movs	r2, #16
 8002072:	4393      	bics	r3, r2
 8002074:	b2db      	uxtb	r3, r3
 8002076:	330a      	adds	r3, #10
 8002078:	b2da      	uxtb	r2, r3
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d11c      	bne.n	80020be <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	78db      	ldrb	r3, [r3, #3]
 8002088:	0018      	movs	r0, r3
 800208a:	f000 fadd 	bl	8002648 <RTC_ByteToBcd2>
 800208e:	0003      	movs	r3, r0
 8002090:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	785b      	ldrb	r3, [r3, #1]
 8002096:	0018      	movs	r0, r3
 8002098:	f000 fad6 	bl	8002648 <RTC_ByteToBcd2>
 800209c:	0003      	movs	r3, r0
 800209e:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80020a0:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	789b      	ldrb	r3, [r3, #2]
 80020a6:	0018      	movs	r0, r3
 80020a8:	f000 face 	bl	8002648 <RTC_ByteToBcd2>
 80020ac:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80020ae:	0022      	movs	r2, r4
 80020b0:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80020b8:	4313      	orrs	r3, r2
 80020ba:	617b      	str	r3, [r7, #20]
 80020bc:	e00e      	b.n	80020dc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	78db      	ldrb	r3, [r3, #3]
 80020c2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	785b      	ldrb	r3, [r3, #1]
 80020c8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80020ca:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 80020cc:	68ba      	ldr	r2, [r7, #8]
 80020ce:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80020d0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80020d8:	4313      	orrs	r3, r2
 80020da:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	22ca      	movs	r2, #202	; 0xca
 80020e2:	625a      	str	r2, [r3, #36]	; 0x24
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2253      	movs	r2, #83	; 0x53
 80020ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80020ec:	2513      	movs	r5, #19
 80020ee:	197c      	adds	r4, r7, r5
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	0018      	movs	r0, r3
 80020f4:	f000 fa21 	bl	800253a <RTC_EnterInitMode>
 80020f8:	0003      	movs	r3, r0
 80020fa:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80020fc:	0028      	movs	r0, r5
 80020fe:	183b      	adds	r3, r7, r0
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d10c      	bne.n	8002120 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	4910      	ldr	r1, [pc, #64]	; (8002150 <HAL_RTC_SetDate+0x120>)
 800210e:	400a      	ands	r2, r1
 8002110:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002112:	183c      	adds	r4, r7, r0
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	0018      	movs	r0, r3
 8002118:	f000 fa52 	bl	80025c0 <RTC_ExitInitMode>
 800211c:	0003      	movs	r3, r0
 800211e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	22ff      	movs	r2, #255	; 0xff
 8002126:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002128:	2313      	movs	r3, #19
 800212a:	18fb      	adds	r3, r7, r3
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d103      	bne.n	800213a <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2229      	movs	r2, #41	; 0x29
 8002136:	2101      	movs	r1, #1
 8002138:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2228      	movs	r2, #40	; 0x28
 800213e:	2100      	movs	r1, #0
 8002140:	5499      	strb	r1, [r3, r2]

  return status;
 8002142:	2313      	movs	r3, #19
 8002144:	18fb      	adds	r3, r7, r3
 8002146:	781b      	ldrb	r3, [r3, #0]
}
 8002148:	0018      	movs	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	b006      	add	sp, #24
 800214e:	bdb0      	pop	{r4, r5, r7, pc}
 8002150:	00ffff3f 	.word	0x00ffff3f

08002154 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	4a21      	ldr	r2, [pc, #132]	; (80021ec <HAL_RTC_GetDate+0x98>)
 8002168:	4013      	ands	r3, r2
 800216a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	0c1b      	lsrs	r3, r3, #16
 8002170:	b2da      	uxtb	r2, r3
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	0a1b      	lsrs	r3, r3, #8
 800217a:	b2db      	uxtb	r3, r3
 800217c:	221f      	movs	r2, #31
 800217e:	4013      	ands	r3, r2
 8002180:	b2da      	uxtb	r2, r3
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	b2db      	uxtb	r3, r3
 800218a:	223f      	movs	r2, #63	; 0x3f
 800218c:	4013      	ands	r3, r2
 800218e:	b2da      	uxtb	r2, r3
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	0b5b      	lsrs	r3, r3, #13
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2207      	movs	r2, #7
 800219c:	4013      	ands	r3, r2
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d11a      	bne.n	80021e0 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	78db      	ldrb	r3, [r3, #3]
 80021ae:	0018      	movs	r0, r3
 80021b0:	f000 fa72 	bl	8002698 <RTC_Bcd2ToByte>
 80021b4:	0003      	movs	r3, r0
 80021b6:	001a      	movs	r2, r3
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	785b      	ldrb	r3, [r3, #1]
 80021c0:	0018      	movs	r0, r3
 80021c2:	f000 fa69 	bl	8002698 <RTC_Bcd2ToByte>
 80021c6:	0003      	movs	r3, r0
 80021c8:	001a      	movs	r2, r3
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	789b      	ldrb	r3, [r3, #2]
 80021d2:	0018      	movs	r0, r3
 80021d4:	f000 fa60 	bl	8002698 <RTC_Bcd2ToByte>
 80021d8:	0003      	movs	r3, r0
 80021da:	001a      	movs	r2, r3
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	0018      	movs	r0, r3
 80021e4:	46bd      	mov	sp, r7
 80021e6:	b006      	add	sp, #24
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	46c0      	nop			; (mov r8, r8)
 80021ec:	00ffff3f 	.word	0x00ffff3f

080021f0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80021f0:	b590      	push	{r4, r7, lr}
 80021f2:	b089      	sub	sp, #36	; 0x24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2228      	movs	r2, #40	; 0x28
 8002200:	5c9b      	ldrb	r3, [r3, r2]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d101      	bne.n	800220a <HAL_RTC_SetAlarm_IT+0x1a>
 8002206:	2302      	movs	r3, #2
 8002208:	e127      	b.n	800245a <HAL_RTC_SetAlarm_IT+0x26a>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2228      	movs	r2, #40	; 0x28
 800220e:	2101      	movs	r1, #1
 8002210:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2229      	movs	r2, #41	; 0x29
 8002216:	2102      	movs	r1, #2
 8002218:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d136      	bne.n	800228e <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	2240      	movs	r2, #64	; 0x40
 8002228:	4013      	ands	r3, r2
 800222a:	d102      	bne.n	8002232 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	2200      	movs	r2, #0
 8002230:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	0018      	movs	r0, r3
 8002238:	f000 fa06 	bl	8002648 <RTC_ByteToBcd2>
 800223c:	0003      	movs	r3, r0
 800223e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	785b      	ldrb	r3, [r3, #1]
 8002244:	0018      	movs	r0, r3
 8002246:	f000 f9ff 	bl	8002648 <RTC_ByteToBcd2>
 800224a:	0003      	movs	r3, r0
 800224c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800224e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	789b      	ldrb	r3, [r3, #2]
 8002254:	0018      	movs	r0, r3
 8002256:	f000 f9f7 	bl	8002648 <RTC_ByteToBcd2>
 800225a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800225c:	0022      	movs	r2, r4
 800225e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	78db      	ldrb	r3, [r3, #3]
 8002264:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002266:	431a      	orrs	r2, r3
 8002268:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	2220      	movs	r2, #32
 800226e:	5c9b      	ldrb	r3, [r3, r2]
 8002270:	0018      	movs	r0, r3
 8002272:	f000 f9e9 	bl	8002648 <RTC_ByteToBcd2>
 8002276:	0003      	movs	r3, r0
 8002278:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800227a:	0022      	movs	r2, r4
 800227c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002282:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002288:	4313      	orrs	r3, r2
 800228a:	61fb      	str	r3, [r7, #28]
 800228c:	e022      	b.n	80022d4 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	2240      	movs	r2, #64	; 0x40
 8002296:	4013      	ands	r3, r2
 8002298:	d102      	bne.n	80022a0 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	2200      	movs	r2, #0
 800229e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	785b      	ldrb	r3, [r3, #1]
 80022aa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80022ac:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80022b2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	78db      	ldrb	r3, [r3, #3]
 80022b8:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80022ba:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	2120      	movs	r1, #32
 80022c0:	5c5b      	ldrb	r3, [r3, r1]
 80022c2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80022c4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80022ca:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80022d0:	4313      	orrs	r3, r2
 80022d2:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	22ca      	movs	r2, #202	; 0xca
 80022e6:	625a      	str	r2, [r3, #36]	; 0x24
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2253      	movs	r2, #83	; 0x53
 80022ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022f4:	2380      	movs	r3, #128	; 0x80
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d14c      	bne.n	8002396 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	699a      	ldr	r2, [r3, #24]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4957      	ldr	r1, [pc, #348]	; (8002464 <HAL_RTC_SetAlarm_IT+0x274>)
 8002308:	400a      	ands	r2, r1
 800230a:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2101      	movs	r1, #1
 8002318:	430a      	orrs	r2, r1
 800231a:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 800231c:	f7fe fb3e 	bl	800099c <HAL_GetTick>
 8002320:	0003      	movs	r3, r0
 8002322:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002324:	e016      	b.n	8002354 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002326:	f7fe fb39 	bl	800099c <HAL_GetTick>
 800232a:	0002      	movs	r2, r0
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	1ad2      	subs	r2, r2, r3
 8002330:	23fa      	movs	r3, #250	; 0xfa
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	429a      	cmp	r2, r3
 8002336:	d90d      	bls.n	8002354 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	22ff      	movs	r2, #255	; 0xff
 800233e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2229      	movs	r2, #41	; 0x29
 8002344:	2103      	movs	r1, #3
 8002346:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2228      	movs	r2, #40	; 0x28
 800234c:	2100      	movs	r1, #0
 800234e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e082      	b.n	800245a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	2201      	movs	r2, #1
 800235c:	4013      	ands	r3, r2
 800235e:	d0e2      	beq.n	8002326 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	69fa      	ldr	r2, [r7, #28]
 8002366:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	699a      	ldr	r2, [r3, #24]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2180      	movs	r1, #128	; 0x80
 800237c:	0049      	lsls	r1, r1, #1
 800237e:	430a      	orrs	r2, r1
 8002380:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	699a      	ldr	r2, [r3, #24]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2180      	movs	r1, #128	; 0x80
 800238e:	0149      	lsls	r1, r1, #5
 8002390:	430a      	orrs	r2, r1
 8002392:	619a      	str	r2, [r3, #24]
 8002394:	e04b      	b.n	800242e <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	699a      	ldr	r2, [r3, #24]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4931      	ldr	r1, [pc, #196]	; (8002468 <HAL_RTC_SetAlarm_IT+0x278>)
 80023a2:	400a      	ands	r2, r1
 80023a4:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2102      	movs	r1, #2
 80023b2:	430a      	orrs	r2, r1
 80023b4:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 80023b6:	f7fe faf1 	bl	800099c <HAL_GetTick>
 80023ba:	0003      	movs	r3, r0
 80023bc:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80023be:	e016      	b.n	80023ee <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80023c0:	f7fe faec 	bl	800099c <HAL_GetTick>
 80023c4:	0002      	movs	r2, r0
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	1ad2      	subs	r2, r2, r3
 80023ca:	23fa      	movs	r3, #250	; 0xfa
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d90d      	bls.n	80023ee <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	22ff      	movs	r2, #255	; 0xff
 80023d8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2229      	movs	r2, #41	; 0x29
 80023de:	2103      	movs	r1, #3
 80023e0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2228      	movs	r2, #40	; 0x28
 80023e6:	2100      	movs	r1, #0
 80023e8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e035      	b.n	800245a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	2202      	movs	r2, #2
 80023f6:	4013      	ands	r3, r2
 80023f8:	d0e2      	beq.n	80023c0 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	69fa      	ldr	r2, [r7, #28]
 8002400:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	699a      	ldr	r2, [r3, #24]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2180      	movs	r1, #128	; 0x80
 8002416:	0089      	lsls	r1, r1, #2
 8002418:	430a      	orrs	r2, r1
 800241a:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	699a      	ldr	r2, [r3, #24]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2180      	movs	r1, #128	; 0x80
 8002428:	0189      	lsls	r1, r1, #6
 800242a:	430a      	orrs	r2, r1
 800242c:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800242e:	4a0f      	ldr	r2, [pc, #60]	; (800246c <HAL_RTC_SetAlarm_IT+0x27c>)
 8002430:	2380      	movs	r3, #128	; 0x80
 8002432:	58d3      	ldr	r3, [r2, r3]
 8002434:	490d      	ldr	r1, [pc, #52]	; (800246c <HAL_RTC_SetAlarm_IT+0x27c>)
 8002436:	2280      	movs	r2, #128	; 0x80
 8002438:	0312      	lsls	r2, r2, #12
 800243a:	4313      	orrs	r3, r2
 800243c:	2280      	movs	r2, #128	; 0x80
 800243e:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	22ff      	movs	r2, #255	; 0xff
 8002446:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2229      	movs	r2, #41	; 0x29
 800244c:	2101      	movs	r1, #1
 800244e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2228      	movs	r2, #40	; 0x28
 8002454:	2100      	movs	r1, #0
 8002456:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	0018      	movs	r0, r3
 800245c:	46bd      	mov	sp, r7
 800245e:	b009      	add	sp, #36	; 0x24
 8002460:	bd90      	pop	{r4, r7, pc}
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	fffffeff 	.word	0xfffffeff
 8002468:	fffffdff 	.word	0xfffffdff
 800246c:	40021800 	.word	0x40021800

08002470 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	699a      	ldr	r2, [r3, #24]
 800247e:	2380      	movs	r3, #128	; 0x80
 8002480:	015b      	lsls	r3, r3, #5
 8002482:	4013      	ands	r3, r2
 8002484:	d011      	beq.n	80024aa <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800248c:	2201      	movs	r2, #1
 800248e:	4013      	ands	r3, r2
 8002490:	d00b      	beq.n	80024aa <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2101      	movs	r1, #1
 800249e:	430a      	orrs	r2, r1
 80024a0:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	0018      	movs	r0, r3
 80024a6:	f7fe f83f 	bl	8000528 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	699a      	ldr	r2, [r3, #24]
 80024b0:	2380      	movs	r3, #128	; 0x80
 80024b2:	019b      	lsls	r3, r3, #6
 80024b4:	4013      	ands	r3, r2
 80024b6:	d011      	beq.n	80024dc <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024be:	2202      	movs	r2, #2
 80024c0:	4013      	ands	r3, r2
 80024c2:	d00b      	beq.n	80024dc <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2102      	movs	r1, #2
 80024d0:	430a      	orrs	r2, r1
 80024d2:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	0018      	movs	r0, r3
 80024d8:	f000 f8fb 	bl	80026d2 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2229      	movs	r2, #41	; 0x29
 80024e0:	2101      	movs	r1, #1
 80024e2:	5499      	strb	r1, [r3, r2]
}
 80024e4:	46c0      	nop			; (mov r8, r8)
 80024e6:	46bd      	mov	sp, r7
 80024e8:	b002      	add	sp, #8
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	21a0      	movs	r1, #160	; 0xa0
 8002500:	438a      	bics	r2, r1
 8002502:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002504:	f7fe fa4a 	bl	800099c <HAL_GetTick>
 8002508:	0003      	movs	r3, r0
 800250a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800250c:	e00a      	b.n	8002524 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800250e:	f7fe fa45 	bl	800099c <HAL_GetTick>
 8002512:	0002      	movs	r2, r0
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	1ad2      	subs	r2, r2, r3
 8002518:	23fa      	movs	r3, #250	; 0xfa
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	429a      	cmp	r2, r3
 800251e:	d901      	bls.n	8002524 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e006      	b.n	8002532 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	2220      	movs	r2, #32
 800252c:	4013      	ands	r3, r2
 800252e:	d0ee      	beq.n	800250e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	0018      	movs	r0, r3
 8002534:	46bd      	mov	sp, r7
 8002536:	b004      	add	sp, #16
 8002538:	bd80      	pop	{r7, pc}

0800253a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b084      	sub	sp, #16
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8002542:	230f      	movs	r3, #15
 8002544:	18fb      	adds	r3, r7, r3
 8002546:	2200      	movs	r2, #0
 8002548:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	2240      	movs	r2, #64	; 0x40
 8002552:	4013      	ands	r3, r2
 8002554:	d12c      	bne.n	80025b0 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68da      	ldr	r2, [r3, #12]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2180      	movs	r1, #128	; 0x80
 8002562:	430a      	orrs	r2, r1
 8002564:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002566:	f7fe fa19 	bl	800099c <HAL_GetTick>
 800256a:	0003      	movs	r3, r0
 800256c:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800256e:	e014      	b.n	800259a <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002570:	f7fe fa14 	bl	800099c <HAL_GetTick>
 8002574:	0002      	movs	r2, r0
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	1ad2      	subs	r2, r2, r3
 800257a:	200f      	movs	r0, #15
 800257c:	183b      	adds	r3, r7, r0
 800257e:	1839      	adds	r1, r7, r0
 8002580:	7809      	ldrb	r1, [r1, #0]
 8002582:	7019      	strb	r1, [r3, #0]
 8002584:	23fa      	movs	r3, #250	; 0xfa
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	429a      	cmp	r2, r3
 800258a:	d906      	bls.n	800259a <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800258c:	183b      	adds	r3, r7, r0
 800258e:	2203      	movs	r2, #3
 8002590:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2229      	movs	r2, #41	; 0x29
 8002596:	2103      	movs	r1, #3
 8002598:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	2240      	movs	r2, #64	; 0x40
 80025a2:	4013      	ands	r3, r2
 80025a4:	d104      	bne.n	80025b0 <RTC_EnterInitMode+0x76>
 80025a6:	230f      	movs	r3, #15
 80025a8:	18fb      	adds	r3, r7, r3
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b03      	cmp	r3, #3
 80025ae:	d1df      	bne.n	8002570 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80025b0:	230f      	movs	r3, #15
 80025b2:	18fb      	adds	r3, r7, r3
 80025b4:	781b      	ldrb	r3, [r3, #0]
}
 80025b6:	0018      	movs	r0, r3
 80025b8:	46bd      	mov	sp, r7
 80025ba:	b004      	add	sp, #16
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80025c0:	b590      	push	{r4, r7, lr}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025c8:	240f      	movs	r4, #15
 80025ca:	193b      	adds	r3, r7, r4
 80025cc:	2200      	movs	r2, #0
 80025ce:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80025d0:	4b1c      	ldr	r3, [pc, #112]	; (8002644 <RTC_ExitInitMode+0x84>)
 80025d2:	68da      	ldr	r2, [r3, #12]
 80025d4:	4b1b      	ldr	r3, [pc, #108]	; (8002644 <RTC_ExitInitMode+0x84>)
 80025d6:	2180      	movs	r1, #128	; 0x80
 80025d8:	438a      	bics	r2, r1
 80025da:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80025dc:	4b19      	ldr	r3, [pc, #100]	; (8002644 <RTC_ExitInitMode+0x84>)
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	2220      	movs	r2, #32
 80025e2:	4013      	ands	r3, r2
 80025e4:	d10d      	bne.n	8002602 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	0018      	movs	r0, r3
 80025ea:	f7ff ff7f 	bl	80024ec <HAL_RTC_WaitForSynchro>
 80025ee:	1e03      	subs	r3, r0, #0
 80025f0:	d021      	beq.n	8002636 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2229      	movs	r2, #41	; 0x29
 80025f6:	2103      	movs	r1, #3
 80025f8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80025fa:	193b      	adds	r3, r7, r4
 80025fc:	2203      	movs	r2, #3
 80025fe:	701a      	strb	r2, [r3, #0]
 8002600:	e019      	b.n	8002636 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002602:	4b10      	ldr	r3, [pc, #64]	; (8002644 <RTC_ExitInitMode+0x84>)
 8002604:	699a      	ldr	r2, [r3, #24]
 8002606:	4b0f      	ldr	r3, [pc, #60]	; (8002644 <RTC_ExitInitMode+0x84>)
 8002608:	2120      	movs	r1, #32
 800260a:	438a      	bics	r2, r1
 800260c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	0018      	movs	r0, r3
 8002612:	f7ff ff6b 	bl	80024ec <HAL_RTC_WaitForSynchro>
 8002616:	1e03      	subs	r3, r0, #0
 8002618:	d007      	beq.n	800262a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2229      	movs	r2, #41	; 0x29
 800261e:	2103      	movs	r1, #3
 8002620:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002622:	230f      	movs	r3, #15
 8002624:	18fb      	adds	r3, r7, r3
 8002626:	2203      	movs	r2, #3
 8002628:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800262a:	4b06      	ldr	r3, [pc, #24]	; (8002644 <RTC_ExitInitMode+0x84>)
 800262c:	699a      	ldr	r2, [r3, #24]
 800262e:	4b05      	ldr	r3, [pc, #20]	; (8002644 <RTC_ExitInitMode+0x84>)
 8002630:	2120      	movs	r1, #32
 8002632:	430a      	orrs	r2, r1
 8002634:	619a      	str	r2, [r3, #24]
  }

  return status;
 8002636:	230f      	movs	r3, #15
 8002638:	18fb      	adds	r3, r7, r3
 800263a:	781b      	ldrb	r3, [r3, #0]
}
 800263c:	0018      	movs	r0, r3
 800263e:	46bd      	mov	sp, r7
 8002640:	b005      	add	sp, #20
 8002642:	bd90      	pop	{r4, r7, pc}
 8002644:	40002800 	.word	0x40002800

08002648 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	0002      	movs	r2, r0
 8002650:	1dfb      	adds	r3, r7, #7
 8002652:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002654:	2300      	movs	r3, #0
 8002656:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8002658:	230b      	movs	r3, #11
 800265a:	18fb      	adds	r3, r7, r3
 800265c:	1dfa      	adds	r2, r7, #7
 800265e:	7812      	ldrb	r2, [r2, #0]
 8002660:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8002662:	e008      	b.n	8002676 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	3301      	adds	r3, #1
 8002668:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800266a:	220b      	movs	r2, #11
 800266c:	18bb      	adds	r3, r7, r2
 800266e:	18ba      	adds	r2, r7, r2
 8002670:	7812      	ldrb	r2, [r2, #0]
 8002672:	3a0a      	subs	r2, #10
 8002674:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8002676:	210b      	movs	r1, #11
 8002678:	187b      	adds	r3, r7, r1
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b09      	cmp	r3, #9
 800267e:	d8f1      	bhi.n	8002664 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	b2db      	uxtb	r3, r3
 8002684:	011b      	lsls	r3, r3, #4
 8002686:	b2da      	uxtb	r2, r3
 8002688:	187b      	adds	r3, r7, r1
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	4313      	orrs	r3, r2
 800268e:	b2db      	uxtb	r3, r3
}
 8002690:	0018      	movs	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	b004      	add	sp, #16
 8002696:	bd80      	pop	{r7, pc}

08002698 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	0002      	movs	r2, r0
 80026a0:	1dfb      	adds	r3, r7, #7
 80026a2:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80026a4:	1dfb      	adds	r3, r7, #7
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	091b      	lsrs	r3, r3, #4
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	001a      	movs	r2, r3
 80026ae:	0013      	movs	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	189b      	adds	r3, r3, r2
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	1dfb      	adds	r3, r7, #7
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	210f      	movs	r1, #15
 80026c2:	400b      	ands	r3, r1
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	18d3      	adds	r3, r2, r3
 80026c8:	b2db      	uxtb	r3, r3
}
 80026ca:	0018      	movs	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	b004      	add	sp, #16
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b082      	sub	sp, #8
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80026da:	46c0      	nop			; (mov r8, r8)
 80026dc:	46bd      	mov	sp, r7
 80026de:	b002      	add	sp, #8
 80026e0:	bd80      	pop	{r7, pc}
	...

080026e4 <__errno>:
 80026e4:	4b01      	ldr	r3, [pc, #4]	; (80026ec <__errno+0x8>)
 80026e6:	6818      	ldr	r0, [r3, #0]
 80026e8:	4770      	bx	lr
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	20000028 	.word	0x20000028

080026f0 <__libc_init_array>:
 80026f0:	b570      	push	{r4, r5, r6, lr}
 80026f2:	2600      	movs	r6, #0
 80026f4:	4d0c      	ldr	r5, [pc, #48]	; (8002728 <__libc_init_array+0x38>)
 80026f6:	4c0d      	ldr	r4, [pc, #52]	; (800272c <__libc_init_array+0x3c>)
 80026f8:	1b64      	subs	r4, r4, r5
 80026fa:	10a4      	asrs	r4, r4, #2
 80026fc:	42a6      	cmp	r6, r4
 80026fe:	d109      	bne.n	8002714 <__libc_init_array+0x24>
 8002700:	2600      	movs	r6, #0
 8002702:	f000 fc8b 	bl	800301c <_init>
 8002706:	4d0a      	ldr	r5, [pc, #40]	; (8002730 <__libc_init_array+0x40>)
 8002708:	4c0a      	ldr	r4, [pc, #40]	; (8002734 <__libc_init_array+0x44>)
 800270a:	1b64      	subs	r4, r4, r5
 800270c:	10a4      	asrs	r4, r4, #2
 800270e:	42a6      	cmp	r6, r4
 8002710:	d105      	bne.n	800271e <__libc_init_array+0x2e>
 8002712:	bd70      	pop	{r4, r5, r6, pc}
 8002714:	00b3      	lsls	r3, r6, #2
 8002716:	58eb      	ldr	r3, [r5, r3]
 8002718:	4798      	blx	r3
 800271a:	3601      	adds	r6, #1
 800271c:	e7ee      	b.n	80026fc <__libc_init_array+0xc>
 800271e:	00b3      	lsls	r3, r6, #2
 8002720:	58eb      	ldr	r3, [r5, r3]
 8002722:	4798      	blx	r3
 8002724:	3601      	adds	r6, #1
 8002726:	e7f2      	b.n	800270e <__libc_init_array+0x1e>
 8002728:	080030b8 	.word	0x080030b8
 800272c:	080030b8 	.word	0x080030b8
 8002730:	080030b8 	.word	0x080030b8
 8002734:	080030bc 	.word	0x080030bc

08002738 <memset>:
 8002738:	0003      	movs	r3, r0
 800273a:	1882      	adds	r2, r0, r2
 800273c:	4293      	cmp	r3, r2
 800273e:	d100      	bne.n	8002742 <memset+0xa>
 8002740:	4770      	bx	lr
 8002742:	7019      	strb	r1, [r3, #0]
 8002744:	3301      	adds	r3, #1
 8002746:	e7f9      	b.n	800273c <memset+0x4>

08002748 <siprintf>:
 8002748:	b40e      	push	{r1, r2, r3}
 800274a:	b500      	push	{lr}
 800274c:	490b      	ldr	r1, [pc, #44]	; (800277c <siprintf+0x34>)
 800274e:	b09c      	sub	sp, #112	; 0x70
 8002750:	ab1d      	add	r3, sp, #116	; 0x74
 8002752:	9002      	str	r0, [sp, #8]
 8002754:	9006      	str	r0, [sp, #24]
 8002756:	9107      	str	r1, [sp, #28]
 8002758:	9104      	str	r1, [sp, #16]
 800275a:	4809      	ldr	r0, [pc, #36]	; (8002780 <siprintf+0x38>)
 800275c:	4909      	ldr	r1, [pc, #36]	; (8002784 <siprintf+0x3c>)
 800275e:	cb04      	ldmia	r3!, {r2}
 8002760:	9105      	str	r1, [sp, #20]
 8002762:	6800      	ldr	r0, [r0, #0]
 8002764:	a902      	add	r1, sp, #8
 8002766:	9301      	str	r3, [sp, #4]
 8002768:	f000 f870 	bl	800284c <_svfiprintf_r>
 800276c:	2300      	movs	r3, #0
 800276e:	9a02      	ldr	r2, [sp, #8]
 8002770:	7013      	strb	r3, [r2, #0]
 8002772:	b01c      	add	sp, #112	; 0x70
 8002774:	bc08      	pop	{r3}
 8002776:	b003      	add	sp, #12
 8002778:	4718      	bx	r3
 800277a:	46c0      	nop			; (mov r8, r8)
 800277c:	7fffffff 	.word	0x7fffffff
 8002780:	20000028 	.word	0x20000028
 8002784:	ffff0208 	.word	0xffff0208

08002788 <__ssputs_r>:
 8002788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800278a:	688e      	ldr	r6, [r1, #8]
 800278c:	b085      	sub	sp, #20
 800278e:	0007      	movs	r7, r0
 8002790:	000c      	movs	r4, r1
 8002792:	9203      	str	r2, [sp, #12]
 8002794:	9301      	str	r3, [sp, #4]
 8002796:	429e      	cmp	r6, r3
 8002798:	d83c      	bhi.n	8002814 <__ssputs_r+0x8c>
 800279a:	2390      	movs	r3, #144	; 0x90
 800279c:	898a      	ldrh	r2, [r1, #12]
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	421a      	tst	r2, r3
 80027a2:	d034      	beq.n	800280e <__ssputs_r+0x86>
 80027a4:	6909      	ldr	r1, [r1, #16]
 80027a6:	6823      	ldr	r3, [r4, #0]
 80027a8:	6960      	ldr	r0, [r4, #20]
 80027aa:	1a5b      	subs	r3, r3, r1
 80027ac:	9302      	str	r3, [sp, #8]
 80027ae:	2303      	movs	r3, #3
 80027b0:	4343      	muls	r3, r0
 80027b2:	0fdd      	lsrs	r5, r3, #31
 80027b4:	18ed      	adds	r5, r5, r3
 80027b6:	9b01      	ldr	r3, [sp, #4]
 80027b8:	9802      	ldr	r0, [sp, #8]
 80027ba:	3301      	adds	r3, #1
 80027bc:	181b      	adds	r3, r3, r0
 80027be:	106d      	asrs	r5, r5, #1
 80027c0:	42ab      	cmp	r3, r5
 80027c2:	d900      	bls.n	80027c6 <__ssputs_r+0x3e>
 80027c4:	001d      	movs	r5, r3
 80027c6:	0553      	lsls	r3, r2, #21
 80027c8:	d532      	bpl.n	8002830 <__ssputs_r+0xa8>
 80027ca:	0029      	movs	r1, r5
 80027cc:	0038      	movs	r0, r7
 80027ce:	f000 fb53 	bl	8002e78 <_malloc_r>
 80027d2:	1e06      	subs	r6, r0, #0
 80027d4:	d109      	bne.n	80027ea <__ssputs_r+0x62>
 80027d6:	230c      	movs	r3, #12
 80027d8:	603b      	str	r3, [r7, #0]
 80027da:	2340      	movs	r3, #64	; 0x40
 80027dc:	2001      	movs	r0, #1
 80027de:	89a2      	ldrh	r2, [r4, #12]
 80027e0:	4240      	negs	r0, r0
 80027e2:	4313      	orrs	r3, r2
 80027e4:	81a3      	strh	r3, [r4, #12]
 80027e6:	b005      	add	sp, #20
 80027e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027ea:	9a02      	ldr	r2, [sp, #8]
 80027ec:	6921      	ldr	r1, [r4, #16]
 80027ee:	f000 faba 	bl	8002d66 <memcpy>
 80027f2:	89a3      	ldrh	r3, [r4, #12]
 80027f4:	4a14      	ldr	r2, [pc, #80]	; (8002848 <__ssputs_r+0xc0>)
 80027f6:	401a      	ands	r2, r3
 80027f8:	2380      	movs	r3, #128	; 0x80
 80027fa:	4313      	orrs	r3, r2
 80027fc:	81a3      	strh	r3, [r4, #12]
 80027fe:	9b02      	ldr	r3, [sp, #8]
 8002800:	6126      	str	r6, [r4, #16]
 8002802:	18f6      	adds	r6, r6, r3
 8002804:	6026      	str	r6, [r4, #0]
 8002806:	6165      	str	r5, [r4, #20]
 8002808:	9e01      	ldr	r6, [sp, #4]
 800280a:	1aed      	subs	r5, r5, r3
 800280c:	60a5      	str	r5, [r4, #8]
 800280e:	9b01      	ldr	r3, [sp, #4]
 8002810:	429e      	cmp	r6, r3
 8002812:	d900      	bls.n	8002816 <__ssputs_r+0x8e>
 8002814:	9e01      	ldr	r6, [sp, #4]
 8002816:	0032      	movs	r2, r6
 8002818:	9903      	ldr	r1, [sp, #12]
 800281a:	6820      	ldr	r0, [r4, #0]
 800281c:	f000 faac 	bl	8002d78 <memmove>
 8002820:	68a3      	ldr	r3, [r4, #8]
 8002822:	2000      	movs	r0, #0
 8002824:	1b9b      	subs	r3, r3, r6
 8002826:	60a3      	str	r3, [r4, #8]
 8002828:	6823      	ldr	r3, [r4, #0]
 800282a:	199e      	adds	r6, r3, r6
 800282c:	6026      	str	r6, [r4, #0]
 800282e:	e7da      	b.n	80027e6 <__ssputs_r+0x5e>
 8002830:	002a      	movs	r2, r5
 8002832:	0038      	movs	r0, r7
 8002834:	f000 fb96 	bl	8002f64 <_realloc_r>
 8002838:	1e06      	subs	r6, r0, #0
 800283a:	d1e0      	bne.n	80027fe <__ssputs_r+0x76>
 800283c:	0038      	movs	r0, r7
 800283e:	6921      	ldr	r1, [r4, #16]
 8002840:	f000 faae 	bl	8002da0 <_free_r>
 8002844:	e7c7      	b.n	80027d6 <__ssputs_r+0x4e>
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	fffffb7f 	.word	0xfffffb7f

0800284c <_svfiprintf_r>:
 800284c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800284e:	b0a1      	sub	sp, #132	; 0x84
 8002850:	9003      	str	r0, [sp, #12]
 8002852:	001d      	movs	r5, r3
 8002854:	898b      	ldrh	r3, [r1, #12]
 8002856:	000f      	movs	r7, r1
 8002858:	0016      	movs	r6, r2
 800285a:	061b      	lsls	r3, r3, #24
 800285c:	d511      	bpl.n	8002882 <_svfiprintf_r+0x36>
 800285e:	690b      	ldr	r3, [r1, #16]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10e      	bne.n	8002882 <_svfiprintf_r+0x36>
 8002864:	2140      	movs	r1, #64	; 0x40
 8002866:	f000 fb07 	bl	8002e78 <_malloc_r>
 800286a:	6038      	str	r0, [r7, #0]
 800286c:	6138      	str	r0, [r7, #16]
 800286e:	2800      	cmp	r0, #0
 8002870:	d105      	bne.n	800287e <_svfiprintf_r+0x32>
 8002872:	230c      	movs	r3, #12
 8002874:	9a03      	ldr	r2, [sp, #12]
 8002876:	3801      	subs	r0, #1
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	b021      	add	sp, #132	; 0x84
 800287c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800287e:	2340      	movs	r3, #64	; 0x40
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	2300      	movs	r3, #0
 8002884:	ac08      	add	r4, sp, #32
 8002886:	6163      	str	r3, [r4, #20]
 8002888:	3320      	adds	r3, #32
 800288a:	7663      	strb	r3, [r4, #25]
 800288c:	3310      	adds	r3, #16
 800288e:	76a3      	strb	r3, [r4, #26]
 8002890:	9507      	str	r5, [sp, #28]
 8002892:	0035      	movs	r5, r6
 8002894:	782b      	ldrb	r3, [r5, #0]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <_svfiprintf_r+0x52>
 800289a:	2b25      	cmp	r3, #37	; 0x25
 800289c:	d147      	bne.n	800292e <_svfiprintf_r+0xe2>
 800289e:	1bab      	subs	r3, r5, r6
 80028a0:	9305      	str	r3, [sp, #20]
 80028a2:	42b5      	cmp	r5, r6
 80028a4:	d00c      	beq.n	80028c0 <_svfiprintf_r+0x74>
 80028a6:	0032      	movs	r2, r6
 80028a8:	0039      	movs	r1, r7
 80028aa:	9803      	ldr	r0, [sp, #12]
 80028ac:	f7ff ff6c 	bl	8002788 <__ssputs_r>
 80028b0:	1c43      	adds	r3, r0, #1
 80028b2:	d100      	bne.n	80028b6 <_svfiprintf_r+0x6a>
 80028b4:	e0ae      	b.n	8002a14 <_svfiprintf_r+0x1c8>
 80028b6:	6962      	ldr	r2, [r4, #20]
 80028b8:	9b05      	ldr	r3, [sp, #20]
 80028ba:	4694      	mov	ip, r2
 80028bc:	4463      	add	r3, ip
 80028be:	6163      	str	r3, [r4, #20]
 80028c0:	782b      	ldrb	r3, [r5, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d100      	bne.n	80028c8 <_svfiprintf_r+0x7c>
 80028c6:	e0a5      	b.n	8002a14 <_svfiprintf_r+0x1c8>
 80028c8:	2201      	movs	r2, #1
 80028ca:	2300      	movs	r3, #0
 80028cc:	4252      	negs	r2, r2
 80028ce:	6062      	str	r2, [r4, #4]
 80028d0:	a904      	add	r1, sp, #16
 80028d2:	3254      	adds	r2, #84	; 0x54
 80028d4:	1852      	adds	r2, r2, r1
 80028d6:	1c6e      	adds	r6, r5, #1
 80028d8:	6023      	str	r3, [r4, #0]
 80028da:	60e3      	str	r3, [r4, #12]
 80028dc:	60a3      	str	r3, [r4, #8]
 80028de:	7013      	strb	r3, [r2, #0]
 80028e0:	65a3      	str	r3, [r4, #88]	; 0x58
 80028e2:	2205      	movs	r2, #5
 80028e4:	7831      	ldrb	r1, [r6, #0]
 80028e6:	4854      	ldr	r0, [pc, #336]	; (8002a38 <_svfiprintf_r+0x1ec>)
 80028e8:	f000 fa32 	bl	8002d50 <memchr>
 80028ec:	1c75      	adds	r5, r6, #1
 80028ee:	2800      	cmp	r0, #0
 80028f0:	d11f      	bne.n	8002932 <_svfiprintf_r+0xe6>
 80028f2:	6822      	ldr	r2, [r4, #0]
 80028f4:	06d3      	lsls	r3, r2, #27
 80028f6:	d504      	bpl.n	8002902 <_svfiprintf_r+0xb6>
 80028f8:	2353      	movs	r3, #83	; 0x53
 80028fa:	a904      	add	r1, sp, #16
 80028fc:	185b      	adds	r3, r3, r1
 80028fe:	2120      	movs	r1, #32
 8002900:	7019      	strb	r1, [r3, #0]
 8002902:	0713      	lsls	r3, r2, #28
 8002904:	d504      	bpl.n	8002910 <_svfiprintf_r+0xc4>
 8002906:	2353      	movs	r3, #83	; 0x53
 8002908:	a904      	add	r1, sp, #16
 800290a:	185b      	adds	r3, r3, r1
 800290c:	212b      	movs	r1, #43	; 0x2b
 800290e:	7019      	strb	r1, [r3, #0]
 8002910:	7833      	ldrb	r3, [r6, #0]
 8002912:	2b2a      	cmp	r3, #42	; 0x2a
 8002914:	d016      	beq.n	8002944 <_svfiprintf_r+0xf8>
 8002916:	0035      	movs	r5, r6
 8002918:	2100      	movs	r1, #0
 800291a:	200a      	movs	r0, #10
 800291c:	68e3      	ldr	r3, [r4, #12]
 800291e:	782a      	ldrb	r2, [r5, #0]
 8002920:	1c6e      	adds	r6, r5, #1
 8002922:	3a30      	subs	r2, #48	; 0x30
 8002924:	2a09      	cmp	r2, #9
 8002926:	d94e      	bls.n	80029c6 <_svfiprintf_r+0x17a>
 8002928:	2900      	cmp	r1, #0
 800292a:	d111      	bne.n	8002950 <_svfiprintf_r+0x104>
 800292c:	e017      	b.n	800295e <_svfiprintf_r+0x112>
 800292e:	3501      	adds	r5, #1
 8002930:	e7b0      	b.n	8002894 <_svfiprintf_r+0x48>
 8002932:	4b41      	ldr	r3, [pc, #260]	; (8002a38 <_svfiprintf_r+0x1ec>)
 8002934:	6822      	ldr	r2, [r4, #0]
 8002936:	1ac0      	subs	r0, r0, r3
 8002938:	2301      	movs	r3, #1
 800293a:	4083      	lsls	r3, r0
 800293c:	4313      	orrs	r3, r2
 800293e:	002e      	movs	r6, r5
 8002940:	6023      	str	r3, [r4, #0]
 8002942:	e7ce      	b.n	80028e2 <_svfiprintf_r+0x96>
 8002944:	9b07      	ldr	r3, [sp, #28]
 8002946:	1d19      	adds	r1, r3, #4
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	9107      	str	r1, [sp, #28]
 800294c:	2b00      	cmp	r3, #0
 800294e:	db01      	blt.n	8002954 <_svfiprintf_r+0x108>
 8002950:	930b      	str	r3, [sp, #44]	; 0x2c
 8002952:	e004      	b.n	800295e <_svfiprintf_r+0x112>
 8002954:	425b      	negs	r3, r3
 8002956:	60e3      	str	r3, [r4, #12]
 8002958:	2302      	movs	r3, #2
 800295a:	4313      	orrs	r3, r2
 800295c:	6023      	str	r3, [r4, #0]
 800295e:	782b      	ldrb	r3, [r5, #0]
 8002960:	2b2e      	cmp	r3, #46	; 0x2e
 8002962:	d10a      	bne.n	800297a <_svfiprintf_r+0x12e>
 8002964:	786b      	ldrb	r3, [r5, #1]
 8002966:	2b2a      	cmp	r3, #42	; 0x2a
 8002968:	d135      	bne.n	80029d6 <_svfiprintf_r+0x18a>
 800296a:	9b07      	ldr	r3, [sp, #28]
 800296c:	3502      	adds	r5, #2
 800296e:	1d1a      	adds	r2, r3, #4
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	9207      	str	r2, [sp, #28]
 8002974:	2b00      	cmp	r3, #0
 8002976:	db2b      	blt.n	80029d0 <_svfiprintf_r+0x184>
 8002978:	9309      	str	r3, [sp, #36]	; 0x24
 800297a:	4e30      	ldr	r6, [pc, #192]	; (8002a3c <_svfiprintf_r+0x1f0>)
 800297c:	2203      	movs	r2, #3
 800297e:	0030      	movs	r0, r6
 8002980:	7829      	ldrb	r1, [r5, #0]
 8002982:	f000 f9e5 	bl	8002d50 <memchr>
 8002986:	2800      	cmp	r0, #0
 8002988:	d006      	beq.n	8002998 <_svfiprintf_r+0x14c>
 800298a:	2340      	movs	r3, #64	; 0x40
 800298c:	1b80      	subs	r0, r0, r6
 800298e:	4083      	lsls	r3, r0
 8002990:	6822      	ldr	r2, [r4, #0]
 8002992:	3501      	adds	r5, #1
 8002994:	4313      	orrs	r3, r2
 8002996:	6023      	str	r3, [r4, #0]
 8002998:	7829      	ldrb	r1, [r5, #0]
 800299a:	2206      	movs	r2, #6
 800299c:	4828      	ldr	r0, [pc, #160]	; (8002a40 <_svfiprintf_r+0x1f4>)
 800299e:	1c6e      	adds	r6, r5, #1
 80029a0:	7621      	strb	r1, [r4, #24]
 80029a2:	f000 f9d5 	bl	8002d50 <memchr>
 80029a6:	2800      	cmp	r0, #0
 80029a8:	d03c      	beq.n	8002a24 <_svfiprintf_r+0x1d8>
 80029aa:	4b26      	ldr	r3, [pc, #152]	; (8002a44 <_svfiprintf_r+0x1f8>)
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d125      	bne.n	80029fc <_svfiprintf_r+0x1b0>
 80029b0:	2207      	movs	r2, #7
 80029b2:	9b07      	ldr	r3, [sp, #28]
 80029b4:	3307      	adds	r3, #7
 80029b6:	4393      	bics	r3, r2
 80029b8:	3308      	adds	r3, #8
 80029ba:	9307      	str	r3, [sp, #28]
 80029bc:	6963      	ldr	r3, [r4, #20]
 80029be:	9a04      	ldr	r2, [sp, #16]
 80029c0:	189b      	adds	r3, r3, r2
 80029c2:	6163      	str	r3, [r4, #20]
 80029c4:	e765      	b.n	8002892 <_svfiprintf_r+0x46>
 80029c6:	4343      	muls	r3, r0
 80029c8:	0035      	movs	r5, r6
 80029ca:	2101      	movs	r1, #1
 80029cc:	189b      	adds	r3, r3, r2
 80029ce:	e7a6      	b.n	800291e <_svfiprintf_r+0xd2>
 80029d0:	2301      	movs	r3, #1
 80029d2:	425b      	negs	r3, r3
 80029d4:	e7d0      	b.n	8002978 <_svfiprintf_r+0x12c>
 80029d6:	2300      	movs	r3, #0
 80029d8:	200a      	movs	r0, #10
 80029da:	001a      	movs	r2, r3
 80029dc:	3501      	adds	r5, #1
 80029de:	6063      	str	r3, [r4, #4]
 80029e0:	7829      	ldrb	r1, [r5, #0]
 80029e2:	1c6e      	adds	r6, r5, #1
 80029e4:	3930      	subs	r1, #48	; 0x30
 80029e6:	2909      	cmp	r1, #9
 80029e8:	d903      	bls.n	80029f2 <_svfiprintf_r+0x1a6>
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d0c5      	beq.n	800297a <_svfiprintf_r+0x12e>
 80029ee:	9209      	str	r2, [sp, #36]	; 0x24
 80029f0:	e7c3      	b.n	800297a <_svfiprintf_r+0x12e>
 80029f2:	4342      	muls	r2, r0
 80029f4:	0035      	movs	r5, r6
 80029f6:	2301      	movs	r3, #1
 80029f8:	1852      	adds	r2, r2, r1
 80029fa:	e7f1      	b.n	80029e0 <_svfiprintf_r+0x194>
 80029fc:	ab07      	add	r3, sp, #28
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	003a      	movs	r2, r7
 8002a02:	0021      	movs	r1, r4
 8002a04:	4b10      	ldr	r3, [pc, #64]	; (8002a48 <_svfiprintf_r+0x1fc>)
 8002a06:	9803      	ldr	r0, [sp, #12]
 8002a08:	e000      	b.n	8002a0c <_svfiprintf_r+0x1c0>
 8002a0a:	bf00      	nop
 8002a0c:	9004      	str	r0, [sp, #16]
 8002a0e:	9b04      	ldr	r3, [sp, #16]
 8002a10:	3301      	adds	r3, #1
 8002a12:	d1d3      	bne.n	80029bc <_svfiprintf_r+0x170>
 8002a14:	89bb      	ldrh	r3, [r7, #12]
 8002a16:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002a18:	065b      	lsls	r3, r3, #25
 8002a1a:	d400      	bmi.n	8002a1e <_svfiprintf_r+0x1d2>
 8002a1c:	e72d      	b.n	800287a <_svfiprintf_r+0x2e>
 8002a1e:	2001      	movs	r0, #1
 8002a20:	4240      	negs	r0, r0
 8002a22:	e72a      	b.n	800287a <_svfiprintf_r+0x2e>
 8002a24:	ab07      	add	r3, sp, #28
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	003a      	movs	r2, r7
 8002a2a:	0021      	movs	r1, r4
 8002a2c:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <_svfiprintf_r+0x1fc>)
 8002a2e:	9803      	ldr	r0, [sp, #12]
 8002a30:	f000 f87c 	bl	8002b2c <_printf_i>
 8002a34:	e7ea      	b.n	8002a0c <_svfiprintf_r+0x1c0>
 8002a36:	46c0      	nop			; (mov r8, r8)
 8002a38:	08003084 	.word	0x08003084
 8002a3c:	0800308a 	.word	0x0800308a
 8002a40:	0800308e 	.word	0x0800308e
 8002a44:	00000000 	.word	0x00000000
 8002a48:	08002789 	.word	0x08002789

08002a4c <_printf_common>:
 8002a4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a4e:	0015      	movs	r5, r2
 8002a50:	9301      	str	r3, [sp, #4]
 8002a52:	688a      	ldr	r2, [r1, #8]
 8002a54:	690b      	ldr	r3, [r1, #16]
 8002a56:	000c      	movs	r4, r1
 8002a58:	9000      	str	r0, [sp, #0]
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	da00      	bge.n	8002a60 <_printf_common+0x14>
 8002a5e:	0013      	movs	r3, r2
 8002a60:	0022      	movs	r2, r4
 8002a62:	602b      	str	r3, [r5, #0]
 8002a64:	3243      	adds	r2, #67	; 0x43
 8002a66:	7812      	ldrb	r2, [r2, #0]
 8002a68:	2a00      	cmp	r2, #0
 8002a6a:	d001      	beq.n	8002a70 <_printf_common+0x24>
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	602b      	str	r3, [r5, #0]
 8002a70:	6823      	ldr	r3, [r4, #0]
 8002a72:	069b      	lsls	r3, r3, #26
 8002a74:	d502      	bpl.n	8002a7c <_printf_common+0x30>
 8002a76:	682b      	ldr	r3, [r5, #0]
 8002a78:	3302      	adds	r3, #2
 8002a7a:	602b      	str	r3, [r5, #0]
 8002a7c:	6822      	ldr	r2, [r4, #0]
 8002a7e:	2306      	movs	r3, #6
 8002a80:	0017      	movs	r7, r2
 8002a82:	401f      	ands	r7, r3
 8002a84:	421a      	tst	r2, r3
 8002a86:	d027      	beq.n	8002ad8 <_printf_common+0x8c>
 8002a88:	0023      	movs	r3, r4
 8002a8a:	3343      	adds	r3, #67	; 0x43
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	1e5a      	subs	r2, r3, #1
 8002a90:	4193      	sbcs	r3, r2
 8002a92:	6822      	ldr	r2, [r4, #0]
 8002a94:	0692      	lsls	r2, r2, #26
 8002a96:	d430      	bmi.n	8002afa <_printf_common+0xae>
 8002a98:	0022      	movs	r2, r4
 8002a9a:	9901      	ldr	r1, [sp, #4]
 8002a9c:	9800      	ldr	r0, [sp, #0]
 8002a9e:	9e08      	ldr	r6, [sp, #32]
 8002aa0:	3243      	adds	r2, #67	; 0x43
 8002aa2:	47b0      	blx	r6
 8002aa4:	1c43      	adds	r3, r0, #1
 8002aa6:	d025      	beq.n	8002af4 <_printf_common+0xa8>
 8002aa8:	2306      	movs	r3, #6
 8002aaa:	6820      	ldr	r0, [r4, #0]
 8002aac:	682a      	ldr	r2, [r5, #0]
 8002aae:	68e1      	ldr	r1, [r4, #12]
 8002ab0:	2500      	movs	r5, #0
 8002ab2:	4003      	ands	r3, r0
 8002ab4:	2b04      	cmp	r3, #4
 8002ab6:	d103      	bne.n	8002ac0 <_printf_common+0x74>
 8002ab8:	1a8d      	subs	r5, r1, r2
 8002aba:	43eb      	mvns	r3, r5
 8002abc:	17db      	asrs	r3, r3, #31
 8002abe:	401d      	ands	r5, r3
 8002ac0:	68a3      	ldr	r3, [r4, #8]
 8002ac2:	6922      	ldr	r2, [r4, #16]
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	dd01      	ble.n	8002acc <_printf_common+0x80>
 8002ac8:	1a9b      	subs	r3, r3, r2
 8002aca:	18ed      	adds	r5, r5, r3
 8002acc:	2700      	movs	r7, #0
 8002ace:	42bd      	cmp	r5, r7
 8002ad0:	d120      	bne.n	8002b14 <_printf_common+0xc8>
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	e010      	b.n	8002af8 <_printf_common+0xac>
 8002ad6:	3701      	adds	r7, #1
 8002ad8:	68e3      	ldr	r3, [r4, #12]
 8002ada:	682a      	ldr	r2, [r5, #0]
 8002adc:	1a9b      	subs	r3, r3, r2
 8002ade:	42bb      	cmp	r3, r7
 8002ae0:	ddd2      	ble.n	8002a88 <_printf_common+0x3c>
 8002ae2:	0022      	movs	r2, r4
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	9901      	ldr	r1, [sp, #4]
 8002ae8:	9800      	ldr	r0, [sp, #0]
 8002aea:	9e08      	ldr	r6, [sp, #32]
 8002aec:	3219      	adds	r2, #25
 8002aee:	47b0      	blx	r6
 8002af0:	1c43      	adds	r3, r0, #1
 8002af2:	d1f0      	bne.n	8002ad6 <_printf_common+0x8a>
 8002af4:	2001      	movs	r0, #1
 8002af6:	4240      	negs	r0, r0
 8002af8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002afa:	2030      	movs	r0, #48	; 0x30
 8002afc:	18e1      	adds	r1, r4, r3
 8002afe:	3143      	adds	r1, #67	; 0x43
 8002b00:	7008      	strb	r0, [r1, #0]
 8002b02:	0021      	movs	r1, r4
 8002b04:	1c5a      	adds	r2, r3, #1
 8002b06:	3145      	adds	r1, #69	; 0x45
 8002b08:	7809      	ldrb	r1, [r1, #0]
 8002b0a:	18a2      	adds	r2, r4, r2
 8002b0c:	3243      	adds	r2, #67	; 0x43
 8002b0e:	3302      	adds	r3, #2
 8002b10:	7011      	strb	r1, [r2, #0]
 8002b12:	e7c1      	b.n	8002a98 <_printf_common+0x4c>
 8002b14:	0022      	movs	r2, r4
 8002b16:	2301      	movs	r3, #1
 8002b18:	9901      	ldr	r1, [sp, #4]
 8002b1a:	9800      	ldr	r0, [sp, #0]
 8002b1c:	9e08      	ldr	r6, [sp, #32]
 8002b1e:	321a      	adds	r2, #26
 8002b20:	47b0      	blx	r6
 8002b22:	1c43      	adds	r3, r0, #1
 8002b24:	d0e6      	beq.n	8002af4 <_printf_common+0xa8>
 8002b26:	3701      	adds	r7, #1
 8002b28:	e7d1      	b.n	8002ace <_printf_common+0x82>
	...

08002b2c <_printf_i>:
 8002b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b2e:	b08b      	sub	sp, #44	; 0x2c
 8002b30:	9206      	str	r2, [sp, #24]
 8002b32:	000a      	movs	r2, r1
 8002b34:	3243      	adds	r2, #67	; 0x43
 8002b36:	9307      	str	r3, [sp, #28]
 8002b38:	9005      	str	r0, [sp, #20]
 8002b3a:	9204      	str	r2, [sp, #16]
 8002b3c:	7e0a      	ldrb	r2, [r1, #24]
 8002b3e:	000c      	movs	r4, r1
 8002b40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002b42:	2a78      	cmp	r2, #120	; 0x78
 8002b44:	d807      	bhi.n	8002b56 <_printf_i+0x2a>
 8002b46:	2a62      	cmp	r2, #98	; 0x62
 8002b48:	d809      	bhi.n	8002b5e <_printf_i+0x32>
 8002b4a:	2a00      	cmp	r2, #0
 8002b4c:	d100      	bne.n	8002b50 <_printf_i+0x24>
 8002b4e:	e0c1      	b.n	8002cd4 <_printf_i+0x1a8>
 8002b50:	2a58      	cmp	r2, #88	; 0x58
 8002b52:	d100      	bne.n	8002b56 <_printf_i+0x2a>
 8002b54:	e08c      	b.n	8002c70 <_printf_i+0x144>
 8002b56:	0026      	movs	r6, r4
 8002b58:	3642      	adds	r6, #66	; 0x42
 8002b5a:	7032      	strb	r2, [r6, #0]
 8002b5c:	e022      	b.n	8002ba4 <_printf_i+0x78>
 8002b5e:	0010      	movs	r0, r2
 8002b60:	3863      	subs	r0, #99	; 0x63
 8002b62:	2815      	cmp	r0, #21
 8002b64:	d8f7      	bhi.n	8002b56 <_printf_i+0x2a>
 8002b66:	f7fd facd 	bl	8000104 <__gnu_thumb1_case_shi>
 8002b6a:	0016      	.short	0x0016
 8002b6c:	fff6001f 	.word	0xfff6001f
 8002b70:	fff6fff6 	.word	0xfff6fff6
 8002b74:	001ffff6 	.word	0x001ffff6
 8002b78:	fff6fff6 	.word	0xfff6fff6
 8002b7c:	fff6fff6 	.word	0xfff6fff6
 8002b80:	003600a8 	.word	0x003600a8
 8002b84:	fff6009a 	.word	0xfff6009a
 8002b88:	00b9fff6 	.word	0x00b9fff6
 8002b8c:	0036fff6 	.word	0x0036fff6
 8002b90:	fff6fff6 	.word	0xfff6fff6
 8002b94:	009e      	.short	0x009e
 8002b96:	0026      	movs	r6, r4
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	3642      	adds	r6, #66	; 0x42
 8002b9c:	1d11      	adds	r1, r2, #4
 8002b9e:	6019      	str	r1, [r3, #0]
 8002ba0:	6813      	ldr	r3, [r2, #0]
 8002ba2:	7033      	strb	r3, [r6, #0]
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e0a7      	b.n	8002cf8 <_printf_i+0x1cc>
 8002ba8:	6808      	ldr	r0, [r1, #0]
 8002baa:	6819      	ldr	r1, [r3, #0]
 8002bac:	1d0a      	adds	r2, r1, #4
 8002bae:	0605      	lsls	r5, r0, #24
 8002bb0:	d50b      	bpl.n	8002bca <_printf_i+0x9e>
 8002bb2:	680d      	ldr	r5, [r1, #0]
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	2d00      	cmp	r5, #0
 8002bb8:	da03      	bge.n	8002bc2 <_printf_i+0x96>
 8002bba:	232d      	movs	r3, #45	; 0x2d
 8002bbc:	9a04      	ldr	r2, [sp, #16]
 8002bbe:	426d      	negs	r5, r5
 8002bc0:	7013      	strb	r3, [r2, #0]
 8002bc2:	4b61      	ldr	r3, [pc, #388]	; (8002d48 <_printf_i+0x21c>)
 8002bc4:	270a      	movs	r7, #10
 8002bc6:	9303      	str	r3, [sp, #12]
 8002bc8:	e01b      	b.n	8002c02 <_printf_i+0xd6>
 8002bca:	680d      	ldr	r5, [r1, #0]
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	0641      	lsls	r1, r0, #25
 8002bd0:	d5f1      	bpl.n	8002bb6 <_printf_i+0x8a>
 8002bd2:	b22d      	sxth	r5, r5
 8002bd4:	e7ef      	b.n	8002bb6 <_printf_i+0x8a>
 8002bd6:	680d      	ldr	r5, [r1, #0]
 8002bd8:	6819      	ldr	r1, [r3, #0]
 8002bda:	1d08      	adds	r0, r1, #4
 8002bdc:	6018      	str	r0, [r3, #0]
 8002bde:	062e      	lsls	r6, r5, #24
 8002be0:	d501      	bpl.n	8002be6 <_printf_i+0xba>
 8002be2:	680d      	ldr	r5, [r1, #0]
 8002be4:	e003      	b.n	8002bee <_printf_i+0xc2>
 8002be6:	066d      	lsls	r5, r5, #25
 8002be8:	d5fb      	bpl.n	8002be2 <_printf_i+0xb6>
 8002bea:	680d      	ldr	r5, [r1, #0]
 8002bec:	b2ad      	uxth	r5, r5
 8002bee:	4b56      	ldr	r3, [pc, #344]	; (8002d48 <_printf_i+0x21c>)
 8002bf0:	2708      	movs	r7, #8
 8002bf2:	9303      	str	r3, [sp, #12]
 8002bf4:	2a6f      	cmp	r2, #111	; 0x6f
 8002bf6:	d000      	beq.n	8002bfa <_printf_i+0xce>
 8002bf8:	3702      	adds	r7, #2
 8002bfa:	0023      	movs	r3, r4
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	3343      	adds	r3, #67	; 0x43
 8002c00:	701a      	strb	r2, [r3, #0]
 8002c02:	6863      	ldr	r3, [r4, #4]
 8002c04:	60a3      	str	r3, [r4, #8]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	db03      	blt.n	8002c12 <_printf_i+0xe6>
 8002c0a:	2204      	movs	r2, #4
 8002c0c:	6821      	ldr	r1, [r4, #0]
 8002c0e:	4391      	bics	r1, r2
 8002c10:	6021      	str	r1, [r4, #0]
 8002c12:	2d00      	cmp	r5, #0
 8002c14:	d102      	bne.n	8002c1c <_printf_i+0xf0>
 8002c16:	9e04      	ldr	r6, [sp, #16]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00c      	beq.n	8002c36 <_printf_i+0x10a>
 8002c1c:	9e04      	ldr	r6, [sp, #16]
 8002c1e:	0028      	movs	r0, r5
 8002c20:	0039      	movs	r1, r7
 8002c22:	f7fd faff 	bl	8000224 <__aeabi_uidivmod>
 8002c26:	9b03      	ldr	r3, [sp, #12]
 8002c28:	3e01      	subs	r6, #1
 8002c2a:	5c5b      	ldrb	r3, [r3, r1]
 8002c2c:	7033      	strb	r3, [r6, #0]
 8002c2e:	002b      	movs	r3, r5
 8002c30:	0005      	movs	r5, r0
 8002c32:	429f      	cmp	r7, r3
 8002c34:	d9f3      	bls.n	8002c1e <_printf_i+0xf2>
 8002c36:	2f08      	cmp	r7, #8
 8002c38:	d109      	bne.n	8002c4e <_printf_i+0x122>
 8002c3a:	6823      	ldr	r3, [r4, #0]
 8002c3c:	07db      	lsls	r3, r3, #31
 8002c3e:	d506      	bpl.n	8002c4e <_printf_i+0x122>
 8002c40:	6863      	ldr	r3, [r4, #4]
 8002c42:	6922      	ldr	r2, [r4, #16]
 8002c44:	4293      	cmp	r3, r2
 8002c46:	dc02      	bgt.n	8002c4e <_printf_i+0x122>
 8002c48:	2330      	movs	r3, #48	; 0x30
 8002c4a:	3e01      	subs	r6, #1
 8002c4c:	7033      	strb	r3, [r6, #0]
 8002c4e:	9b04      	ldr	r3, [sp, #16]
 8002c50:	1b9b      	subs	r3, r3, r6
 8002c52:	6123      	str	r3, [r4, #16]
 8002c54:	9b07      	ldr	r3, [sp, #28]
 8002c56:	0021      	movs	r1, r4
 8002c58:	9300      	str	r3, [sp, #0]
 8002c5a:	9805      	ldr	r0, [sp, #20]
 8002c5c:	9b06      	ldr	r3, [sp, #24]
 8002c5e:	aa09      	add	r2, sp, #36	; 0x24
 8002c60:	f7ff fef4 	bl	8002a4c <_printf_common>
 8002c64:	1c43      	adds	r3, r0, #1
 8002c66:	d14c      	bne.n	8002d02 <_printf_i+0x1d6>
 8002c68:	2001      	movs	r0, #1
 8002c6a:	4240      	negs	r0, r0
 8002c6c:	b00b      	add	sp, #44	; 0x2c
 8002c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c70:	3145      	adds	r1, #69	; 0x45
 8002c72:	700a      	strb	r2, [r1, #0]
 8002c74:	4a34      	ldr	r2, [pc, #208]	; (8002d48 <_printf_i+0x21c>)
 8002c76:	9203      	str	r2, [sp, #12]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	6821      	ldr	r1, [r4, #0]
 8002c7c:	ca20      	ldmia	r2!, {r5}
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	0608      	lsls	r0, r1, #24
 8002c82:	d516      	bpl.n	8002cb2 <_printf_i+0x186>
 8002c84:	07cb      	lsls	r3, r1, #31
 8002c86:	d502      	bpl.n	8002c8e <_printf_i+0x162>
 8002c88:	2320      	movs	r3, #32
 8002c8a:	4319      	orrs	r1, r3
 8002c8c:	6021      	str	r1, [r4, #0]
 8002c8e:	2710      	movs	r7, #16
 8002c90:	2d00      	cmp	r5, #0
 8002c92:	d1b2      	bne.n	8002bfa <_printf_i+0xce>
 8002c94:	2320      	movs	r3, #32
 8002c96:	6822      	ldr	r2, [r4, #0]
 8002c98:	439a      	bics	r2, r3
 8002c9a:	6022      	str	r2, [r4, #0]
 8002c9c:	e7ad      	b.n	8002bfa <_printf_i+0xce>
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	6809      	ldr	r1, [r1, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	6022      	str	r2, [r4, #0]
 8002ca6:	0022      	movs	r2, r4
 8002ca8:	2178      	movs	r1, #120	; 0x78
 8002caa:	3245      	adds	r2, #69	; 0x45
 8002cac:	7011      	strb	r1, [r2, #0]
 8002cae:	4a27      	ldr	r2, [pc, #156]	; (8002d4c <_printf_i+0x220>)
 8002cb0:	e7e1      	b.n	8002c76 <_printf_i+0x14a>
 8002cb2:	0648      	lsls	r0, r1, #25
 8002cb4:	d5e6      	bpl.n	8002c84 <_printf_i+0x158>
 8002cb6:	b2ad      	uxth	r5, r5
 8002cb8:	e7e4      	b.n	8002c84 <_printf_i+0x158>
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	680d      	ldr	r5, [r1, #0]
 8002cbe:	1d10      	adds	r0, r2, #4
 8002cc0:	6949      	ldr	r1, [r1, #20]
 8002cc2:	6018      	str	r0, [r3, #0]
 8002cc4:	6813      	ldr	r3, [r2, #0]
 8002cc6:	062e      	lsls	r6, r5, #24
 8002cc8:	d501      	bpl.n	8002cce <_printf_i+0x1a2>
 8002cca:	6019      	str	r1, [r3, #0]
 8002ccc:	e002      	b.n	8002cd4 <_printf_i+0x1a8>
 8002cce:	066d      	lsls	r5, r5, #25
 8002cd0:	d5fb      	bpl.n	8002cca <_printf_i+0x19e>
 8002cd2:	8019      	strh	r1, [r3, #0]
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	9e04      	ldr	r6, [sp, #16]
 8002cd8:	6123      	str	r3, [r4, #16]
 8002cda:	e7bb      	b.n	8002c54 <_printf_i+0x128>
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	1d11      	adds	r1, r2, #4
 8002ce0:	6019      	str	r1, [r3, #0]
 8002ce2:	6816      	ldr	r6, [r2, #0]
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	0030      	movs	r0, r6
 8002ce8:	6862      	ldr	r2, [r4, #4]
 8002cea:	f000 f831 	bl	8002d50 <memchr>
 8002cee:	2800      	cmp	r0, #0
 8002cf0:	d001      	beq.n	8002cf6 <_printf_i+0x1ca>
 8002cf2:	1b80      	subs	r0, r0, r6
 8002cf4:	6060      	str	r0, [r4, #4]
 8002cf6:	6863      	ldr	r3, [r4, #4]
 8002cf8:	6123      	str	r3, [r4, #16]
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	9a04      	ldr	r2, [sp, #16]
 8002cfe:	7013      	strb	r3, [r2, #0]
 8002d00:	e7a8      	b.n	8002c54 <_printf_i+0x128>
 8002d02:	6923      	ldr	r3, [r4, #16]
 8002d04:	0032      	movs	r2, r6
 8002d06:	9906      	ldr	r1, [sp, #24]
 8002d08:	9805      	ldr	r0, [sp, #20]
 8002d0a:	9d07      	ldr	r5, [sp, #28]
 8002d0c:	47a8      	blx	r5
 8002d0e:	1c43      	adds	r3, r0, #1
 8002d10:	d0aa      	beq.n	8002c68 <_printf_i+0x13c>
 8002d12:	6823      	ldr	r3, [r4, #0]
 8002d14:	079b      	lsls	r3, r3, #30
 8002d16:	d415      	bmi.n	8002d44 <_printf_i+0x218>
 8002d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d1a:	68e0      	ldr	r0, [r4, #12]
 8002d1c:	4298      	cmp	r0, r3
 8002d1e:	daa5      	bge.n	8002c6c <_printf_i+0x140>
 8002d20:	0018      	movs	r0, r3
 8002d22:	e7a3      	b.n	8002c6c <_printf_i+0x140>
 8002d24:	0022      	movs	r2, r4
 8002d26:	2301      	movs	r3, #1
 8002d28:	9906      	ldr	r1, [sp, #24]
 8002d2a:	9805      	ldr	r0, [sp, #20]
 8002d2c:	9e07      	ldr	r6, [sp, #28]
 8002d2e:	3219      	adds	r2, #25
 8002d30:	47b0      	blx	r6
 8002d32:	1c43      	adds	r3, r0, #1
 8002d34:	d098      	beq.n	8002c68 <_printf_i+0x13c>
 8002d36:	3501      	adds	r5, #1
 8002d38:	68e3      	ldr	r3, [r4, #12]
 8002d3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d3c:	1a9b      	subs	r3, r3, r2
 8002d3e:	42ab      	cmp	r3, r5
 8002d40:	dcf0      	bgt.n	8002d24 <_printf_i+0x1f8>
 8002d42:	e7e9      	b.n	8002d18 <_printf_i+0x1ec>
 8002d44:	2500      	movs	r5, #0
 8002d46:	e7f7      	b.n	8002d38 <_printf_i+0x20c>
 8002d48:	08003095 	.word	0x08003095
 8002d4c:	080030a6 	.word	0x080030a6

08002d50 <memchr>:
 8002d50:	b2c9      	uxtb	r1, r1
 8002d52:	1882      	adds	r2, r0, r2
 8002d54:	4290      	cmp	r0, r2
 8002d56:	d101      	bne.n	8002d5c <memchr+0xc>
 8002d58:	2000      	movs	r0, #0
 8002d5a:	4770      	bx	lr
 8002d5c:	7803      	ldrb	r3, [r0, #0]
 8002d5e:	428b      	cmp	r3, r1
 8002d60:	d0fb      	beq.n	8002d5a <memchr+0xa>
 8002d62:	3001      	adds	r0, #1
 8002d64:	e7f6      	b.n	8002d54 <memchr+0x4>

08002d66 <memcpy>:
 8002d66:	2300      	movs	r3, #0
 8002d68:	b510      	push	{r4, lr}
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d100      	bne.n	8002d70 <memcpy+0xa>
 8002d6e:	bd10      	pop	{r4, pc}
 8002d70:	5ccc      	ldrb	r4, [r1, r3]
 8002d72:	54c4      	strb	r4, [r0, r3]
 8002d74:	3301      	adds	r3, #1
 8002d76:	e7f8      	b.n	8002d6a <memcpy+0x4>

08002d78 <memmove>:
 8002d78:	b510      	push	{r4, lr}
 8002d7a:	4288      	cmp	r0, r1
 8002d7c:	d902      	bls.n	8002d84 <memmove+0xc>
 8002d7e:	188b      	adds	r3, r1, r2
 8002d80:	4298      	cmp	r0, r3
 8002d82:	d303      	bcc.n	8002d8c <memmove+0x14>
 8002d84:	2300      	movs	r3, #0
 8002d86:	e007      	b.n	8002d98 <memmove+0x20>
 8002d88:	5c8b      	ldrb	r3, [r1, r2]
 8002d8a:	5483      	strb	r3, [r0, r2]
 8002d8c:	3a01      	subs	r2, #1
 8002d8e:	d2fb      	bcs.n	8002d88 <memmove+0x10>
 8002d90:	bd10      	pop	{r4, pc}
 8002d92:	5ccc      	ldrb	r4, [r1, r3]
 8002d94:	54c4      	strb	r4, [r0, r3]
 8002d96:	3301      	adds	r3, #1
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d1fa      	bne.n	8002d92 <memmove+0x1a>
 8002d9c:	e7f8      	b.n	8002d90 <memmove+0x18>
	...

08002da0 <_free_r>:
 8002da0:	b570      	push	{r4, r5, r6, lr}
 8002da2:	0005      	movs	r5, r0
 8002da4:	2900      	cmp	r1, #0
 8002da6:	d010      	beq.n	8002dca <_free_r+0x2a>
 8002da8:	1f0c      	subs	r4, r1, #4
 8002daa:	6823      	ldr	r3, [r4, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	da00      	bge.n	8002db2 <_free_r+0x12>
 8002db0:	18e4      	adds	r4, r4, r3
 8002db2:	0028      	movs	r0, r5
 8002db4:	f000 f918 	bl	8002fe8 <__malloc_lock>
 8002db8:	4a1d      	ldr	r2, [pc, #116]	; (8002e30 <_free_r+0x90>)
 8002dba:	6813      	ldr	r3, [r2, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d105      	bne.n	8002dcc <_free_r+0x2c>
 8002dc0:	6063      	str	r3, [r4, #4]
 8002dc2:	6014      	str	r4, [r2, #0]
 8002dc4:	0028      	movs	r0, r5
 8002dc6:	f000 f917 	bl	8002ff8 <__malloc_unlock>
 8002dca:	bd70      	pop	{r4, r5, r6, pc}
 8002dcc:	42a3      	cmp	r3, r4
 8002dce:	d908      	bls.n	8002de2 <_free_r+0x42>
 8002dd0:	6821      	ldr	r1, [r4, #0]
 8002dd2:	1860      	adds	r0, r4, r1
 8002dd4:	4283      	cmp	r3, r0
 8002dd6:	d1f3      	bne.n	8002dc0 <_free_r+0x20>
 8002dd8:	6818      	ldr	r0, [r3, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	1841      	adds	r1, r0, r1
 8002dde:	6021      	str	r1, [r4, #0]
 8002de0:	e7ee      	b.n	8002dc0 <_free_r+0x20>
 8002de2:	001a      	movs	r2, r3
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <_free_r+0x4e>
 8002dea:	42a3      	cmp	r3, r4
 8002dec:	d9f9      	bls.n	8002de2 <_free_r+0x42>
 8002dee:	6811      	ldr	r1, [r2, #0]
 8002df0:	1850      	adds	r0, r2, r1
 8002df2:	42a0      	cmp	r0, r4
 8002df4:	d10b      	bne.n	8002e0e <_free_r+0x6e>
 8002df6:	6820      	ldr	r0, [r4, #0]
 8002df8:	1809      	adds	r1, r1, r0
 8002dfa:	1850      	adds	r0, r2, r1
 8002dfc:	6011      	str	r1, [r2, #0]
 8002dfe:	4283      	cmp	r3, r0
 8002e00:	d1e0      	bne.n	8002dc4 <_free_r+0x24>
 8002e02:	6818      	ldr	r0, [r3, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	1841      	adds	r1, r0, r1
 8002e08:	6011      	str	r1, [r2, #0]
 8002e0a:	6053      	str	r3, [r2, #4]
 8002e0c:	e7da      	b.n	8002dc4 <_free_r+0x24>
 8002e0e:	42a0      	cmp	r0, r4
 8002e10:	d902      	bls.n	8002e18 <_free_r+0x78>
 8002e12:	230c      	movs	r3, #12
 8002e14:	602b      	str	r3, [r5, #0]
 8002e16:	e7d5      	b.n	8002dc4 <_free_r+0x24>
 8002e18:	6821      	ldr	r1, [r4, #0]
 8002e1a:	1860      	adds	r0, r4, r1
 8002e1c:	4283      	cmp	r3, r0
 8002e1e:	d103      	bne.n	8002e28 <_free_r+0x88>
 8002e20:	6818      	ldr	r0, [r3, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	1841      	adds	r1, r0, r1
 8002e26:	6021      	str	r1, [r4, #0]
 8002e28:	6063      	str	r3, [r4, #4]
 8002e2a:	6054      	str	r4, [r2, #4]
 8002e2c:	e7ca      	b.n	8002dc4 <_free_r+0x24>
 8002e2e:	46c0      	nop			; (mov r8, r8)
 8002e30:	200000e0 	.word	0x200000e0

08002e34 <sbrk_aligned>:
 8002e34:	b570      	push	{r4, r5, r6, lr}
 8002e36:	4e0f      	ldr	r6, [pc, #60]	; (8002e74 <sbrk_aligned+0x40>)
 8002e38:	000d      	movs	r5, r1
 8002e3a:	6831      	ldr	r1, [r6, #0]
 8002e3c:	0004      	movs	r4, r0
 8002e3e:	2900      	cmp	r1, #0
 8002e40:	d102      	bne.n	8002e48 <sbrk_aligned+0x14>
 8002e42:	f000 f8bf 	bl	8002fc4 <_sbrk_r>
 8002e46:	6030      	str	r0, [r6, #0]
 8002e48:	0029      	movs	r1, r5
 8002e4a:	0020      	movs	r0, r4
 8002e4c:	f000 f8ba 	bl	8002fc4 <_sbrk_r>
 8002e50:	1c43      	adds	r3, r0, #1
 8002e52:	d00a      	beq.n	8002e6a <sbrk_aligned+0x36>
 8002e54:	2303      	movs	r3, #3
 8002e56:	1cc5      	adds	r5, r0, #3
 8002e58:	439d      	bics	r5, r3
 8002e5a:	42a8      	cmp	r0, r5
 8002e5c:	d007      	beq.n	8002e6e <sbrk_aligned+0x3a>
 8002e5e:	1a29      	subs	r1, r5, r0
 8002e60:	0020      	movs	r0, r4
 8002e62:	f000 f8af 	bl	8002fc4 <_sbrk_r>
 8002e66:	1c43      	adds	r3, r0, #1
 8002e68:	d101      	bne.n	8002e6e <sbrk_aligned+0x3a>
 8002e6a:	2501      	movs	r5, #1
 8002e6c:	426d      	negs	r5, r5
 8002e6e:	0028      	movs	r0, r5
 8002e70:	bd70      	pop	{r4, r5, r6, pc}
 8002e72:	46c0      	nop			; (mov r8, r8)
 8002e74:	200000e4 	.word	0x200000e4

08002e78 <_malloc_r>:
 8002e78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e7a:	2203      	movs	r2, #3
 8002e7c:	1ccb      	adds	r3, r1, #3
 8002e7e:	4393      	bics	r3, r2
 8002e80:	3308      	adds	r3, #8
 8002e82:	0006      	movs	r6, r0
 8002e84:	001f      	movs	r7, r3
 8002e86:	2b0c      	cmp	r3, #12
 8002e88:	d232      	bcs.n	8002ef0 <_malloc_r+0x78>
 8002e8a:	270c      	movs	r7, #12
 8002e8c:	42b9      	cmp	r1, r7
 8002e8e:	d831      	bhi.n	8002ef4 <_malloc_r+0x7c>
 8002e90:	0030      	movs	r0, r6
 8002e92:	f000 f8a9 	bl	8002fe8 <__malloc_lock>
 8002e96:	4d32      	ldr	r5, [pc, #200]	; (8002f60 <_malloc_r+0xe8>)
 8002e98:	682b      	ldr	r3, [r5, #0]
 8002e9a:	001c      	movs	r4, r3
 8002e9c:	2c00      	cmp	r4, #0
 8002e9e:	d12e      	bne.n	8002efe <_malloc_r+0x86>
 8002ea0:	0039      	movs	r1, r7
 8002ea2:	0030      	movs	r0, r6
 8002ea4:	f7ff ffc6 	bl	8002e34 <sbrk_aligned>
 8002ea8:	0004      	movs	r4, r0
 8002eaa:	1c43      	adds	r3, r0, #1
 8002eac:	d11e      	bne.n	8002eec <_malloc_r+0x74>
 8002eae:	682c      	ldr	r4, [r5, #0]
 8002eb0:	0025      	movs	r5, r4
 8002eb2:	2d00      	cmp	r5, #0
 8002eb4:	d14a      	bne.n	8002f4c <_malloc_r+0xd4>
 8002eb6:	6823      	ldr	r3, [r4, #0]
 8002eb8:	0029      	movs	r1, r5
 8002eba:	18e3      	adds	r3, r4, r3
 8002ebc:	0030      	movs	r0, r6
 8002ebe:	9301      	str	r3, [sp, #4]
 8002ec0:	f000 f880 	bl	8002fc4 <_sbrk_r>
 8002ec4:	9b01      	ldr	r3, [sp, #4]
 8002ec6:	4283      	cmp	r3, r0
 8002ec8:	d143      	bne.n	8002f52 <_malloc_r+0xda>
 8002eca:	6823      	ldr	r3, [r4, #0]
 8002ecc:	3703      	adds	r7, #3
 8002ece:	1aff      	subs	r7, r7, r3
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	439f      	bics	r7, r3
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	2f0c      	cmp	r7, #12
 8002ed8:	d200      	bcs.n	8002edc <_malloc_r+0x64>
 8002eda:	270c      	movs	r7, #12
 8002edc:	0039      	movs	r1, r7
 8002ede:	0030      	movs	r0, r6
 8002ee0:	f7ff ffa8 	bl	8002e34 <sbrk_aligned>
 8002ee4:	1c43      	adds	r3, r0, #1
 8002ee6:	d034      	beq.n	8002f52 <_malloc_r+0xda>
 8002ee8:	6823      	ldr	r3, [r4, #0]
 8002eea:	19df      	adds	r7, r3, r7
 8002eec:	6027      	str	r7, [r4, #0]
 8002eee:	e013      	b.n	8002f18 <_malloc_r+0xa0>
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	dacb      	bge.n	8002e8c <_malloc_r+0x14>
 8002ef4:	230c      	movs	r3, #12
 8002ef6:	2500      	movs	r5, #0
 8002ef8:	6033      	str	r3, [r6, #0]
 8002efa:	0028      	movs	r0, r5
 8002efc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002efe:	6822      	ldr	r2, [r4, #0]
 8002f00:	1bd1      	subs	r1, r2, r7
 8002f02:	d420      	bmi.n	8002f46 <_malloc_r+0xce>
 8002f04:	290b      	cmp	r1, #11
 8002f06:	d917      	bls.n	8002f38 <_malloc_r+0xc0>
 8002f08:	19e2      	adds	r2, r4, r7
 8002f0a:	6027      	str	r7, [r4, #0]
 8002f0c:	42a3      	cmp	r3, r4
 8002f0e:	d111      	bne.n	8002f34 <_malloc_r+0xbc>
 8002f10:	602a      	str	r2, [r5, #0]
 8002f12:	6863      	ldr	r3, [r4, #4]
 8002f14:	6011      	str	r1, [r2, #0]
 8002f16:	6053      	str	r3, [r2, #4]
 8002f18:	0030      	movs	r0, r6
 8002f1a:	0025      	movs	r5, r4
 8002f1c:	f000 f86c 	bl	8002ff8 <__malloc_unlock>
 8002f20:	2207      	movs	r2, #7
 8002f22:	350b      	adds	r5, #11
 8002f24:	1d23      	adds	r3, r4, #4
 8002f26:	4395      	bics	r5, r2
 8002f28:	1aea      	subs	r2, r5, r3
 8002f2a:	429d      	cmp	r5, r3
 8002f2c:	d0e5      	beq.n	8002efa <_malloc_r+0x82>
 8002f2e:	1b5b      	subs	r3, r3, r5
 8002f30:	50a3      	str	r3, [r4, r2]
 8002f32:	e7e2      	b.n	8002efa <_malloc_r+0x82>
 8002f34:	605a      	str	r2, [r3, #4]
 8002f36:	e7ec      	b.n	8002f12 <_malloc_r+0x9a>
 8002f38:	6862      	ldr	r2, [r4, #4]
 8002f3a:	42a3      	cmp	r3, r4
 8002f3c:	d101      	bne.n	8002f42 <_malloc_r+0xca>
 8002f3e:	602a      	str	r2, [r5, #0]
 8002f40:	e7ea      	b.n	8002f18 <_malloc_r+0xa0>
 8002f42:	605a      	str	r2, [r3, #4]
 8002f44:	e7e8      	b.n	8002f18 <_malloc_r+0xa0>
 8002f46:	0023      	movs	r3, r4
 8002f48:	6864      	ldr	r4, [r4, #4]
 8002f4a:	e7a7      	b.n	8002e9c <_malloc_r+0x24>
 8002f4c:	002c      	movs	r4, r5
 8002f4e:	686d      	ldr	r5, [r5, #4]
 8002f50:	e7af      	b.n	8002eb2 <_malloc_r+0x3a>
 8002f52:	230c      	movs	r3, #12
 8002f54:	0030      	movs	r0, r6
 8002f56:	6033      	str	r3, [r6, #0]
 8002f58:	f000 f84e 	bl	8002ff8 <__malloc_unlock>
 8002f5c:	e7cd      	b.n	8002efa <_malloc_r+0x82>
 8002f5e:	46c0      	nop			; (mov r8, r8)
 8002f60:	200000e0 	.word	0x200000e0

08002f64 <_realloc_r>:
 8002f64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f66:	0007      	movs	r7, r0
 8002f68:	000e      	movs	r6, r1
 8002f6a:	0014      	movs	r4, r2
 8002f6c:	2900      	cmp	r1, #0
 8002f6e:	d105      	bne.n	8002f7c <_realloc_r+0x18>
 8002f70:	0011      	movs	r1, r2
 8002f72:	f7ff ff81 	bl	8002e78 <_malloc_r>
 8002f76:	0005      	movs	r5, r0
 8002f78:	0028      	movs	r0, r5
 8002f7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002f7c:	2a00      	cmp	r2, #0
 8002f7e:	d103      	bne.n	8002f88 <_realloc_r+0x24>
 8002f80:	f7ff ff0e 	bl	8002da0 <_free_r>
 8002f84:	0025      	movs	r5, r4
 8002f86:	e7f7      	b.n	8002f78 <_realloc_r+0x14>
 8002f88:	f000 f83e 	bl	8003008 <_malloc_usable_size_r>
 8002f8c:	9001      	str	r0, [sp, #4]
 8002f8e:	4284      	cmp	r4, r0
 8002f90:	d803      	bhi.n	8002f9a <_realloc_r+0x36>
 8002f92:	0035      	movs	r5, r6
 8002f94:	0843      	lsrs	r3, r0, #1
 8002f96:	42a3      	cmp	r3, r4
 8002f98:	d3ee      	bcc.n	8002f78 <_realloc_r+0x14>
 8002f9a:	0021      	movs	r1, r4
 8002f9c:	0038      	movs	r0, r7
 8002f9e:	f7ff ff6b 	bl	8002e78 <_malloc_r>
 8002fa2:	1e05      	subs	r5, r0, #0
 8002fa4:	d0e8      	beq.n	8002f78 <_realloc_r+0x14>
 8002fa6:	9b01      	ldr	r3, [sp, #4]
 8002fa8:	0022      	movs	r2, r4
 8002faa:	429c      	cmp	r4, r3
 8002fac:	d900      	bls.n	8002fb0 <_realloc_r+0x4c>
 8002fae:	001a      	movs	r2, r3
 8002fb0:	0031      	movs	r1, r6
 8002fb2:	0028      	movs	r0, r5
 8002fb4:	f7ff fed7 	bl	8002d66 <memcpy>
 8002fb8:	0031      	movs	r1, r6
 8002fba:	0038      	movs	r0, r7
 8002fbc:	f7ff fef0 	bl	8002da0 <_free_r>
 8002fc0:	e7da      	b.n	8002f78 <_realloc_r+0x14>
	...

08002fc4 <_sbrk_r>:
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	b570      	push	{r4, r5, r6, lr}
 8002fc8:	4d06      	ldr	r5, [pc, #24]	; (8002fe4 <_sbrk_r+0x20>)
 8002fca:	0004      	movs	r4, r0
 8002fcc:	0008      	movs	r0, r1
 8002fce:	602b      	str	r3, [r5, #0]
 8002fd0:	f7fd fbc4 	bl	800075c <_sbrk>
 8002fd4:	1c43      	adds	r3, r0, #1
 8002fd6:	d103      	bne.n	8002fe0 <_sbrk_r+0x1c>
 8002fd8:	682b      	ldr	r3, [r5, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d000      	beq.n	8002fe0 <_sbrk_r+0x1c>
 8002fde:	6023      	str	r3, [r4, #0]
 8002fe0:	bd70      	pop	{r4, r5, r6, pc}
 8002fe2:	46c0      	nop			; (mov r8, r8)
 8002fe4:	200000e8 	.word	0x200000e8

08002fe8 <__malloc_lock>:
 8002fe8:	b510      	push	{r4, lr}
 8002fea:	4802      	ldr	r0, [pc, #8]	; (8002ff4 <__malloc_lock+0xc>)
 8002fec:	f000 f814 	bl	8003018 <__retarget_lock_acquire_recursive>
 8002ff0:	bd10      	pop	{r4, pc}
 8002ff2:	46c0      	nop			; (mov r8, r8)
 8002ff4:	200000ec 	.word	0x200000ec

08002ff8 <__malloc_unlock>:
 8002ff8:	b510      	push	{r4, lr}
 8002ffa:	4802      	ldr	r0, [pc, #8]	; (8003004 <__malloc_unlock+0xc>)
 8002ffc:	f000 f80d 	bl	800301a <__retarget_lock_release_recursive>
 8003000:	bd10      	pop	{r4, pc}
 8003002:	46c0      	nop			; (mov r8, r8)
 8003004:	200000ec 	.word	0x200000ec

08003008 <_malloc_usable_size_r>:
 8003008:	1f0b      	subs	r3, r1, #4
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	1f18      	subs	r0, r3, #4
 800300e:	2b00      	cmp	r3, #0
 8003010:	da01      	bge.n	8003016 <_malloc_usable_size_r+0xe>
 8003012:	580b      	ldr	r3, [r1, r0]
 8003014:	18c0      	adds	r0, r0, r3
 8003016:	4770      	bx	lr

08003018 <__retarget_lock_acquire_recursive>:
 8003018:	4770      	bx	lr

0800301a <__retarget_lock_release_recursive>:
 800301a:	4770      	bx	lr

0800301c <_init>:
 800301c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800301e:	46c0      	nop			; (mov r8, r8)
 8003020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003022:	bc08      	pop	{r3}
 8003024:	469e      	mov	lr, r3
 8003026:	4770      	bx	lr

08003028 <_fini>:
 8003028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800302a:	46c0      	nop			; (mov r8, r8)
 800302c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800302e:	bc08      	pop	{r3}
 8003030:	469e      	mov	lr, r3
 8003032:	4770      	bx	lr
